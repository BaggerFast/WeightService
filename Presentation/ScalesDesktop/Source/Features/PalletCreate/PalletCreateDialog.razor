@implements IDialogContentComponent
@using ScalesDesktop.Source.Shared.Localization
@using Microsoft.Extensions.Localization
@using ScalesDesktop.Source.Shared.Services
@using Ws.Domain.Services.Features.Plu
@using Ws.Labels.Service.Features.PrintLabel
@using Ws.Labels.Service.Features.PrintLabel.Types.Piece.Dto

<Dialog class="max-w-screen-md">
  <DialogHeader>
    <Button
      Variant="ButtonVariant.Secondary"
      Class="disabled:!opacity-100"
      Disabled
    >
      @Localizer["CreatePalletFormHeader"]
    </Button>
  </DialogHeader>
  <div class="max-h-full w-full overflow-y-auto py-4">
    <Stepper @bind-CurrentIndex="CurrentStepIndex" Class="mb-4 mt-2">
      <StepperItem Label="ПЛУ" Disabled />
      <StepperItem Label="Паллета" Disabled />
      <StepperItem Label="Итог" Disabled />
    </Stepper>
    @if (CurrentStepIndex == 1)
    {
      <PalletPluStageForm
        FormModel="FormModel"
        OnCancelAction="@(async() => await Dialog.CloseAsync())"
        OnValidSubmit="@(() => CurrentStepIndex = 2)"
      />
    }
    @if (CurrentStepIndex == 2)
    {
      <PalletSecondStageForm
        FormModel="FormModel"
        OnCancelAction="@(() => CurrentStepIndex = 1)"
        OnValidSubmit="@(() => CurrentStepIndex = 3)"
      />
    }
    @if (CurrentStepIndex == 3)
    {
      <PalletResultStageForm
        FormModel="FormModel"
        OnCancelAction="@(() => CurrentStepIndex = 2)"
        OnSubmit="@CreatePallet"
      />
    }
  </div>
</Dialog>

@code {
  # region Injects

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IPrintLabelService PrintLabelService { get; set; } = default!;
  [Inject] private PalletContext PalletContext { get; set; } = default!;
  [Inject] private IPluService PluService { get; set; } = default!;
  [Inject] private LineContext LineContext { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;

  # endregion
  [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;

  private int CurrentStepIndex { get; set; } = 1;
  private PalletCreateModel FormModel { get; set; } = new();

  private async Task CreatePallet()
  {
    DateTime createDt = FormModel.CreateDt ?? DateTime.Now;
    LabelPiecePalletDto dto = new()
    {
      PalletMan = PalletContext.PalletMan,
      Weight = FormModel.PalletWeight,
      ExpirationDt = createDt.AddDays(FormModel.Plu!.ShelfLifeDays),
      Kneading = FormModel.Kneading,
      Line = LineContext.Line,
      Nesting = FormModel.Nesting!,
      ProductDt = createDt,
      Template = PluService.GetPluTemplate(FormModel.Plu).Body
    };

    try
    {
      await Task.Run(() => { PrintLabelService.GeneratePiecePallet(dto, FormModel.Count); });
      PalletContext.UpdatePalletData();
      await Dialog.CloseAsync();
    }
    catch
    {
      ToastService.ShowError("Ошибка при создании паллеты");
    }
  }
}