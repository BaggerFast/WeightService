@using Blazor.Heroicons.Outline
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<Button
  id="theme-button"
  Variant="ButtonVariant.Ghost"
  Size="ButtonSize.Icon"
  OnClick="@(() => IsOpen = !IsOpen)"
  Class="shrink-0"
>
  <SunIcon class="size-5 dark:hidden" />
  <MoonIcon class="size-5 hidden dark:block" />
</Button>

<Dropdown
  Anchor="theme-button"
  @bind-IsOpen="@IsOpen"
  VerticalThreshold="100"
>
  <ul class="flex flex-col p-1">
    <li>
      <DropdownItem OnClick="@(() => SetTheme("light"))">
        <SunIcon class="size-4 mr-2"/>
        <span>Светлая</span>
      </DropdownItem>
    </li>
    <li>
      <DropdownItem OnClick="@(() => SetTheme("dark"))">
        <MoonIcon class="size-4 mr-2"/>
        <span>Темная</span>
      </DropdownItem>
    </li>
    <li>
      <DropdownItem OnClick="@(() => SetTheme("system"))">
        <ComputerDesktopIcon class="size-4 mr-2"/>
        <span>Системная</span>
      </DropdownItem>
    </li>
  </ul>
</Dropdown>

@code {
  private IJSObjectReference? Module { get; set; }
  private bool IsOpen { get; set; } = false;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;
    Module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./libs/theme-utils.js");
  }

  private async Task SetTheme(string theme) =>
    await Module!.InvokeVoidAsync("switchTheme", theme);


  public async ValueTask DisposeAsync()
  {
    try
    {
      if (Module == null) return;
      await Module.DisposeAsync();
    }
    catch (Exception ex) when (ex is JSDisconnectedException or ArgumentNullException)
    {
      // pass error
    }
  }
}
