@using Blazor.Heroicons.Outline

<div class="h-14 w-full flex items-center justify-center gap-2">
  <Button
    Variant="ButtonVariant.Outline"
    Size="ButtonSize.Icon"
    OnClick="@(() => GoToPageAsync(0))"
    disabled="@(Pagination.CurrentPageIndex == 0)"
  >
    <ChevronDoubleLeftIcon class="size-5" />
  </Button>
  <Button
    Variant="ButtonVariant.Outline"
    Size="ButtonSize.Icon"
    OnClick="@(() => GoToPageAsync(Pagination.CurrentPageIndex - 1))"
    disabled="@(Pagination.CurrentPageIndex == 0)"
  >
    <ChevronLeftIcon class="size-5" />
  </Button>
  <div class="h-9 px-3 flex border items-center justify-center text-sm rounded-md overflow-hidden">
    @(Pagination.CurrentPageIndex + 1) / @(Pagination.LastPageIndex + 1)
  </div>
  <Button
    Variant="ButtonVariant.Outline"
    Size="ButtonSize.Icon"
    OnClick="@(() => GoToPageAsync(Pagination.CurrentPageIndex + 1))"
    disabled="@(Pagination.CurrentPageIndex == Pagination.LastPageIndex)"
  >
    <ChevronRightIcon class="size-5" />
  </Button>
  <Button
    Variant="ButtonVariant.Outline"
    Size="ButtonSize.Icon"
    OnClick="@(() => GoToPageAsync(Pagination.LastPageIndex ?? Pagination.CurrentPageIndex))"
    disabled="@(Pagination.CurrentPageIndex == Pagination.LastPageIndex)"
  >
    <ChevronDoubleRightIcon class="size-5" />
  </Button>
</div>

@code {
  [Parameter, EditorRequired] public PaginationState Pagination { get; set; } = default!;

  private async Task GoToPageAsync(int pageIndex) =>
    await Pagination.SetCurrentPageIndexAsync(pageIndex);
}