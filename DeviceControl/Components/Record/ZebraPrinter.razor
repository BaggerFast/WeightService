@page "/ZebraPrinter"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using DeviceControl.Core.Models
@using System.Runtime.CompilerServices
@using BlazorDeviceControl.Models
@using DeviceControl.Core.DAL.DataModels
@using System.Globalization
@using System.Security.Cryptography.X509Certificates
@inject AppSettings AppSettings
@inject DataAccessConfig DataAccessConfig
@inject DialogService Dialog
@inject NotificationService Notification

@* Fields *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldName />
        <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Name />
        <br />
        <RadzenLink Style="width: 12%;" Text=@Utils.LocalizationStrings.TableFieldZebraPrinter 
                    Target="_blank" Path=@Item.Link />
        <RadzenLabel Style="width: 23.5%; margin-left: 2.3%;" Text=@Utils.LocalizationStrings.TableFieldZebraPrinterIp />
        <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Ip />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldZebraPrinterPort />
        <RadzenNumeric Style="width: 63%; text-align: center;" Disabled="false" TValue="short" @bind-Value=@Item.Port />
        <br />
    </div>
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldZebraPrinterMac />
        <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Mac />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldZebraPrinterPassword />
        <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Password />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldZebraPrinterType />
        @if (ItemsZebraPrinterType == null)
        {
            <RadzenTextBox Style="width: 63%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 63%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@ItemsZebraPrinterType PageSize="10"
                                    TextProperty="Name" ValueProperty="Id"
                                    Value=@Item.PrinterType?.Id
                                    Change=@(args => OnChange(args, "ZebraPrinterTypeItems")) />
        }
        <br />
    </div>
</div>

@* Dates *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px">
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldCreateDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.CreateDate.ToString(CultureInfo.InvariantCulture) />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldModifiedDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.ModifiedDate.ToString(CultureInfo.InvariantCulture) />
</div>

@* Resources grids *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    <RadzenLabel Style="width: 100%; text-align: center;" Text=@Utils.LocalizationStrings.TableTitleResources />
    <br />
    @if (ItemsResource == null)
    {
        <RadzenLabel Text=@Utils.LocalizationStrings.DataLoading />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
    }
    else
    {
        <RadzenGrid Data=@ItemsResource TItem="ZebraPrinterResourceRefEntity"
                    RowSelect=@(args => RowSelectAsync(args))
                    RowDoubleClick=@(args => RowDoubleClickAsync(args))
                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                    AllowPaging="true" PageSize="10" AllowSorting="true" ColumnWidth="200px">
            <Columns>
                <RadzenGridColumn TItem="ZebraPrinterResourceRefEntity" Property="Id"
                                  Title=@Utils.LocalizationStrings.TableFieldId Type="int" Width="10%" />
                <RadzenGridColumn TItem="ZebraPrinterResourceRefEntity" Property="Description"
                                  Title=@Utils.LocalizationStrings.TableFieldDescription Type="string" Width="30%" />
                <RadzenGridColumn TItem="ZebraPrinterResourceRefEntity" Property="Resource.Name"
                                  Title=@Utils.LocalizationStrings.TableFieldResource Type="string" Width="30%" />
            </Columns>
        </RadzenGrid>
    }
    @* Resource actions *@
    <div style="margin-top: 5px">
        @if (AppSettings.ShowActionsButtons)
        {
            <RadzenButton Click=@(args => ActionAddAsync(EnumTable.ZebraPrinterResourceRef, ItemResource, Item))
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="margin-left: 30px; margin-top: 5px; width: 150px; height: 30px; font-size: 12px;"
                          Text=@Utils.LocalizationStrings.TableActionAdd Disabled=@AppSettings.DataAccess.IsDisabled />
            <RadzenButton Click=@(args => ActionEditAsync(EnumTable.ZebraPrinterResourceRef, ItemResource, Item))
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="margin-left: 30px; margin-top: 5px; width: 150px; height: 30px; font-size: 12px;"
                          Text=@Utils.LocalizationStrings.TableActionEdit Disabled=@AppSettings.DataAccess.IsDisabled />
            <RadzenButton Click=@(args => ActionDeleteAsync(EnumTable.ZebraPrinterResourceRef, ItemResource, Item))
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="margin-left: 30px; margin-top: 5px; width: 150px; height: 30px; font-size: 12px;"
                          Text=@Utils.LocalizationStrings.TableActionDelete Disabled=@AppSettings.DataAccess.IsDisabled />
        }
        else
        {
            <RadzenLabel Text=@Utils.LocalizationStrings.TableActionsIsDeny />
        }
    </div>
</div>

@code {
    public ZebraPrinterResourceRefEntity ItemResource { get; set; } = null;
    public List<ZebraPrinterResourceRefEntity> ItemsResource { get; set; }
    public List<ZebraPrinterTypeEntity> ItemsZebraPrinterType { get; set; } = null;
    [Parameter]
    public ZebraPrinterEntity Item { get; set; }

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        AppSettings.Setup(DataAccessConfig, Notification, Dialog);

        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            if (entity is ZebraPrinterResourceRefEntity zebraPrinterResourceRefEntity)
            {
                ItemResource = zebraPrinterResourceRefEntity;
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            AppSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task RowDoubleClickAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            if (entity is ZebraPrinterResourceRefEntity zebraPrinterResourceRefEntity)
            {
                ItemResource = zebraPrinterResourceRefEntity;
                await ActionEditAsync(EnumTable.ZebraPrinterResourceRef, ItemResource, Item).ConfigureAwait(true);
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            AppSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private void OnChange(object value, string name)
    {
        switch (name)
        {
            case "ZebraPrinterTypeItems":
                if (value is int id)
                {
                    if (id <= 0)
                        Item.PrinterType = null;
                    else
                    {
                        Item.PrinterType = AppSettings.DataAccess.ZebraPrinterTypeCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), id } }),
                        null);
                    }
                }
                break;
        }
        StateHasChanged();
    }

    private async Task GetDataAsync(
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            ItemsZebraPrinterType = AppSettings.DataAccess.ZebraPrinterTypeCrud.GetEntities(null, null).ToList();

            ItemsResource = new List<ZebraPrinterResourceRefEntity>();
            var items = AppSettings.DataAccess.ZebraPrinterResourceRefCrud.GetEntities(
                new FieldListEntity(new Dictionary<string, object> { { "Printer.Id", Item.Id } }),
                new FieldOrderEntity(EnumField.Description, EnumOrderDirection.Asc));
            ItemsResource.AddRange(items);
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            AppSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task ActionEditAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    #endregion
}
