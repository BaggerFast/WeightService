@page "/Scale"
@using BlazorDeviceControl.Models
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.DataModels
@using DeviceControl.Core.DAL.TableModels
@using DeviceControl.Core.Models
@using System.Runtime.CompilerServices
@using System.Linq
@inject AppSettings AppSettings
@inject DataAccessConfig DataAccessConfig
@inject DialogService Dialog
@inject NotificationService Notification

@* Fields *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldDescription />
        <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Description />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldDeviceSendTimeout />
        <RadzenNumeric Style="width: 63%; text-align: center;" Disabled="false" TValue="short?" @bind-Value=@Item.DeviceSendTimeout />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldDeviceReceiveTimeout />
        <RadzenNumeric Style="width: 63%; text-align: center;" Disabled="false" TValue="short?" @bind-Value=@Item.DeviceReceiveTimeout />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldDeviceComPort />
        @if (ComPorts == null)
        {
            <RadzenTextBox Style="width: 63%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDown Style="width: 63%;" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                            Data=@ComPorts PageSize="5" TextProperty="Name" ValueProperty="Value"
                            Value=@Item.DeviceComPort Change=@(args => OnChange(args, "DeviceComPort")) />
        }
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldZebraPrinter />
        @if (PrinterItems == null)
        {
            <RadzenTextBox Style="width: 63%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 63%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@PrinterItems PageSize="5"
                                    TextProperty="Name" ValueProperty="Id"
                                    Value=@Item.Printer?.Id
                                    Change=@(args => OnChange(args, "Printers")) />
        }
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldHost />
        @if (HostItems == null)
        {
            <RadzenTextBox Style="width: 63%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 63%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@HostItems PageSize="5"
                                    TextProperty="Name" ValueProperty="Id"
                                    Value=@Item.Host?.Id
                                    Change=@(args => OnChange(args, "Hosts"))>
                <Columns>
                    <RadzenDropDownDataGridColumn Property="Name" Title=@Utils.LocalizationStrings.TableFieldName Width="30%" />
                    <RadzenDropDownDataGridColumn Property="IdRRef" Title=@Utils.LocalizationStrings.TableFieldIdRRef Width="70%" />
                </Columns>
            </RadzenDropDownDataGrid>
        }
        <br />
    </div>
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldDeviceNumber />
        <RadzenNumeric Style="width: 62.0%; text-align: center;" Disabled="false" TValue="int?"
                       Name="fieldDeviceNumber" @bind-Value=@Item.DeviceNumber />
        <RadzenNumericRangeValidator Component="fieldDeviceNumber" Min="0"
                                     Text=@Utils.LocalizationStrings.InputControlMuchZero Popup=true Style="position: absolute;" />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldUseOrder />
        <RadzenCheckBox Disabled="false" TValue="bool?" @bind-Value=@Item.UseOrder />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldTemplateDefault />
        @if (TemplatesDefaultItems == null)
        {
            <RadzenTextBox Style="width: 62.0%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 62.0%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@TemplatesDefaultItems PageSize="5"
                                    TextProperty="Title" ValueProperty="Id"
                                    Value=@Item.TemplateDefault?.Id
                                    Change=@(args => OnChange(args, "TemplatesDefault")) />
        }
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldTemplateSeries />
        @if (TemplatesSeriesItems == null)
        {
            <RadzenTextBox Style="width: 62.0%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 62.0%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@TemplatesSeriesItems PageSize="5"
                                    TextProperty="Title" ValueProperty="Id"
                                    Value=@Item.TemplateSeries?.Id
                                    Change=@(args => OnChange(args, "TemplatesSeries")) />
        }
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldWorkShopName />
        @if (WorkshopItems == null)
        {
            <RadzenTextBox Style="width: 62.0%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 62.0%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@WorkshopItems PageSize="5"
                                    TextProperty="Name" ValueProperty="Id"
                                    Value=@Item.WorkShop?.Id
                                    Change=@(args => OnChange(args, "WorkShops")) />
        }
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldScaleFactor />
        <RadzenNumeric Style="width: 62.0%; text-align: center;" Disabled="false" TValue="int?" @bind-Value=@Item.ScaleFactor />
        <br />
    </div>
</div>

@* PLU grid *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    @if (PluItems == null)
    {
        <RadzenLabel Text=@Utils.LocalizationStrings.DataLoading Style="width: 20%" />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
    }
    else
    {
        <RadzenLabel Style="width: 100%; text-align: center;" Text=@PluTitle />
        <br />
        <RadzenGrid id="RadzenGrid" Data=@PluItems TItem="PluEntity"
                    RowSelect=@(args => RowSelectAsync(args)) RowDoubleClick=@(args => RowDoubleClickAsync(args))
                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                    AllowPaging="true" PageSize="9" AllowSorting="true" ColumnWidth="50px" >
            <Columns>
                <RadzenGridColumn TItem="PluEntity" Property="Id" Title=@Utils.LocalizationStrings.TableFieldId Width="5%" />
                <RadzenGridColumn TItem="PluEntity" Property="Plu" Title=@Utils.LocalizationStrings.TableFieldPlu Width="5%" />
                <RadzenGridColumn TItem="PluEntity" Property="Active" Title=@Utils.LocalizationStrings.TableFieldActive Width="4%">
                    <Template Context="PluEntity">
                        <RadzenCheckBox TValue="bool" @bind-Value=@PluEntity.Active Disabled="true" />
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="PluEntity" Property="CheckWeight" Title=@Utils.LocalizationStrings.TableFieldCheckWeight Width="4%">
                    <Template Context="PluEntity">
                        <RadzenCheckBox TValue="bool?" @bind-Value="@PluEntity.CheckWeight" Disabled="true" />
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="PluEntity" Property="GoodsName" Title=@Utils.LocalizationStrings.TableFieldGoodsName Width="17%" />
                <RadzenGridColumn TItem="PluEntity" Property="Templates.Title" Title=@Utils.LocalizationStrings.TableFieldTemplate Width="15%" />
                <RadzenGridColumn TItem="PluEntity" Property="Gtin" Title=@Utils.LocalizationStrings.TableFieldGtin Width="10%" />
                <RadzenGridColumn TItem="PluEntity" Property="GtinCheck" Title="" Width="3%">
                    <Template Context="PluEntity">
                        @if (@PluEntity.GtinCheck())
                        {
                            <RadzenIcon Icon="" Disabled="true" />
                        }
                        else
                        {
                            <RadzenIcon Icon="announcement" Disabled="true" />
                        }
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="PluEntity" Property="Nomenclature.Name" Title=@Utils.LocalizationStrings.TableFieldNomenclatureName Width="15%" />
                <RadzenGridColumn TItem="PluEntity" Property="GoodsShelfLifeDays" Title=@Utils.LocalizationStrings.TableFieldShelfLifeDays Width="5%" />
                <RadzenGridColumn TItem="PluEntity" Property="GoodsTareWeight" Title=@Utils.LocalizationStrings.TableFieldGoodsTareWeight Width="7%" />
                <RadzenGridColumn TItem="PluEntity" Property="GoodsBoxQuantly" Title=@Utils.LocalizationStrings.TableFieldGoodsBoxQuantly Width="5%" />
            </Columns>
        </RadzenGrid>
    }
</div>

@* Actions *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px">
    @if (AppSettings.ShowActionsButtons)
    {
        <RadzenButton Click=@(args => ActionAddAsync(EnumTable.Plu, PluItem, Item))
                      ButtonStyle="ButtonStyle.Secondary"
                      Style="margin-left: 30px; margin-top: 5px; width: 250px; height: 30px; font-size: 12px;"
                      Text=@Utils.LocalizationStrings.TableActionAdd Disabled=@AppSettings.DataAccess.IsDisabled />
        <RadzenButton Click=@(args => ActionEditAsync(EnumTable.Plu, PluItem, Item))
                      ButtonStyle="ButtonStyle.Secondary"
                      Style="margin-left: 30px; margin-top: 5px; width: 250px; height: 30px; font-size: 12px;"
                      Text=@Utils.LocalizationStrings.TableActionEdit Disabled=@AppSettings.DataAccess.IsDisabled />
        <RadzenButton Click=@(args => ActionMarkedAsync(EnumTable.Plu, PluItem, Item))
                      ButtonStyle="ButtonStyle.Secondary"
                      Style="margin-left: 30px; margin-top: 5px; width: 250px; height: 30px; font-size: 12px;"
                      Text=@Utils.LocalizationStrings.TableActionDelete Disabled=@AppSettings.DataAccess.IsDisabled />
    }
    else
    {
        <RadzenLabel Text=@Utils.LocalizationStrings.TableActionsIsDeny />
    }
</div>

@* Dates *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px">
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldCreateDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.CreateDate.ToString() />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldModifiedDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.ModifiedDate.ToString() />
</div>

@code {
    public string PluTitle { get; set; }
    public PluEntity PluItem { get; set; }
    public List<PluEntity> PluItems { get; set; } = null;
    public List<ZebraPrinterEntity> PrinterItems { get; set; } = null;
    public List<TemplatesEntity> TemplatesDefaultItems { get; set; } = null;
    public List<TemplatesEntity> TemplatesSeriesItems { get; set; } = null;
    public List<WorkshopEntity> WorkshopItems { get; set; } = null;
    public List<TypeEntity<string>> ComPorts { get; set; }
    public List<HostsEntity> HostItems { get; set; } = null;
    [Parameter]
    public ScalesEntity Item { get; set; }

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        AppSettings.Setup(DataAccessConfig, Notification, Dialog);

        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            if (entity is PluEntity pluEntity)
            {
                PluItem = pluEntity;
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            AppSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task RowDoubleClickAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            if (entity is PluEntity pluEntity)
            {
                PluItem = pluEntity;
                await ActionEditAsync(EnumTable.Plu, PluItem, Item).ConfigureAwait(true);
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            AppSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private void OnChange(object value, string name)
    {
        switch (name)
        {
            case "DeviceComPort":
                if (value is string strValue)
                {
                    Item.DeviceComPort = strValue;
                }
                break;
            case "TemplatesDefault":
                if (value is int idDefault)
                {
                    if (idDefault <= 0)
                        Item.TemplateDefault = null;
                    else
                    {
                        Item.TemplateDefault = AppSettings.DataAccess.TemplatesCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idDefault } }),
                            null);
                    }
                }
                break;
            case "TemplatesSeries":
                if (value is int idSeries)
                {
                    if (idSeries <= 0)
                        Item.TemplateSeries = null;
                    else
                    {
                        Item.TemplateSeries = AppSettings.DataAccess.TemplatesCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idSeries } }),
                            null);
                    }
                }
                break;
            case "WorkShops":
                if (value is int idWorkShop)
                {
                    if (idWorkShop <= 0)
                        Item.WorkShop = null;
                    else
                    {
                        Item.WorkShop = AppSettings.DataAccess.WorkshopCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idWorkShop } }),
                            null);
                    }
                }
                break;
            case "Printers":
                if (value is int idPrinter)
                {
                    if (idPrinter <= 0)
                        Item.Printer = null;
                    else
                    {
                        Item.Printer = AppSettings.DataAccess.ZebraPrinterCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idPrinter } }),
                            null);
                    }
                }
                break;
            case "Hosts":
                if (value is int idHost)
                {
                    if (idHost <= 0)
                        Item.Host = null;
                    else
                    {
                        Item.Host = AppSettings.DataAccess.HostsCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idHost } }),
                            null);
                    }
                }
                break;
        }
        StateHasChanged();
    }

    private async Task GetDataAsync(
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            ComPorts = new List<TypeEntity<string>>();
            for (var i = 1; i < 256; i++)
            {
                ComPorts.Add(new TypeEntity<string>($"COM{i}", $"COM{i}"));
            }

            // ScaleFactor
            Item.ScaleFactor ??= 1000;

            PluTitle = $"{Utils.LocalizationStrings.TableTitlePluShort}  [{Utils.LocalizationStrings.DataLoading}]";
            PluItems = AppSettings.DataAccess.PluCrud.GetEntities(new FieldListEntity(new Dictionary<string, object> {
                    { EnumField.Marked.ToString(), false },
                    { "Scale.Id", Item.Id },
                }),
            new FieldOrderEntity(EnumField.Plu, EnumOrderDirection.Asc)).ToList();
            PluTitle = $"{Utils.LocalizationStrings.TableTitlePluShort}  [{PluItems.Count} {Utils.LocalizationStrings.DataRecords}]";
            TemplatesDefaultItems = AppSettings.DataAccess.TemplatesCrud.GetEntities(
                new FieldListEntity(new Dictionary<string, object> { { EnumField.Marked.ToString(), false } }), 
                null).ToList();
            TemplatesSeriesItems = AppSettings.DataAccess.TemplatesCrud.GetEntities(
                new FieldListEntity(new Dictionary<string, object> { { EnumField.Marked.ToString(), false } }),
                null).ToList();
            WorkshopItems = AppSettings.DataAccess.WorkshopCrud.GetEntities(
                new FieldListEntity(new Dictionary<string, object> { { EnumField.Marked.ToString(), false } }),
                null).ToList();
            PrinterItems = AppSettings.DataAccess.ZebraPrinterCrud.GetEntities(
                new FieldListEntity(new Dictionary<string, object> { { EnumField.Marked.ToString(), false } } ),
                null).ToList();
            HostItems = AppSettings.DataAccess.HostsCrud.GetFreeHosts(Item.Host?.Id);
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            AppSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task ActionEditAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionMarkedAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Marked, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    #endregion
}
