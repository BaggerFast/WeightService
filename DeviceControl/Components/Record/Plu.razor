@page "/Plu"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using DeviceControl.Core.Models
@using System.Runtime.CompilerServices
@using BlazorDeviceControl.Data
@using DeviceControl.Core
@using DeviceControl.Core.DAL.DataModels
@using DeviceControl.Core.Models.XML
@using Toolbelt.Blazor.HotKeys
@inject BlazorSettingsEntity _blazorSettings
@inject DataAccessConfig _dataAccessConfig
@inject DialogService _dialog
@inject NavigationManager _navigation
@inject NotificationService _notification
@inject TooltipService _tooltip
@inject HotKeys _hotKeys
@inject IJSRuntime _jsRuntime
@* Fields *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    <div class="col-sm-7 col-md-7 col-lg-7">
        <RadzenLabel Style="width: 30%;" Text=@Utils.LocalizationStrings.TableFieldLine />
        @if (ScalesEntities == null)
        {
            <RadzenTextBox Style="width: 68%; height: 35px;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 68%; height: 35px;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@ScalesEntities PageSize="5"
                                    TextProperty="Description" ValueProperty="Id"
                                    Value=@Item.Scale?.Id Disabled="true"
                                    Change=@(args => OnChange(args, "Scale")) />
        }
        <br />
        <RadzenLabel Style="width: 30%;" Text=@Utils.LocalizationStrings.TableFieldTemplate />
        @if (TemplatesEntities == null)
        {
            <RadzenTextBox Style="width: 68%; height: 35px;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 68%; height: 35px;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@TemplatesEntities PageSize="5"
                                    TextProperty="Title" ValueProperty="Id"
                                    Value=@Item.Templates?.Id
                                    Change=@(args => OnChange(args, "Templates")) />
        }
        <br />
        <RadzenLabel Style="width: 30%;" Text=@Utils.LocalizationStrings.TableFieldNomenclatureName />
        @if (NomenclatureEntities == null)
        {
            <RadzenTextBox Style="width: 68%; height: 35px;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 68%; height: 35px;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@NomenclatureEntities PageSize="5"
                                    TextProperty="Name" ValueProperty="Id"
                                    Value=@Item.Nomenclature?.Id
                                    Change=@(args => OnChange(args, "Nomenclature")) />
        }
        <br />
        <RadzenLabel Style="width: 30%;" Text=@Utils.LocalizationStrings.TableFieldActive />
        <RadzenCheckBox Disabled="false" TValue="bool" @bind-Value=@Item.Active />
        <br />
        <RadzenLabel Style="width: 30%;" Text=@Utils.LocalizationStrings.TableFieldUpperWeightThreshold />
        <RadzenNumeric Style="width: 68%; text-align: center;" Disabled="false" TValue="decimal?" @bind-Value=@Item.UpperWeightThreshold />
        <br />
        <RadzenLabel Style="width: 30%;" Text=@Utils.LocalizationStrings.TableFieldNominalWeight />
        <RadzenNumeric Style="width: 68%; text-align: center;" Disabled="false" TValue="decimal?" @bind-Value=@Item.NominalWeight />
        <br />
        <RadzenLabel Style="width: 30%;" Text=@Utils.LocalizationStrings.TableFieldLowerWeightThreshold />
        <RadzenNumeric Style="width: 68%; text-align: center;" Disabled="false" TValue="decimal?" @bind-Value=@Item.LowerWeightThreshold />
        <br />
        <RadzenLabel Style="width: 30%;" Text=@Utils.LocalizationStrings.TableFieldCheckWeight />
        <RadzenCheckBox Disabled="false" TValue="bool?" @bind-Value=@Item.CheckWeight />
        <br />
    </div>
    <div class="col-sm-5 col-md-5 col-lg-5">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldPlu />
        <RadzenNumeric Style="width: 63%; text-align: center;" Disabled="false" TValue="int" @bind-Value=@Item.Plu />
        <br />
        <RadzenLabel Style="width: 26.5%;" Text=@Utils.LocalizationStrings.TableFieldShelfLifeDays />
        <RadzenButton Style="width: 7%; margin-right: 1%;" Disabled="false" Icon="autorenew"
                      Click=@(args => OnClickFieldsFill("GoodsShelfLifeDays")) />
        <RadzenNumeric Style="width: 63%; text-align: center;" Disabled="false" TValue="short" @bind-Value=@Item.GoodsShelfLifeDays />
        <br />
        <RadzenLabel Style="width: 26.5%;" Text=@Utils.LocalizationStrings.TableFieldGoodsTareWeight />
        <RadzenButton Style="width: 7%; margin-right: 1%;" Disabled="false" Icon="autorenew"
                      Click=@(args => OnClickFieldsFill("GoodsTareWeight")) />
        <RadzenNumeric Style="width: 63%; text-align: center;" Disabled="false" TValue="decimal" @bind-Value=@Item.GoodsTareWeight />
        <br />
        <RadzenLabel Style="width: 26.5%;" Text=@Utils.LocalizationStrings.TableFieldGoodsBoxQuantly />
        <RadzenButton Style="width: 7%; margin-right: 1%;" Disabled="false" Icon="autorenew"
                      Click=@(args => OnClickFieldsFill("GoodsBoxQuantly")) />
        <RadzenNumeric Style="width: 63%; text-align: center;" Disabled="false" TValue="int" @bind-Value=@Item.GoodsBoxQuantly />
        <br />
        <RadzenLabel Style="width: 26.5%;" Text=@Utils.LocalizationStrings.TableFieldEan13 />
        <RadzenButton Style="width: 7%; margin-right: 1%;" Disabled="false" Icon="autorenew"
                      Click=@(args => OnClickFieldsFill("EAN13")) />
        <RadzenTextBox Style="width: 50%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Ean13 />
        @if (Item?.Ean13 == null)
        {
            <RadzenLabel Style="width: 10.0%; text-align: center; " Text="0" />
        }
        else
        {
            <RadzenLabel Style="width: 10.0%; text-align: center; " Text=@Item.Ean13.Length.ToString() />
        }
        <br />
        <RadzenLabel Style="width: 18.0%; margin-top: 20px;" Text=@Utils.LocalizationStrings.TableFieldGtin />
        <RadzenButton Style="width: 7%; margin-right: 0.75%;" Disabled="false" Icon="aspect_ratio"
                      ButtonStyle="ButtonStyle.Secondary"
                      Click=@(args => OnClickFieldsFill("getgtin")) />
        <RadzenButton Style="width: 7%; margin-right: 0.75%;" Disabled="false" Icon="autorenew"
                      Click=@(args => OnClickFieldsFill("GTIN")) />
        <RadzenTextBox Style="width: 50%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Gtin />
        @if (Item?.Gtin == null)
        {
            <RadzenLabel Style="width: 10.0%; text-align: center; " Text="0" />
        }
        else
        {
            <RadzenLabel Style="width: 10.0%; text-align: center; " Text=@Item.Gtin.Length.ToString() />
        }
        <br />
        <RadzenLabel Style="width: 26.5%;" Text=@Utils.LocalizationStrings.TableFieldItf14 />
        <RadzenButton Style="width: 7%; margin-right: 1%;" Disabled="false" Icon="autorenew"
                      Click=@(args => OnClickFieldsFill("ITF14")) />
        <RadzenTextBox Style="width: 50%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Itf14 />
        @if (Item?.Itf14 == null)
        {
            <RadzenLabel Style="width: 10.0%; text-align: center; " Text="0" />
        }
        else
        {
            <RadzenLabel Style="width: 10.0%; text-align: center; " Text=@Item.Itf14.Length.ToString() />
        }
        <br />
        <RadzenButton Style="width: 48%; " Disabled="false" Icon="autorenew" Text=@Utils.LocalizationStrings.TableActionFill
                      Click=@(args => OnClickFieldsFill("Entity")) />
        <RadzenButton Style="width: 48%; " Disabled="false" Icon="clear" Text=@Utils.LocalizationStrings.TableActionClear
                      Click=@(args => OnClickFieldsFill("Clear")) />
        <br />
    </div>
    <div class="col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px; border-color: grey; border-width: 1px; border-style: solid;">
        <RadzenLabel Style="width: 13.5%;" Text=@Utils.LocalizationStrings.TableFieldName />
        <RadzenButton Style="width: 3%; margin-right: 0.5%;" Disabled="false" Icon="autorenew" Click=@(args => OnClickFieldsFill("GoodsName")) />
        <RadzenTextArea Style="width: 82%; height: 30px;" Disabled="false" TValue="string" @bind-value=@Item.GoodsName />
        <br />
        <RadzenLabel Style="width: 13.5%;" Text=@Utils.LocalizationStrings.TableFieldGoodsFullName />
        <RadzenButton Style="width: 3%; margin-right: 0.5%;" Disabled="false" Icon="autorenew" Click=@(args => OnClickFieldsFill("GoodsFullName")) />
        <RadzenTextArea Style="width: 82%; height: 60px;" Disabled="false" TValue="string" @bind-value=@Item.GoodsFullName />
        <br />
        <RadzenLabel Style="width: 13.5%;" Text=@Utils.LocalizationStrings.TableFieldGoodsDescription />
        <RadzenButton Style="width: 3%; margin-right: 0.5%;" Disabled="false" Icon="autorenew" Click=@(args => OnClickFieldsFill("GoodsDescription")) />
        <RadzenTextArea Style="width: 82%; height: 60px;" Disabled="false" TValue="string" @bind-value=@Item.GoodsDescription />
        <br />
        <RadzenLabel Style="width: 95%; text-align: center" Text=@Utils.LocalizationStrings.TableFieldPluDescription />
        <br />
    </div>
</div>

@* Dates *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px">
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldCreateDt />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.CreateDate.ToString() />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldModifiedDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.ModifiedDate.ToString() />
</div>

@code {
    public List<ScalesEntity> ScalesEntities { get; set; } = null;
    public List<TemplatesEntity> TemplatesEntities { get; set; } = null;
    public List<NomenclatureEntity> NomenclatureEntities { get; set; } = null;
    public readonly ProductHelper Product = ProductHelper.Instance;
    private BarcodeHelper _barcode = BarcodeHelper.Instance;
    [Parameter]
    public PluEntity Item { get; set; }

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        _blazorSettings.Setup(_dataAccessConfig, _notification, _dialog, _navigation, _tooltip, null, _jsRuntime);

        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseIdEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine($"{msg.Summary}. {msg.Detail}");
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task RowDoubleClickAsync(BaseIdEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine($"{msg.Summary}. {msg.Detail}");
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private void OnChange(object value, string name,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        try
        {
            switch (name)
            {
                case "Scale":
                    if (value is int idScale)
                    {
                        Item.Scale = _blazorSettings.DataAccess.ScalesCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idScale } }),
                            null);
                    }
                    break;
                case "Nomenclature":
                    if (value is int idNomenclature)
                    {
                        Item.Nomenclature = _blazorSettings.DataAccess.NomenclatureCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idNomenclature } }),
                            null);
                        OnClickFieldsFill("Entity");
                    }
                    break;
                case "Templates":
                    if (value is int idTemplate)
                    {
                        if (idTemplate <= 0)
                            Item.Templates = null;
                        else
                        {
                            Item.Templates = _blazorSettings.DataAccess.TemplatesCrud.GetEntity(
                                new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idTemplate } }),
                                null);
                        }
                    }
                    break;
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{nameof(OnChange)}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine($"{msg.Summary}. {msg.Detail}");
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void OnClickFieldsFill(string name,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        try
        {
            if (Item.Nomenclature == null)
                return;
            if (name.Equals("clear", StringComparison.InvariantCultureIgnoreCase))
            {
                Item.Nomenclature = null;
                Item.GoodsName = string.Empty;
                Item.GoodsFullName = string.Empty;
                Item.GoodsDescription = string.Empty;
                Item.GoodsShelfLifeDays = 0;
                Item.Gtin = string.Empty;
                Item.Ean13 = string.Empty;
                Item.Itf14 = string.Empty;
                Item.GoodsBoxQuantly = 0;
                Item.GoodsTareWeight = 0;
            }

            var productEntity = Product.GetProductEntity(Item.Nomenclature?.SerializedRepresentationObject);
            if (productEntity != null && !productEntity.EqualsNew())
            {
                if (name.Equals("Entity", StringComparison.InvariantCultureIgnoreCase))
                {
                    if (string.IsNullOrEmpty(Item.GoodsName))
                        Item.GoodsName = Item.XmlGoodsName;
                    if (string.IsNullOrEmpty(Item.GoodsFullName))
                        Item.GoodsFullName = Item.XmlGoodsFullName;
                    if (string.IsNullOrEmpty(Item.GoodsDescription))
                        Item.GoodsDescription = Item.XmlGoodsDescription;
                    if (Item.GoodsShelfLifeDays == 0)
                        Item.GoodsShelfLifeDays = Item.XmlGoodsShelfLifeDays;
                    if (string.IsNullOrEmpty(Item.Gtin))
                        Item.Gtin = Item.XmlGtin;
                    if (string.IsNullOrEmpty(Item.Ean13))
                        Item.Ean13 = Item.XmlEan13;
                    if (string.IsNullOrEmpty(Item.Itf14))
                        Item.Itf14 = Item.XmlItf14;
                    if (Item.GoodsBoxQuantly == 0)
                        Item.GoodsBoxQuantly = Item.XmlGoodsBoxQuantly;
                    if (Item.GoodsTareWeight == 0)
                        Item.GoodsTareWeight = Item.CalcGoodsTareWeight();
                }
                else
                {
                    switch (name.ToLower())
                    {
                        case "goodsname":
                            Item.GoodsName = Item.XmlGoodsName;
                            break;
                        case "goodsfullname":
                            Item.GoodsFullName = Item.XmlGoodsFullName;
                            break;
                        case "goodsdescription":
                            Item.GoodsDescription = Item.XmlGoodsDescription;
                            break;
                        case "goodsshelflifedays":
                            Item.GoodsShelfLifeDays = Item.XmlGoodsShelfLifeDays;
                            break;
                        case "gtin":
                            Item.Gtin = Item.XmlGtin;
                            break;
                        case "getgtin":
                            if (Item.Gtin.Length > 12)
                                Item.Gtin = _barcode.GetGtin(Item.Gtin.Substring(0, 13));
                            break;
                        case "ean13":
                            Item.Ean13 = Item.XmlEan13;
                            break;
                        case "itf14":
                            Item.Itf14 = Item.XmlItf14;
                            break;
                        case "goodsboxquantly":
                            Item.GoodsBoxQuantly = Item.XmlGoodsBoxQuantly;
                            break;
                        case "goodstareweight":
                            Item.GoodsTareWeight = Item.CalcGoodsTareWeight();
                            break;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{nameof(OnClickFieldsFill)}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine($"{msg.Summary}. {msg.Detail}");
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task GetDataAsync(
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            ScalesEntities = null;
            var scalesEntities = _blazorSettings.DataAccess.ScalesCrud.GetEntities(null, null);
            ScalesEntities = new List<ScalesEntity>();
            foreach (var scalesEntity in scalesEntities)
            {
                ScalesEntities.Add(scalesEntity);
            }

            TemplatesEntities = null;
            var templatesEntities = _blazorSettings.DataAccess.TemplatesCrud.GetEntities(null, null);
            TemplatesEntities = new List<TemplatesEntity>();
            foreach (var templatesEntity in templatesEntities)
            {
                TemplatesEntities.Add(templatesEntity);
            }

            NomenclatureEntities = null;
            var nomenclatureEntities = _blazorSettings.DataAccess.NomenclatureCrud.GetEntities(null, null);
            NomenclatureEntities = new List<NomenclatureEntity>();
            foreach (var templatesEntity in nomenclatureEntities)
            {
                NomenclatureEntities.Add(templatesEntity);
            }

            // Проверка шаблона.
            if ((Item.Templates == null || Item.Templates.EqualsDefault()) && Item.Scale.TemplateDefault != null)
            {
                Item.Templates = (TemplatesEntity)Item.Scale.TemplateDefault.Clone();
            }

            // Номер PLU.
            if (Item.Plu == 0)
            {
                var pluEntity = _blazorSettings.DataAccess.PluCrud.GetEntity(
                    new FieldListEntity(new Dictionary<string, object> { { "Scale.Id", Item.Scale.Id } }),
                    new FieldOrderEntity { Direction = EnumOrderDirection.Desc, Name = EnumField.Plu, Use = true });
                if (pluEntity != null && !pluEntity.EqualsDefault())
                {
                    Item.Plu = pluEntity.Plu + 1;
                }
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine($"{msg.Summary}. {msg.Detail}");
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task ActionEditAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    #endregion
}
