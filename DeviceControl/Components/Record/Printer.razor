@page "/printer"
@page "/printer/{ItemId:int}"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using System.Runtime.CompilerServices
@using DeviceControl.Core.DAL.DataModels
@using System.Globalization
@using BlazorDeviceControl.Data
@using BlazorDeviceControl.Utils
@using DeviceControl.Core
@using Toolbelt.Blazor.HotKeys
@inject BlazorSettingsEntity _blazorSettings
@inject DataAccessConfig _dataAccessConfig
@inject DialogService _dialog
@inject NavigationManager _navigation
@inject NotificationService _notification
@inject TooltipService _tooltip
@inject HotKeys _hotKeys
@inject IJSRuntime _jsRuntime
@* Fields *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    @if (Item == null)
    {
        <RadzenLabel Text=@LocalizationStrings.DataLoading />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
    }
    else
    {
        <div class="col-sm-6 col-md-6 col-lg-6">
            <RadzenLabel Style="width: 35%;" Text=@LocalizationStrings.TableFieldName />
            <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Name />
            <br />
            <RadzenLink Style="width: 12%;" Text=@LocalizationStrings.TableFieldZebraPrinter
                        Target="_blank" Path=@Item.Link />
            <RadzenLabel Style="width: 23.5%; margin-left: 2.3%;" Text=@LocalizationStrings.TableFieldZebraPrinterIp />
            <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Ip />
            <br />
            <RadzenLabel Style="width: 35%;" Text=@LocalizationStrings.TableFieldZebraPrinterPort />
            <RadzenNumeric Style="width: 63%; text-align: center;" Disabled="false" TValue="short" @bind-Value=@Item.Port />
            <br />
        </div>
        <div class="col-sm-6 col-md-6 col-lg-6">
            <RadzenLabel Style="width: 35%;" Text=@LocalizationStrings.TableFieldZebraPrinterMac />
            <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Mac />
            <br />
            <RadzenLabel Style="width: 35%;" Text=@LocalizationStrings.TableFieldZebraPrinterPassword />
            <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Password />
            <br />
            <RadzenLabel Style="width: 35%;" Text=@LocalizationStrings.TableFieldZebraPrinterType />
            @if (ItemsZebraPrinterType == null)
            {
                <RadzenTextBox Style="width: 63%;" Disabled="true" TValue="string" Value="" />
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
            }
            else
            {
                <RadzenDropDownDataGrid Style="width: 63%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                        Data=@ItemsZebraPrinterType PageSize="10"
                                        TextProperty="Name" ValueProperty="Id"
                                        Value=@Item.PrinterType?.Id
                                        Change=@(args => OnChange(args, "ZebraPrinterTypeItems")) />
            }
            <br />
        </div>
    }
</div>

@* Resources grids *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    <RadzenLabel Style="width: 100%; text-align: center;" Text=@LocalizationStrings.TableTitleResources />
    <br />
    @if (ItemsResource == null)
    {
        <RadzenLabel Text=@LocalizationStrings.DataLoading />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
    }
    else
    {
        <RadzenGrid Data=@ItemsResource TItem="ZebraPrinterResourceRefEntity"
                    RowSelect=@(args => RowSelectAsync(args))
                    RowDoubleClick=@(args => RowDoubleClickAsync(args))
                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                    AllowPaging="true" PageSize="10" AllowSorting="true" ColumnWidth="200px">
            <Columns>
                <RadzenGridColumn TItem="ZebraPrinterResourceRefEntity" Property="Id"
                                  Title=@LocalizationStrings.TableFieldId Type="int" Width="10%" />
                <RadzenGridColumn TItem="ZebraPrinterResourceRefEntity" Property="Description"
                                  Title=@LocalizationStrings.TableFieldDescription Type="string" Width="30%" />
                <RadzenGridColumn TItem="ZebraPrinterResourceRefEntity" Property="Resource.Name"
                                  Title=@LocalizationStrings.TableFieldResource Type="string" Width="30%" />
            </Columns>
        </RadzenGrid>
    }
    @* Resource actions *@
    <div style="margin-top: 5px">
        @if (_blazorSettings.ShowActionsButtons)
        {
            <RadzenButton Click=@(args => ActionAddAsync(EnumTable.PrinterResourceRef, ItemResource, Item))
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="margin-left: 30px; margin-top: 5px; width: 150px; height: 30px; font-size: 12px;"
                          Text=@LocalizationStrings.TableActionAdd Disabled=@_blazorSettings.DataAccess.IsDisabled />
            <RadzenButton Click=@(args => ActionEditAsync(EnumTable.PrinterResourceRef, ItemResource, Item))
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="margin-left: 30px; margin-top: 5px; width: 150px; height: 30px; font-size: 12px;"
                          Text=@LocalizationStrings.TableActionEdit Disabled=@_blazorSettings.DataAccess.IsDisabled />
            <RadzenButton Click=@(args => ActionDeleteAsync(EnumTable.PrinterResourceRef, ItemResource, Item))
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="margin-left: 30px; margin-top: 5px; width: 150px; height: 30px; font-size: 12px;"
                          Text=@LocalizationStrings.TableActionDelete Disabled=@_blazorSettings.DataAccess.IsDisabled />
        }
        else
        {
            <RadzenLabel Text=@LocalizationStrings.TableActionsIsDeny />
        }
    </div>
</div>

@* Dates *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px">
    @if (Item == null)
    {
        <RadzenLabel Text=@LocalizationStrings.DataLoading />
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
    }
    else
    {
        <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@LocalizationStrings.TableFieldCreateDate />
        <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.CreateDate.ToString(CultureInfo.InvariantCulture) />
        <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@LocalizationStrings.TableFieldModifiedDate />
        <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.ModifiedDate.ToString(CultureInfo.InvariantCulture) />
    }
</div>

@* Actions *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px; height: 25px;">
    <RadzenButton Click=@(args => SaveAsync())
                  Text=@LocalizationStrings.TableActionSave Style="margin-left: 30px; width: 250px; " />
    <RadzenButton Click=@(args => CancelAsync()) ButtonStyle="ButtonStyle.Secondary"
                  Text=@LocalizationStrings.TableActionCancel Style="margin-left: 30px; width: 250px; " />
</div>

@code {
    [Parameter]
    public int? ItemId { get; set; }
    public ZebraPrinterEntity Item { get; set; }
    public ZebraPrinterResourceRefEntity ItemResource { get; set; } = null;
    public List<ZebraPrinterResourceRefEntity> ItemsResource { get; set; }
    public List<ZebraPrinterTypeEntity> ItemsZebraPrinterType { get; set; } = null;

    #region Public and private methods

    private async Task GuiRefreshAsync()
    {
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        //var hotKeysContext = HotKeys.CreateContext()
        //    .Add(ModKeys.None, Keys.Tab, HotKeysTabAsync, LocalizationStrings.TableTab)
        //    .Add(ModKeys.Ctrl, Keys.S, SaveAsync, LocalizationStrings.TableTab)
        //    .Add(ModKeys.None, Keys.Backspace, CancelAsync, LocalizationStrings.TableTab)
        //    ;
        _blazorSettings.Setup(_dataAccessConfig, _notification, _dialog, _navigation, _tooltip, null, _jsRuntime);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        ItemId ??= 0;
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseIdEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            if (entity is ZebraPrinterResourceRefEntity zebraPrinterResourceRefEntity)
            {
                ItemResource = zebraPrinterResourceRefEntity;
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task RowDoubleClickAsync(BaseIdEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            if (entity is ZebraPrinterResourceRefEntity zebraPrinterResourceRefEntity)
            {
                ItemResource = zebraPrinterResourceRefEntity;
                await ActionEditAsync(EnumTable.PrinterResourceRef, ItemResource, Item).ConfigureAwait(true);
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private void OnChange(object value, string name)
    {
        switch (name)
        {
            case "ZebraPrinterTypeItems":
                if (value is int id)
                {
                    if (id <= 0)
                        Item.PrinterType = null;
                    else
                    {
                        Item.PrinterType = _blazorSettings.DataAccess.ZebraPrinterTypeCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), id } }),
                        null);
                    }
                }
                break;
        }
        StateHasChanged();
    }

    private void GetData()
    {
        Item = _blazorSettings.DataAccess.ZebraPrinterCrud.GetEntity(new FieldListEntity(new Dictionary<string, object>
            { { EnumField.Id.ToString(), ItemId } }), null);

        ItemsZebraPrinterType = _blazorSettings.DataAccess.ZebraPrinterTypeCrud.GetEntities(null, null).ToList();

        ItemsResource = new List<ZebraPrinterResourceRefEntity>();
        var items = _blazorSettings.DataAccess.ZebraPrinterResourceRefCrud.GetEntities(
            new FieldListEntity(new Dictionary<string, object> { { "Printer.Id", Item.Id } }),
            new FieldOrderEntity(EnumField.Description, EnumOrderDirection.Asc));
        ItemsResource.AddRange(items);
    }

    private async Task GetDataAsync([CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        var task = new Task(GetData);
        await _blazorSettings.RunTasks(LocalizationStrings.TableRead,
            "", LocalizationStrings.DialogResultFail, "",
            new List<Task> { task }, GuiRefreshAsync, filePath, lineNumber, memberName).ConfigureAwait(false);
    }

    private async Task ActionEditAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private void Save()
    {
        if (Item == null || Item.EqualsDefault())
            return;
        if (ItemId == 0)
        {
            _blazorSettings.DataAccess.ZebraPrinterCrud.SaveEntity(Item);
        }
        else
        {
            _blazorSettings.DataAccess.ZebraPrinterCrud.UpdateEntity(Item);
        }
        _navigation.NavigateTo($"{LocalizationStrings.UriRouteTablePrinters}");
    }

    private async Task SaveAsync()
    {
        var task = new Task(Save);
        await _blazorSettings.RunTasksWithQeustion(LocalizationStrings.TableRecordSave,
            LocalizationStrings.DialogResultSuccess, LocalizationStrings.DialogResultFail, LocalizationStrings.DialogResultCancel,
            new List<Task> { task }, GuiRefreshAsync);
    }

    private void Cancel()
    {
        if (Item == null || Item.EqualsDefault())
            return;
        _navigation.NavigateTo($"{LocalizationStrings.UriRouteTablePrinters}");
    }

    private async Task CancelAsync()
    {
        var task = new Task(Cancel);
        await _blazorSettings.RunTasks(LocalizationStrings.TableRecordCancel,
            LocalizationStrings.DialogResultSuccess, LocalizationStrings.DialogResultFail, LocalizationStrings.DialogResultCancel,
            new List<Task> { task }, GuiRefreshAsync);
    }


    #endregion
}
