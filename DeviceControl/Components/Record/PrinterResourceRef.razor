@page "/printerresourceref"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using System.Runtime.CompilerServices
@using DeviceControl.Core.DAL.DataModels
@using System.Globalization
@using BlazorDeviceControl.Data
@using DeviceControl.Core
@using Toolbelt.Blazor.HotKeys
@inject BlazorSettingsEntity _blazorSettings
@inject DataAccessConfig _dataAccessConfig
@inject DialogService _dialog
@inject NavigationManager _navigation
@inject NotificationService _notification
@inject TooltipService _tooltip
@inject HotKeys _hotKeys
@inject IJSRuntime _jsRuntime
@* Fields *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldZebraPrinter />
        @if (PrinterItems == null)
        {
            <RadzenTextBox Style="width: 63%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 63%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@PrinterItems PageSize="10"
                                    TextProperty="Name" ValueProperty="Id"
                                    Value=@Item.Printer?.Id Disabled="true"
                                    Change=@(args => OnChange(args, "ZebraPrinter")) />
        }
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldDescription />
        <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Description />
        <br />
    </div>
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldResource />
        @if (ResourceItems == null)
        {
            <RadzenTextBox Style="width: 63%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 63%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@ResourceItems PageSize="5"
                                    TextProperty="Name" ValueProperty="Id"
                                    Value=@Item.Resource?.Id
                                    Change=@(args => OnChange(args, "TemplateResource")) />
        }
        <br />
        <br />
    </div>
</div>

@* Dates *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px">
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldCreateDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.CreateDate.ToString(CultureInfo.InvariantCulture) />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldModifiedDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.ModifiedDate.ToString(CultureInfo.InvariantCulture) />
</div>

@code {
    public List<ZebraPrinterEntity> PrinterItems { get; set; } = null;
    public List<TemplateResourcesEntity> ResourceItems { get; set; } = null;
    [Parameter]
    public ZebraPrinterResourceRefEntity Item { get; set; }

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        _blazorSettings.Setup(_dataAccessConfig, _notification, _dialog, _navigation, _tooltip, null, _jsRuntime);

        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseIdEntity entity, string resourceType,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task RowDoubleClickAsync(BaseIdEntity entity, string table,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private void OnChange(object value, string name)
    {
        switch (name)
        {
            case "ZebraPrinter":
                if (value is int idZebraPrinter)
                {
                    if (idZebraPrinter <= 0)
                        Item.Printer = null;
                    else
                    {
                        Item.Printer = _blazorSettings.DataAccess.ZebraPrinterCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idZebraPrinter } }),
                        null);
                    }
                }
                break;
            case "TemplateResource":
                if (value is int idTemplateResource)
                {
                    if (idTemplateResource <= 0)
                        Item.Printer = null;
                    else
                    {
                        Item.Resource = _blazorSettings.DataAccess.TemplateResourcesCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), idTemplateResource } }),
                        null);
                        if (string.IsNullOrEmpty(Item.Description))
                        {
                            Item.Description = Item.Resource.Name;
                        }
                    }
                }
                break;
        }
        StateHasChanged();
    }

    private async Task GetDataAsync(
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            PrinterItems = _blazorSettings.DataAccess.ZebraPrinterCrud.GetEntities(null, null).ToList();
            ResourceItems = _blazorSettings.DataAccess.TemplateResourcesCrud.GetEntities(null, null).ToList();
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task ActionEditAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    #endregion
}
