@page "/Nomenclature"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using DeviceControl.Core.Models
@using System.Runtime.CompilerServices
@using BlazorDeviceControl.Models
@inject AppSettings AppSettings
@inject DataAccessConfig DataAccessConfig
@inject DialogService Dialog
@inject NotificationService Notification

<div class="row col-sm-12 col-md-12 col-lg-12">
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldName />
        <RadzenTextBox Style="width: 63%;" Disabled="false" TValue="string" @bind-value=@Item.Name />
        <br />
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldCode />
        <RadzenTextBox Style="width: 63%;" Disabled="false" TValue="string" @bind-value=@Item.Code />
        <br />
    </div>
    <br />
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldXml />
        <RadzenTextBox Style="width: 63%; " Disabled="false" TValue="string" @bind-Value=@Item.SerializedRepresentationObject />
        <br />
    </div>
</div>

<div class="row col-sm-12 col-md-12 col-lg-12">
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 100%; text-align: center;" Text=@Utils.LocalizationStrings.TableTitleNomenclatureUnitsShort />
        <br />
        @*@if (NomenclatureUnitsEntities == null)
        {
            <RadzenLabel Text=@Utils.LocalizationStrings.DataLoading />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenGrid Data=@NomenclatureUnitsEntities TItem="NomenclatureUnitsEntity"
                        RowSelect=@(args => RowSelectAsync(args)) RowDoubleClick=@(args => RowDoubleClickAsync(args))
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                        AllowPaging="true" PageSize="10" AllowSorting="true" ColumnWidth="200px">
                <Columns>
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="Id" Title=@Utils.LocalizationStrings.TableFieldId
                                      Type="int" Width="10%" />
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="CreateDate" Title=@Utils.LocalizationStrings.TableFieldCreateDate
                                      Type="DateTime" Width="10%" />
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="ModifiedDate" Title=@Utils.LocalizationStrings.TableFieldModifiedDate
                                      Type="DateTime" Width="10%" />
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="Name" Title=@Utils.LocalizationStrings.TableFieldName
                                      Type="string" Width="10%" />
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="NomenclatureId" Title=@Utils.LocalizationStrings.TableFieldNomenclatureId
                                      Type="string" Width="10%" />
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="Marked" Title=@Utils.LocalizationStrings.TableFieldMarked
                                      Type="bool" Width="10%" />
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="PackWeight" Title=@Utils.LocalizationStrings.TableFieldPackWeight
                                      Type="decimal" Width="10%" />
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="PackQuantly" Title=@Utils.LocalizationStrings.TableFieldPackQuantly
                                      Type="int" Width="10%" />
                    <RadzenGridColumn TItem="NomenclatureUnitsEntity" Property="PackTypeId" Title=@Utils.LocalizationStrings.TableFieldPackTypeId
                                      Type="int" Width="10%" />
                </Columns>
            </RadzenGrid>
        }*@
    </div>
    <br />
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 100%; text-align: center;" Text=@Utils.LocalizationStrings.TableTitleBarCodesShort />
        <br />
        @*@if (BarCodesEntities == null)
        {
            <RadzenLabel Text=@Utils.LocalizationStrings.DataLoading />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenGrid id="RadzenGrid" Data=@BarCodesEntities TItem="BarCodesEntity"
                        RowSelect=@(args => RowSelectAsync(args)) RowDoubleClick=@(args => RowDoubleClickAsync(args))
                        AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                        AllowPaging="true" PageSize="10" AllowSorting="true" ColumnWidth="200px">
                <Columns>
                    <RadzenGridColumn TItem="BarCodesEntity" Property="Id" Title=@Utils.LocalizationStrings.TableFieldId
                                      Type="int" Width="10%" />
                    <RadzenGridColumn TItem="BarCodesEntity" Property="CreateDate" Title=@Utils.LocalizationStrings.TableFieldCreateDate
                                      Type="DateTime" Width="10%" />
                    <RadzenGridColumn TItem="BarCodesEntity" Property="ModifiedDate" Title=@Utils.LocalizationStrings.TableFieldModifiedDate
                                      Type="DateTime" Width="10%" />
                    <RadzenGridColumn TItem="BarCodesEntity" Property="BarCodeTypeId" Title=@Utils.LocalizationStrings.TableFieldBarCodeTypeId
                                      Type="int" Width="10%" />
                    <RadzenGridColumn TItem="BarCodesEntity" Property="NomenclatureId" Title=@Utils.LocalizationStrings.TableFieldNomenclatureId
                                      Type="int" Width="10%" />
                    <RadzenGridColumn TItem="BarCodesEntity" Property="NomenclatureUnitId" Title=@Utils.LocalizationStrings.TableFieldNomenclatureUnitId
                                      Type="int" Width="10%" />
                    <RadzenGridColumn TItem="BarCodesEntity" Property="ContragentId" Title=@Utils.LocalizationStrings.TableFieldContragentId
                                      Type="int" Width="10%" />
                    <RadzenGridColumn TItem="BarCodesEntity" Property="Value" Title=@Utils.LocalizationStrings.TableFieldValue
                                      Type="string" Width="10%" />
                </Columns>
            </RadzenGrid>
        }*@
    </div>
</div>

@* Dates *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px">
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldCreateDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.CreateDate.ToString() />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldModifiedDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.ModifiedDate.ToString() />
</div>

@code {
    [Parameter]
    public NomenclatureEntity Item { get; set; }

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        AppSettings.Setup(DataAccessConfig, Notification, Dialog);

        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //if (entity is BarCodesEntity barCodesEntity)
            //{
            //    BarCodesEntity = barCodesEntity;
            //}
            //else if (entity is NomenclatureUnitsEntity nomenclatureUnitsEntity)
            //{
            //    NomenclatureUnitsEntity = nomenclatureUnitsEntity;
            //}
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
        }
    }

    private async Task RowDoubleClickAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //if (entity is BarCodesEntity barCodesEntity)
            //{
            //    BarCodesEntity = barCodesEntity;
            //    await ActionEditAsync(EnumTable.BarCodes, BarCodesEntity).ConfigureAwait(true);
            //}
            //else if (entity is NomenclatureUnitsEntity nomenclatureUnitsEntity)
            //{
            //    NomenclatureUnitsEntity = nomenclatureUnitsEntity;
            //    await ActionEditAsync(EnumTable.NomenclatureUnits, NomenclatureUnitsEntity).ConfigureAwait(true);
            //}
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
        }
    }

    private async Task GetDataAsync(
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //BarCodesEntities = new List<BarCodesEntity>();
            //var barCodesEntities = AppSettings.DataAccess.BarCodesCrud.GetEntities(null, null);
            //foreach (var barCodesEntity in barCodesEntities)
            //{
            //    BarCodesEntities.Add(barCodesEntity);
            //}

            //NomenclatureUnitsEntities = new List<NomenclatureUnitsEntity>();
            //var nomenclatureUnitsEntities = AppSettings.DataAccess.NomenclatureUnitsCrud.GetEntities(null, null);
            //foreach (var entity in nomenclatureUnitsEntities)
            //{
            //    NomenclatureUnitsEntities.Add((NomenclatureUnitsEntity)entity);
            //}
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
        }
    }

    private async Task ActionEditAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    #endregion
}
