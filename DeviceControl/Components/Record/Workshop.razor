@page "/Workshop"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using DeviceControl.Core.Models
@using System.Runtime.CompilerServices
@using BlazorDeviceControl.Models
@using DeviceControl.Core.DAL.DataModels
@inject AppSettings AppSettings
@inject DataAccessConfig DataAccessConfig
@inject DialogService Dialog
@inject NotificationService Notification
@* Fields *@
<div class="row col-sm-12 col-md-12 col-lg-12">
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldName />
        <RadzenTextBox Style="width: 63%; text-align: center;" Disabled="false" TValue="string" @bind-Value=@Item.Name />
        <br />
    </div>
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 35%;" Text=@Utils.LocalizationStrings.TableFieldProductionFacilityName />
        @if (ProductionFacilityEntities == null)
        {
            <RadzenTextBox Style="width: 63%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDownDataGrid Style="width: 63%;" TValue="int" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                                    Data=@ProductionFacilityEntities PageSize="5"
                                    TextProperty="Name" ValueProperty="Id"
                                    Value=@Item.ProductionFacility?.Id
                                    Change=@(args => OnChange(args, "ProductionFacilities")) />
        }
        <br />
    </div>
</div>

@* Dates *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px">
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldCreateDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.CreateDate.ToString() />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldModifiedDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.ModifiedDate.ToString() />
</div>

@code {
    public List<ProductionFacilityEntity> ProductionFacilityEntities { get; set; } = null;
    [Parameter]
    public WorkshopEntity Item { get; set; }

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        AppSettings.Setup(DataAccessConfig, Notification, Dialog);

        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
        }
    }

    private async Task RowDoubleClickAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
        }
    }

    private void OnChange(object value, string name)
    {
        switch (name)
        {
            case "ProductionFacilities":
                if (value is int id)
                {
                    if (id <= 0)
                        Item.ProductionFacility = null;
                    else
                    {
                        Item.ProductionFacility = AppSettings.DataAccess.ProductionFacilityCrud.GetEntity(
                            new FieldListEntity(new Dictionary<string, object> { { EnumField.Id.ToString(), id } }),
                        null);
                    }
                }
                break;
        }
        StateHasChanged();
    }

    private async Task GetDataAsync(
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            ProductionFacilityEntities = AppSettings.DataAccess.ProductionFacilityCrud.GetEntities(null, null).ToList();
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
        }
    }

    private async Task ActionEditAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    #endregion
}
