@page "/TemplateResource"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using DeviceControl.Core.Models
@using System.Runtime.CompilerServices
@using System.Text
@using BlazorDeviceControl.Data
@using BlazorDeviceControl.Service
@using BlazorDownloadFile
@using DeviceControl.Core
@using Toolbelt.Blazor.HotKeys
@using ProgressBarMode = Radzen.ProgressBarMode
@inject BlazorSettingsEntity _blazorSettings
@inject DataAccessConfig _dataAccessConfig
@inject DialogService _dialog
@inject NavigationManager _navigation
@inject NotificationService _notification
@inject TooltipService _tooltip
@inject HotKeys _hotKeys
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload
@inject IFileDownload _fileDownload
@inject IBlazorDownloadFileService _blazorDownloadFileService

<div class="row col-sm-12 col-md-12 col-lg-12">
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 27%;" Text=@Utils.LocalizationStrings.TableFieldName />
        <RadzenTextBox Style="width: 70%; text-align: center;" Disabled="false" TValue="string" @bind-value=@Item.Name />
        <br />
        <RadzenLabel Style="width: 27%;" Text=@Utils.LocalizationStrings.TableFieldDescription />
        <RadzenTextBox Style="width: 70%; text-align: center;" Disabled="false" TValue="string" @bind-value=@Item.Description />
        <br />
        <RadzenLabel Style="width: 97%;" Text=@FileInfo />
        <br />
        <RadzenLabel Style="width: 97%;" Text=@FileComplete />
        <br />
        <RadzenLabel Style="width: 27%; " Text=@Utils.LocalizationStrings.FileUpload />
        <Microsoft.AspNetCore.Components.Forms.InputFile style="width: 50%; " OnChange=@OnFileUpload />
        <br />
        <RadzenLabel Style="width: 27%; " Text=@Utils.LocalizationStrings.FileDownload />
        <RadzenButton Style="width: 50%; height: 30px; text-align: center; "
                      Click=@OnFileDownload Text=@Utils.LocalizationStrings.FileDownload />
        <br />
    </div>
    <div class="col-sm-6 col-md-6 col-lg-6">
        <RadzenLabel Style="width: 27%;" Text=@Utils.LocalizationStrings.TableFieldType />
        @if (ResourceTypes == null)
        {
            <RadzenTextBox Style="width: 70%;" Disabled="true" TValue="string" Value="" />
            <RadzenProgressBar Value=@ProgressValue Unit=@FileInfo
                               ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
        }
        else
        {
            <RadzenDropDown Style="width: 70%;" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            AllowFiltering="true" AllowClear="true" AllowFilteringByAllStringColumns="true"
                            Data=@ResourceTypes PageSize="5" TextProperty="Name" ValueProperty="Value"
                            Value=@Item.Type Change=@(args => OnChange(args, "ResourceTypes")) />
        }
        <br />
        <RadzenLabel Style="width: 27%;" Text=@Utils.LocalizationStrings.TableFieldImageData />
        <RadzenTextBox Style="width: 70%; text-align: center;" ReadOnly="true" TValue="string" @bind-value=@Item.ImageDataInfo />
        <br />

        <br />
    </div>
</div>

@* Dates *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 20px">
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldCreateDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.CreateDate.ToString() />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: center;" Text=@Utils.LocalizationStrings.TableFieldModifiedDate />
    <RadzenLabel Style="font-size: 12px; width: 24%; text-align: left;" Text=@Item.ModifiedDate.ToString() />
</div>

@code {
    public List<TypeEntity<string>> ResourceTypes { get; set; }
    public string FileInfo { get; set; }
    public double FileProgress { get; set; }
    public string FileComplete { get; set; }
    private int ProgressValue { get; set; }
    public IFileListEntry File { get; private set; }
    [Parameter]
    public TemplateResourcesEntity Item { get; set; }

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        _blazorSettings.Setup(_dataAccessConfig, _notification, _dialog, _navigation, _tooltip, null, _jsRuntime);

        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseIdEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task RowDoubleClickAsync(BaseIdEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            //
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private void OnChange(object value, string name)
    {
        switch (name)
        {
            case "ResourceTypes":
                if (value is string strValue)
                {
                    Item.Type = strValue;
                }
                StateHasChanged();
                break;
        }
    }

    private void OnError(UploadErrorEventArgs args, string name)
    {
        var msg = new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = $"Ошибка метода [{name}]!",
            Detail = args.Message,
            Duration = Utils.LocalizationStrings.Timeout
        };
        _notification.Notify(msg);
    }

    private void OnValueChanged(object value, string name)
    {
        Console.WriteLine();
        Console.WriteLine($"OnValueChanged: value: {value}");
        Console.WriteLine($"OnValueChanged: name: {name}");
    }

    private async Task GetDataAsync(
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            ResourceTypes = new List<TypeEntity<string>> { new("TTF", "TTF"), new("GRF", "GRF") };
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task ActionEditAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task OnFileUpload(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            await _fileUpload.UploadAsync(_blazorSettings.DataAccess, Item, file.OpenReadStream(10_000_000));
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnFileDownload()
    {
        await _fileDownload.DownloadAsync(_blazorDownloadFileService, Item);

        await InvokeAsync(StateHasChanged);
    }

    #endregion
}
