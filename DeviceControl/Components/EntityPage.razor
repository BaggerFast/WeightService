@page "/EntityPage"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.DataModels
@using DeviceControl.Core.DAL.TableModels
@using System.Runtime.CompilerServices
@using BlazorDeviceControl.Data
@using DeviceControl.Core
@using Toolbelt.Blazor.HotKeys
@inject BlazorDeviceControl.Data.BlazorSettingsEntity _appSettings
@inject DataAccessConfig _dataAccessConfig
@inject DialogService _dialog
@inject NavigationManager _navigation
@inject NotificationService _notification
@inject TooltipService _tooltip
@inject HotKeys _hotKeys
@inject IJSRuntime _jsRuntime

@* RadzenCard *@
<RadzenCard Style="margin-bottom: 0; font-size: 13px; ">
    <div class="row" style="margin-top: 0; margin-left: 0; margin-right: 0; ">
        @switch (Table)
        {
            case EnumTable.BarCodeTypes:
                break;
            case EnumTable.Contragents:
                break;
            case EnumTable.Hosts:
                var host = (HostsEntity)Item;
                <BlazorDeviceControl.Components.Record.Host Item=@host />
                break;
            case EnumTable.Nomenclature:
                break;
            case EnumTable.Orders:
                break;
            case EnumTable.OrderStatus:
                break;
            case EnumTable.OrderTypes:
                break;
            case EnumTable.Plu:
                var plu = (PluEntity)Item;
                <BlazorDeviceControl.Components.Record.Plu Item=@plu />
                break;
            case EnumTable.ProductionFacility:
                var productionFacility = (ProductionFacilityEntity)Item;
                <BlazorDeviceControl.Components.Record.ProductionFacility Item=@productionFacility />
                break;
            case EnumTable.ProductSeries:
                @*
                    var productSeries = (ProductSeriesEntity)Item;
                    <span Style="align-self: start; width: 15%; height: 25px; ">@Utils.LocalizationStrings.TableFieldId</span>
                    <RadzenNumeric Style="align-self: end; width: 85%; height: 25px; " TValue="int" Disabled=true @bind-value=@productSeries.Id />
                    <div class="col-md-6" Style="margin-top: 0; margin-left: 0; margin-right: 0;">
                        <br Style="margin-top: 0; margin-left: 0; margin-right: 0;" />
                        <span Style="align-self: start; width: 25%; height: 25px;">@Utils.LocalizationStrings.TableFieldScaleId</span>
                        <RadzenTextBox TValue="string" Style="align-self: end; width: 60%; height: 25px;"
                                       @bind-value=@productSeries.Scale.Id />
                        <br Style="margin-top: 5px; margin-left: 0; margin-right: 0;" />
                        <span Style="align-self: start; width: 38%; height: 25px;">@Utils.LocalizationStrings.TableFieldCreateDate</span>
                        <RadzenDatePicker Disabled="true" @bind-Value=@productSeries.CreateDate />
                        <br Style="margin-top: 5px; margin-left: 0; margin-right: 0;" />
                        <span Style="align-self: start; width: 38%; height: 25px;">@Utils.LocalizationStrings.TableFieldUid</span>-->
                        <RadzenTextBox Mask="********-****-****-****-************" Placeholder="00000000-0000-0000-0000-000000000000"
                                       Disabled="false" @bind-Value=@productSeries.UidGui Style="width: 70%" />
                        <br Style="margin-top: 5px; margin-left: 0; margin-right: 0; " />
                        <span Style="align-self: start; width: 38%; height: 25px; ">@Utils.LocalizationStrings.TableFieldIsClose</span>
                        <RadzenCheckBox Disabled="false" @bind-Value=@productSeries.IsCloseGui TValue="bool" />
                        <br Style="margin-top: 5px; margin-left: 0; margin-right: 0; " />
                        <span Style="align-self: start; width: 38%; height: 25px; ">@Utils.LocalizationStrings.TableFieldSscc</span>
                        <RadzenTextBox Disabled="false" @bind-Value=@productSeries.Sscc />
                    </div>*@
                break;
            case EnumTable.Scales:
                var scales = (ScalesEntity)Item;
                <BlazorDeviceControl.Components.Record.Scale Item=@scales />
                break;
            case EnumTable.SsccStorage:
                break;
            case EnumTable.TemplateResources:
                var templateResources = (TemplateResourcesEntity)Item;
                <BlazorDeviceControl.Components.Record.TemplateResource Item=@templateResources />
                break;
            case EnumTable.Templates:
                var templates = (TemplatesEntity)Item;
                <BlazorDeviceControl.Components.Record.Template Item=@templates />
                break;
            case EnumTable.WeithingFact:
                break;
            case EnumTable.WorkShop:
                var workshop = (WorkshopEntity)Item;
                <BlazorDeviceControl.Components.Record.Workshop Item=@workshop />
                break;
            case EnumTable.Printer:
                var printer = (ZebraPrinterEntity)Item;
                <BlazorDeviceControl.Components.Record.Printer Item=@printer />
                break;
            case EnumTable.PrinterResourceRef:
                var printerResourceRef = (ZebraPrinterResourceRefEntity)Item;
                <BlazorDeviceControl.Components.Record.PrinterResourceRef Item=@printerResourceRef />
                break;
            case EnumTable.PrinterType:
                var printerType = (ZebraPrinterTypeEntity)Item;
                <BlazorDeviceControl.Components.Record.PrinterType Item=@printerType />
                break;
        }
    </div>
</RadzenCard>

@* Actions *@
<div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px; height: 20px;">
    <RadzenButton Click=@(args => SaveAsync(args))
                  Text=@Utils.LocalizationStrings.TableActionSave
                  Style="margin-left: 30px; width: 250px; height: 30px; font-size: 12px;" />
    <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                  Click=@(args => CancelAsync(args))
                  Text=@Utils.LocalizationStrings.TableActionCancel
                  Style="margin-left: 30px; width: 250px; height: 30px; font-size: 12px;" />
</div>

@code {
    #region Public and private fields and properties

    [Parameter]
    public EnumTable Table { get; set; }
    [Parameter]
    public BaseEntity Item { get; set; }
    [Parameter]
    public EnumTableAction TableAction { get; set; }
    [Parameter]
    public EventCallback CallbackActionSaveAsync { get; set; }
    [Parameter]
    public EventCallback CallbackActionCancelAsync { get; set; }

    #endregion

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
    }

    private bool FieldControlDeny(BaseEntity entity, string field)
    {
        var result = entity != null;
        if (entity is BarCodeTypesEntity barCodeTypesEntity)
        {
            if (barCodeTypesEntity.EqualsDefault())
                result = false;
        }
        else if (entity is ContragentsEntity contragentsEntity)
        {
            if (contragentsEntity.EqualsDefault())
                result = false;
        }
        else if (entity is HostsEntity hostsEntity)
        {
            if (hostsEntity.EqualsDefault())
                result = false;
        }
        else if (entity is LabelsEntity labelsEntity)
        {
            if (labelsEntity.EqualsDefault())
                result = false;
        }
        else if (entity is NomenclatureEntity nomenclatureEntity)
        {
            if (nomenclatureEntity.EqualsDefault())
                result = false;
        }
        else if (entity is OrdersEntity ordersEntity)
        {
            if (ordersEntity.EqualsDefault())
                result = false;
        }
        else if (entity is OrderStatusEntity orderStatusEntity)
        {
            if (orderStatusEntity.EqualsDefault())
                result = false;
        }
        else if (entity is OrderTypesEntity orderTypesEntity)
        {
            if (orderTypesEntity.EqualsDefault())
                result = false;
        }
        else if (entity is PluEntity pluEntity)
        {
            if (pluEntity.EqualsDefault())
                result = false;
        }
        else if (entity is ProductionFacilityEntity productionFacilityEntity)
        {
            if (productionFacilityEntity.EqualsDefault())
                result = false;
        }
        else if (entity is ProductSeriesEntity productSeriesEntity)
        {
            if (productSeriesEntity.EqualsDefault())
                result = false;
        }
        else if (entity is ScalesEntity scalesEntity)
        {
            if (scalesEntity.EqualsDefault())
                result = false;
        }
        else if (entity is TemplateResourcesEntity templateResourcesEntity)
        {
            if (templateResourcesEntity.EqualsDefault())
                result = false;
        }
        else if (entity is TemplatesEntity templatesEntity)
        {
            if (templatesEntity.EqualsDefault())
                result = false;
        }
        else if (entity is WeithingFactEntity weithingFactEntity)
        {
            if (weithingFactEntity.EqualsDefault())
                result = false;
        }
        else if (entity is WorkshopEntity workshopEntity)
        {
            if (workshopEntity.EqualsDefault())
                result = false;
        }
        else if (entity is ZebraPrinterEntity zebraPrinterEntity)
        {
            if (zebraPrinterEntity.EqualsDefault())
                result = false;
        }
        else if (entity is ZebraPrinterResourceRefEntity zebraPrinterResourceRefEntity)
        {
            if (zebraPrinterResourceRefEntity.EqualsDefault())
                result = false;
        }
        else if (entity is ZebraPrinterTypeEntity zebraPrinterTypeEntity)
        {
            if (zebraPrinterTypeEntity.EqualsDefault())
                result = false;
        }
        if (!result)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Контроль данных",
                Detail = $"Необходимо заполнить поле [{field}]!",
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            return false;
        }
        return true;
    }

    private async Task SaveAsync(MouseEventArgs args,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        var success = true;
        try
        {
            _appSettings.Setup(_dataAccessConfig, _notification, _dialog, _navigation, _tooltip, null, _jsRuntime);
            switch (Table)
            {
                case EnumTable.BarCodeTypes:
                    break;
                case EnumTable.Hosts:
                    var hosts = (HostsEntity)Item;
                    hosts.CreateDate ??= DateTime.Now;
                    hosts.ModifiedDate = DateTime.Now;
                    if (TableAction == EnumTableAction.Add)
                        _appSettings.DataAccess.HostsCrud.SaveEntity(hosts);
                    else
                        _appSettings.DataAccess.HostsCrud.UpdateEntity(hosts);
                    break;
                case EnumTable.Contragents:
                    var contragents = (ContragentsEntity)Item;
                    contragents.CreateDate ??= DateTime.Now;
                    contragents.ModifiedDate = DateTime.Now;
                    if (TableAction == EnumTableAction.Add)
                        _appSettings.DataAccess.ContragentsCrud.SaveEntity(contragents);
                    else
                        _appSettings.DataAccess.ContragentsCrud.UpdateEntity(contragents);
                    break;
                case EnumTable.Nomenclature:
                    var nomenclature = (NomenclatureEntity)Item;
                    nomenclature.CreateDate ??= DateTime.Now;
                    nomenclature.ModifiedDate = DateTime.Now;
                    if (TableAction == EnumTableAction.Add)
                        _appSettings.DataAccess.NomenclatureCrud.SaveEntity(nomenclature);
                    else
                        _appSettings.DataAccess.NomenclatureCrud.UpdateEntity(nomenclature);
                    break;
                case EnumTable.Orders:
                    break;
                case EnumTable.OrderStatus:
                    break;
                case EnumTable.OrderTypes:
                    break;
                case EnumTable.Plu:
                    var plu = (PluEntity)Item;
                    plu.ModifiedDate = DateTime.Now;
                    success = FieldControlDeny(plu.Scale, "Устройство");
                    if (success)
                        success = FieldControlDeny(plu.Templates, "Шаблон");
                    if (success)
                        success = FieldControlDeny(plu.Nomenclature, "Номенклатура");
                    if (success)
                    {
                        // Контроль номера PLU.
                        var pluEntities = _appSettings.DataAccess.PluCrud.GetEntities(
                            new FieldListEntity(new Dictionary<string, object>
                            {
                                { "Scale.Id", plu.Scale.Id },
                                { EnumField.Plu.ToString(), plu.Plu },
                                                        }),
                            null);
                        if (pluEntities.Any() && !pluEntities.Where(x => x.Id.Equals(Item.Id)).Select(x => x).Any())
                        {
                            var msg = new NotificationMessage
                            {
                                Severity = NotificationSeverity.Warning,
                                Summary = "Контроль данных",
                                Detail = $"Таблица PLU уже имеет такой номер [{plu.Plu}]!",
                                Duration = Utils.LocalizationStrings.Timeout
                            };
                            _notification.Notify(msg);
                        }
                        else
                        {
                            if (TableAction == EnumTableAction.Add)
                                _appSettings.DataAccess.PluCrud.SaveEntity(plu);
                            else
                                _appSettings.DataAccess.PluCrud.UpdateEntity(plu);
                        }
                    }
                    break;
                case EnumTable.ProductionFacility:
                    var productionFacility = (ProductionFacilityEntity)Item;
                    productionFacility.CreateDate ??= DateTime.Now;
                    productionFacility.ModifiedDate = DateTime.Now;
                    if (TableAction == EnumTableAction.Add)
                        _appSettings.DataAccess.ProductionFacilityCrud.SaveEntity(productionFacility);
                    else
                        _appSettings.DataAccess.ProductionFacilityCrud.UpdateEntity(productionFacility);
                    break;
                case EnumTable.ProductSeries:
                    var productSeries = (ProductSeriesEntity)Item;
                    productSeries.CreateDate ??= DateTime.Now;
                    if (TableAction == EnumTableAction.Add)
                        _appSettings.DataAccess.ProductSeriesCrud.SaveEntity(productSeries);
                    else
                        _appSettings.DataAccess.ProductSeriesCrud.UpdateEntity(productSeries);
                    break;
                case EnumTable.Scales:
                    var scalesEntity = (ScalesEntity)Item;
                    scalesEntity.CreateDate = DateTime.Now;
                    scalesEntity.ModifiedDate = DateTime.Now;
                    success = FieldControlDeny(scalesEntity.Printer, "Принтер");
                    if (success)
                        success = FieldControlDeny(scalesEntity.Host, "Хост");
                    if (success)
                        success = FieldControlDeny(scalesEntity.TemplateDefault, "Шаблон по-умолчанию");
                    if (success)
                        success = FieldControlDeny(scalesEntity.WorkShop, "Цех");
                    if (success)
                    {
                        if (TableAction == EnumTableAction.Add)
                        {
                            if (scalesEntity.TemplateSeries != null && scalesEntity.TemplateSeries.EqualsDefault())
                                scalesEntity.TemplateSeries = null;
                            _appSettings.DataAccess.ScalesCrud.SaveEntity(scalesEntity);
                        }
                        else
                        {
                            _appSettings.DataAccess.ScalesCrud.UpdateEntity(scalesEntity);
                        }
                    }
                    break;
                case EnumTable.SsccStorage:
                    break;
                case EnumTable.TemplateResources:
                    var templateResourcesEntity = (TemplateResourcesEntity)Item;
                    templateResourcesEntity.CreateDate ??= DateTime.Now;
                    templateResourcesEntity.ModifiedDate = DateTime.Now;
                    if (TableAction == EnumTableAction.Add)
                        _appSettings.DataAccess.TemplateResourcesCrud.SaveEntity(templateResourcesEntity);
                    else
                        _appSettings.DataAccess.TemplateResourcesCrud.UpdateEntity(templateResourcesEntity);
                    break;
                case EnumTable.Templates:
                    var templateEntity = (TemplatesEntity)Item;
                    if (string.IsNullOrEmpty(templateEntity.CategoryId))
                    {
                        success = false;
                        var msg = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Warning,
                            Summary = "Контроль данных",
                            Detail = "Необходимо заполнить поле [Категория]!",
                            Duration = Utils.LocalizationStrings.Timeout
                        };
                        _notification.Notify(msg);
                    }
                    if (success)
                    {
                        templateEntity.CreateDate ??= DateTime.Now;
                        templateEntity.ModifiedDate = DateTime.Now;
                        if (TableAction == EnumTableAction.Add || TableAction == EnumTableAction.Copy)
                        {
                            _appSettings.DataAccess.TemplatesCrud.SaveEntity(templateEntity);
                        }
                        else
                        {
                            _appSettings.DataAccess.TemplatesCrud.UpdateEntity(templateEntity);
                        }
                    }
                    break;
                case EnumTable.WeithingFact:
                    break;
                case EnumTable.WorkShop:
                    var workshopEntity = (WorkshopEntity)Item;
                    workshopEntity.CreateDate ??= DateTime.Now;
                    workshopEntity.ModifiedDate = DateTime.Now;
                    if (TableAction == EnumTableAction.Add)
                        _appSettings.DataAccess.WorkshopCrud.SaveEntity(workshopEntity);
                    else
                        _appSettings.DataAccess.WorkshopCrud.UpdateEntity(workshopEntity);
                    break;
                case EnumTable.Printer:
                    var zebraPrinter = (ZebraPrinterEntity)Item;
                    zebraPrinter.CreateDate = DateTime.Now;
                    zebraPrinter.ModifiedDate = DateTime.Now;
                    success = FieldControlDeny(zebraPrinter.PrinterType, "Тип принтера");
                    if (success)
                    {
                        if (TableAction == EnumTableAction.Add)
                            _appSettings.DataAccess.ZebraPrinterCrud.SaveEntity(zebraPrinter);
                        else
                            _appSettings.DataAccess.ZebraPrinterCrud.UpdateEntity(zebraPrinter);
                    }
                    break;
                case EnumTable.PrinterResourceRef:
                    var zebraPrinterResourceRefEntity = (ZebraPrinterResourceRefEntity)Item;
                    zebraPrinterResourceRefEntity.CreateDate = DateTime.Now;
                    zebraPrinterResourceRefEntity.ModifiedDate = DateTime.Now;
                    if (TableAction == EnumTableAction.Add)
                    {
                        _appSettings.DataAccess.ZebraPrinterResourceRefCrud.SaveEntity(zebraPrinterResourceRefEntity);
                    }
                    else
                    {
                        var existsEntity = _appSettings.DataAccess.ZebraPrinterResourceRefCrud.ExistsEntity(
                            new FieldListEntity(new Dictionary<string, object>
                            {{EnumField.Id.ToString(), zebraPrinterResourceRefEntity.Id}}),
                            new FieldOrderEntity(EnumField.Id, EnumOrderDirection.Desc));
                        if (existsEntity)
                        {
                            var idLast = _appSettings.DataAccess.ZebraPrinterResourceRefCrud.GetEntity(
                                new FieldListEntity(new Dictionary<string, object>
                                { { "Printer.Id", zebraPrinterResourceRefEntity.Printer.Id }}),
                                new FieldOrderEntity(EnumField.Id, EnumOrderDirection.Desc)).Id;
                            //zebraPrinterResourceRefEntity.Id = idLast + 1;
                            _appSettings.DataAccess.ZebraPrinterResourceRefCrud.UpdateEntity(zebraPrinterResourceRefEntity);
                        }
                        else
                        {
                            _appSettings.DataAccess.ZebraPrinterResourceRefCrud.UpdateEntity(zebraPrinterResourceRefEntity);
                        }
                    }
                    break;
                case EnumTable.PrinterType:
                    var printerTypeEntity = (ZebraPrinterTypeEntity)Item;
                    if (TableAction == EnumTableAction.Add)
                    {
                        var idLast = _appSettings.DataAccess.ZebraPrinterTypeCrud.GetEntity(null,
                            new FieldOrderEntity(EnumField.Id, EnumOrderDirection.Desc)).Id;
                        printerTypeEntity.Id = idLast + 1;
                        _appSettings.DataAccess.ZebraPrinterTypeCrud.SaveEntity(printerTypeEntity);
                    }
                    else
                        _appSettings.DataAccess.ZebraPrinterTypeCrud.UpdateEntity(printerTypeEntity);
                    break;
            }
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = Utils.LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            Console.WriteLine(ex.Message);
            Console.WriteLine($"{nameof(filePath)}: {filePath}. {nameof(lineNumber)}: {lineNumber}. {nameof(memberName)}: {memberName}.");
            _appSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
        finally
        {
            if (success)
                _dialog.Close(true);
        }
    }

    private async Task CancelAsync(MouseEventArgs args)
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        _dialog.Close(false);
    }

    #endregion
}
