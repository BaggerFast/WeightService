@page "/access"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using System.Runtime.CompilerServices
@using BlazorDeviceControl.Data
@using BlazorDeviceControl.Utils
@using DeviceControl.Core
@using DeviceControl.Core.DAL.DataModels
@using Toolbelt.Blazor.HotKeys
@inject BlazorSettingsEntity _blazorSettings
@inject DataAccessConfig _dataAccessConfig
@inject DialogService _dialog
@inject NavigationManager _navigation
@inject NotificationService _notification
@inject TooltipService _tooltip
@inject HotKeys _hotKeys
@inject IJSRuntime _jsRuntime

@if (_blazorSettings.UserAccessLevel == true || _blazorSettings.UserAccessLevel == false)
{
@* Header *@
    <h2 style="font-size: @FontSizeHeader;">
        @GetHeader()
        <RadzenButton Click=@(args => GetDataAsync())
                      ButtonStyle="ButtonStyle.Primary" Style="margin-top: 10px; width: 80px; margin-left: 25px"
                      class="oi oi-reload" Disabled=@_blazorSettings.DataAccess.IsDisabled MouseEnter="@(args => ShowTooltipGetData(args))" />
    </h2>
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text=@LocalizationStrings.Table>
                @* RadzenGrid *@
                <div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px;">
                    @if (Items == null)
                    {
                        <RadzenLabel Text=@LocalizationStrings.DataLoading Style="width: 20%" />
                        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
                    }
                    else
                    {
                        // Sorting by [WeithingDate].
                        <RadzenGrid Data=@Items TItem="AccessEntity"
                                    RowSelect=@(args => RowSelectAsync(args))
                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                                    AllowPaging="true" PageSize="100" AllowSorting="true" ColumnWidth="200px">
                            <Columns>
                                <RadzenGridColumn TItem="AccessEntity" TextAlign="TextAlign.Center"
                                                  Title=@LocalizationStrings.TableFieldCreateDt Type="date" Width="13%">
                                    <Template Context="logItem">
                                        <RadzenDatePicker TValue="string" Value=@logItem.CreateDt Disabled="true" DateFormat="yyyy-MM-dd HH:mm:ss" />
                                    </Template>
                                </RadzenGridColumn>
                                <RadzenGridColumn TItem="AccessEntity" TextAlign="TextAlign.Center"
                                                  Title=@LocalizationStrings.TableFieldChangeDt Type="date" Width="13%">
                                    <Template Context="logItem">
                                        <RadzenDatePicker TValue="string" Value=@logItem.ChangeDt Disabled="true" DateFormat="yyyy-MM-dd HH:mm:ss" />
                                    </Template>
                                </RadzenGridColumn>
                                <RadzenGridColumn TItem="AccessEntity" Property="User" TextAlign="TextAlign.Left"
                                                  Title=@LocalizationStrings.TableFieldUser Type="string" Width="40%" />
                                <RadzenGridColumn TItem="AccessEntity" TextAlign="TextAlign.Left"
                                                  Title=@LocalizationStrings.TableFieldAccessLevel Type="string" Width="34%">
                                    <Template Context="accessItem">
                                        @if (accessItem.Level == null)
                                        {
                                            <RadzenLabel Text="Нет доступа" Disabled="true" />
                                        }
                                        else if (accessItem.Level == false)
                                        {
                                            <RadzenLabel Text="Доступ на чтение" Disabled="true" />
                                        }
                                        else if (accessItem.Level == true)
                                        {
                                            <RadzenLabel Text="Доступ на запись" Disabled="true" />
                                        }
                                    </Template>
                                </RadzenGridColumn>
                            </Columns>
                        </RadzenGrid>
                    }
                </div>
                @* Actions *@
                <div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px; height: 50px;">
                    @if (_blazorSettings.UserAccessLevel == true)
                    {
                        <RadzenButton Click=@(args => ActionAddAsync(EnumTable.Logs, Item, null))
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px;"
                                      Text=@LocalizationStrings.TableActionAdd Disabled=@_blazorSettings.DataAccess.IsDisabled />
                        <RadzenButton Click=@(args => ActionEditAsync(Item, null))
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px;"
                                      Text=@LocalizationStrings.TableActionEdit Disabled=@_blazorSettings.DataAccess.IsDisabled />
                        @if (_blazorSettings.IsDebug)
                        {
                            <RadzenButton Click=@(args => ActionDeleteAsync(EnumTable.Logs, Item, null))
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px;"
                                          Text=@LocalizationStrings.TableActionDeleteForever Disabled=@_blazorSettings.DataAccess.IsDisabled />
                        }
                    }
                    else
                    {
                        <span>@LocalizationStrings.TableActionsIsDeny</span>
                    }
                </div>
            </RadzenTabsItem>
            <RadzenTabsItem Text=@LocalizationStrings.Chart>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <RadzenLabel Text=@LocalizationStrings.MenuAccessDeny></RadzenLabel>
}

@code {
    #region Public and private fields and properties
    private void ShowTooltipGetData(ElementReference elementReference, TooltipOptions options = null) =>
        _tooltip.Open(elementReference, LocalizationStrings.TableReadData, options);
    public BaseUidEntity Item { get; set; }
    public List<AccessEntity> Items { get; set; }
    public object[] Objects { get; set; }
    [Parameter]
    public int FontSizeHeader { get; set; }
    [Parameter]
    public int FontSize { get; set; }

    #endregion

    #region Public and private methods

    private async Task GuiRefreshAsync()
    {
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        _blazorSettings.Setup(_dataAccessConfig, _notification, _dialog, _navigation, _tooltip, null, _jsRuntime);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        FontSize = parameters.TryGetValue<int>("FontSize", out var fontSize) ? fontSize : 14;
        FontSizeHeader = parameters.TryGetValue<int>("FontSizeHeader", out var fontSizeHeader) ? fontSizeHeader : 20;
        await GetDataAsync().ConfigureAwait(false);
    }

    private string GetHeader()
    {
        return LocalizationStrings.TableTitleAccess;
    }

    private void GetData()
    {
        Objects = _blazorSettings.DataAccess.GetEntitiesNativeObject(SqlQueries.GetAccess, string.Empty, 0, string.Empty);
        Items = new List<AccessEntity>();
        foreach (var obj in Objects)
        {
            if (obj is object[] { Length: 5 } item)
            {
                if (Guid.TryParse(Convert.ToString(item[0]), out var uid))
                {
                    Items.Add(new AccessEntity()
                    {
                        Uid = uid,
                        CreateDt = Convert.ToDateTime(item[1]),
                        ChangeDt = Convert.ToDateTime(item[2]),
                        User = Convert.ToString(item[3]),
                        Level = item[4] == null ? null : Convert.ToBoolean(item[4]),
                    });
                }
            }
        }
    }

    private async Task GetDataAsync([CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        var task = new Task(GetData);
        await _blazorSettings.RunTasks(LocalizationStrings.TableRead,
            "", LocalizationStrings.DialogResultFail, "",
            new List<Task> { task }, GuiRefreshAsync, filePath, lineNumber, memberName).ConfigureAwait(false);
    }

    private async Task ActionEditAsync(BaseUidEntity item, BaseUidEntity parentEntity)
    {
        //var title = LocalizationStrings.GetItemTitle(EnumTable.Logs);
        await _blazorSettings.ActionAsync(EnumTable.Logs, EnumTableAction.Edit, item, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseUidEntity entity, BaseUidEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseUidEntity entity, BaseUidEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseUidEntity entity, BaseUidEntity parentEntity)
    {
        LogEntity logEntity = _blazorSettings.DataAccess.LogCrud.GetEntity(new FieldListEntity(
        new Dictionary<string, object> { { EnumField.Uid.ToString(), entity.Uid } }), null);
        await _blazorSettings.ActionAsync(table, EnumTableAction.Delete, logEntity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionMarkedAsync(EnumTable table, BaseUidEntity entity, BaseUidEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Marked, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(AccessEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            Item = entity;
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    #endregion
}
