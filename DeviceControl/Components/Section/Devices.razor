@page "/Devices"
@using DeviceControl.Core.DAL.DataModels
@using BlazorDeviceControl.Models
@inject AppSettings AppSettings
@inject DataAccessConfig DataAccessConfig
@inject DialogService Dialog
@inject NotificationService Notification
@inject TooltipService Tooltip

<h2>
    @Utils.LocalizationStrings.DevicesTitle
    <RadzenButton Click="GetDataAsync" ButtonStyle="ButtonStyle.Primary" Style="margin-top: 10px; width: 100px; margin-left: 0px"
                  class="oi oi-reload" Disabled=@AppSettings.DataAccess.IsDisabled MouseEnter="@(args => ShowTooltipGetData(args))" />
</h2>

<br style="margin-top: 50px" />
<p>
    <RadzenGrid Data=@Entities TItem="DeviceEntity" Value=@Entity
                RowSelect=@(args => RowSelectAsync(args)) RowDoubleClick=@(args => RowDoubleClickAsync(args))
                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                AllowPaging="true" PageSize="25" AllowSorting="true" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="DeviceEntity" Property="Scales.Description" Title=@Utils.LocalizationStrings.TableFieldName
                              Type="string" Width="20%" />
            <RadzenGridColumn TItem="DeviceEntity" Property="Scales.Id" Title=@Utils.LocalizationStrings.TableFieldId
                              Type="System.Guid" Width="10%" />
            <RadzenGridColumn TItem="DeviceEntity" Property="Scales.Storage" Title=@Utils.LocalizationStrings.TableFieldStorage
                              Type="string" Width="35%" />
            <RadzenGridColumn TItem="DeviceEntity" Property="Scales.State" Title=@Utils.LocalizationStrings.TableFieldState
                              Type="bool" Width="35%" />
        </Columns>
    </RadzenGrid>
</p>

<br style="margin-top: 50px" />
<p>
    <span>@Utils.LocalizationStrings.TableActions</span>
    <br style="margin-top: 50px" />
    <RadzenButton Click="ActionAddAsync" ButtonStyle="ButtonStyle.Secondary" Style="margin-top: 20px; width: 200px; margin-left: 30px"
                  Text=@Utils.LocalizationStrings.TableActionAdd
                  Disabled=@AppSettings.DataAccess.IsDisabled />
    <RadzenButton Click="ActionCopyAsync" ButtonStyle="ButtonStyle.Secondary" Style="margin-top: 20px; width: 200px; margin-left: 30px"
                  Text=@Utils.LocalizationStrings.TableActionCopy
                  Disabled=@AppSettings.DataAccess.IsDisabled />
    <RadzenButton Click="ActionDeleteAsync" ButtonStyle="ButtonStyle.Secondary" Style="margin-top: 20px; width: 200px; margin-left: 30px"
                  Text=@Utils.LocalizationStrings.TableActionDelete
                  Disabled=@AppSettings.DataAccess.IsDisabled />
</p>

@code {

    #region Public and private fields and properties

    private void ShowTooltipGetData(ElementReference elementReference, TooltipOptions options = null) => Tooltip.Open(elementReference, "Прочитать данные", options);
    public List<DeviceEntity> Entities { get; set; }
    public DeviceEntity Entity { get; set; }

    #endregion

    #region Public and private methods

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        AppSettings.Setup(DataAccessConfig, Notification, Dialog);

        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task GetDataAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            Entities = AppSettings.DataAccess.DeviceCrud.GetEntities(null, null).ToList();
            //var message = new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Успех.", Detail = "Чтение выполнено успешно.", Duration = Utils.LocalizationStrings.Timeout };
            //Notification.Notify(message);
        }
        catch (Exception ex)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Ошибка чтения!", Detail = ex.Message, Duration = Utils.LocalizationStrings.Timeout };
            Notification.Notify(message);
        }
    }

    private async Task RowSelectAsync(DeviceEntity entity)
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        Entity = entity;
    }

    private async Task RowDoubleClickAsync(DeviceEntity entity)
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        Entity = entity;

        //await Dialog.OpenAsync<DevicePage>($"Весовой пост: {entity.Scales.Description}",
        //    new Dictionary<string, object>()
        //    {
        //        { "Device", entity },
        //    },
        //    new DialogOptions() { Width = "1024px", Height = "768px" }).ConfigureAwait(false);
    }

    #endregion

    #region Public and private methods - Действия с таблицей устройств

    private async Task ActionAddAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        var message = new NotificationMessage
        {
            Severity = NotificationSeverity.Info,
            Summary = "Действие",
            Detail = "Добавить" + Environment.NewLine + "В разработке",
            Duration = Utils.LocalizationStrings.Timeout
        };
        Notification.Notify(message);
    }

    private async Task ActionCopyAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        var message = new NotificationMessage
        {
            Severity = NotificationSeverity.Info,
            Summary = "Действие",
            Detail = "Скопировать" + Environment.NewLine + "В разработке",
            Duration = Utils.LocalizationStrings.Timeout
        };
        Notification.Notify(message);
    }

    private async Task ActionDeleteAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        var message = new NotificationMessage
        {
            Severity = NotificationSeverity.Info,
            Summary = "Действие",
            Detail = "Удалить" + Environment.NewLine + "В разработке",
            Duration = Utils.LocalizationStrings.Timeout
        };
        Notification.Notify(message);
    }

    #endregion
}
