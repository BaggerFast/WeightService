@page "/scales"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using System.Runtime.CompilerServices
@using BlazorDeviceControl.Data
@using BlazorDeviceControl.Utils
@using DeviceControl.Core
@using DeviceControl.Core.DAL.DataModels
@using DeviceControl.Core.Models
@using Toolbelt.Blazor.HotKeys
@inject BlazorSettingsEntity _blazorSettings
@inject DataAccessConfig _dataAccessConfig
@inject DialogService _dialog
@inject NavigationManager _navigation
@inject NotificationService _notification
@inject TooltipService _tooltip
@inject HotKeys _hotKeys
@inject IJSRuntime _jsRuntime

@if (_blazorSettings.UserAccessLevel == true || _blazorSettings.UserAccessLevel == false)
{
    @* Header *@
    <h2 style="font-size: @FontSizeHeader;">
        @LocalizationStrings.TableTitleScalesShort
        <RadzenButton Click=@(args => GetDataAsync())
                      ButtonStyle="ButtonStyle.Primary" Style="margin-top: 10px; width: 80px; margin-left: 25px"
                      class="oi oi-reload" Disabled=@_blazorSettings.DataAccess.IsDisabled MouseEnter="@(args => ShowTooltipGetData(args))" />
    </h2>

    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text=@LocalizationStrings.Table>
                @* RadzenGrid *@
                <div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px;">
                    @if (Entities == null)
                    {
                        <RadzenLabel Text=@LocalizationStrings.DataLoading Style="width: 20%" />
                        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
                    }
                    else
                    {
                        var scalesEntities = new List<ScalesEntity>();
                        foreach (var entity in Entities)
                        {
                            scalesEntities.Add((ScalesEntity)entity);
                        }
                        // Sorting by [Description].
                        scalesEntities = scalesEntities.OrderBy(x => x.Description).ToList();
                        <RadzenGrid Data=@scalesEntities TItem="ScalesEntity"
                                    RowSelect=@(args => RowSelectAsync(args)) RowDoubleClick=@(args => RowDoubleClickAsync(args))
                                    AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                                    AllowPaging="true" PageSize="25" AllowSorting="true" ColumnWidth="200px">
                            <Columns>
                                <RadzenGridColumn TItem="ScalesEntity" Property="Id" TextAlign="TextAlign.Center"
                                                  Title=@LocalizationStrings.TableFieldId Width="7.5%" />
                                <RadzenGridColumn TItem="ScalesEntity" Property="Description" TextAlign="TextAlign.Left"
                                                  Title=@LocalizationStrings.TableFieldDescription Width="12%" />
                                <RadzenGridColumn TItem="ScalesEntity" Property="Host.Name" TextAlign="TextAlign.Left"
                                                  Title=@LocalizationStrings.TableFieldHost Width="12%" />
                                <RadzenGridColumn TItem="ScalesEntity" Property="Host.Ip" TextAlign="TextAlign.Center"
                                                  Title=@LocalizationStrings.TableFieldDeviceIp Width="8%" />
                                <RadzenGridColumn TItem="ScalesEntity" TextAlign="TextAlign.Left"
                                                  Title=@LocalizationStrings.TableFieldIdRref Width="20%">
                                    <Template Context="item">
                                        <RadzenLabel Text=@item.Host?.IdRRef.ToString() Disabled="true" Style="white-space: pre-wrap;" />
                                    </Template>
                                </RadzenGridColumn>
                                <RadzenGridColumn TItem="ScalesEntity" Property="Printer.Name" TextAlign="TextAlign.Left"
                                                  Title=@LocalizationStrings.TableFieldZebraPrinter Width="13%" />
                                <RadzenGridColumn TItem="ScalesEntity" Property="WorkShop.Name" TextAlign="TextAlign.Center"
                                                  Title=@LocalizationStrings.TableFieldWorkShopName Width="7.5%" />
                                <RadzenGridColumn TItem="ScalesEntity" Property="TemplateDefault.Title" TextAlign="TextAlign.Left"
                                                  Title=@LocalizationStrings.TableFieldTemplateDefault Width="20%">
                                    <Template Context="item">
                                        <RadzenLabel Text=@item.TemplateDefault.Title Disabled="true" Style="white-space: pre-wrap;" />
                                    </Template>
                                </RadzenGridColumn>
                            </Columns>
                        </RadzenGrid>
                    }
                </div>
                @* Actions *@
                <div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px; height: 50px;">
                    @if (_blazorSettings.UserAccessLevel == true)
                    {
                        <RadzenButton Click=@(args => ActionAddAsync(EnumTable.Scales, Entity, null))
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px;"
                                      Text=@LocalizationStrings.TableActionAdd Disabled=@_blazorSettings.DataAccess.IsDisabled />
                        <RadzenButton Click=@(args => ActionEditAsync(Entity, null))
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px; "
                                      Text=@LocalizationStrings.TableActionEdit Disabled=@_blazorSettings.DataAccess.IsDisabled />
                        <RadzenButton Click=@(args => ActionMarkedAsync(EnumTable.Scales, Entity, null))
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px; "
                                      Text=@LocalizationStrings.TableActionDelete Disabled=@_blazorSettings.DataAccess.IsDisabled />
                        @if (_blazorSettings.IsDebug)
                        {
                            <RadzenButton Click=@(args => ActionCopyAsync(EnumTable.Scales, Entity, null))
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px; "
                                          Text=@LocalizationStrings.TableActionCopy Disabled=@_blazorSettings.DataAccess.IsDisabled />
                            <RadzenButton Click=@(args => ActionDeleteAsync(EnumTable.Scales, Entity, null))
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px; "
                                          Text=@LocalizationStrings.TableActionDeleteForever Disabled=@_blazorSettings.DataAccess.IsDisabled />
                        }
                    }
                    else
                    {
                        <span>@LocalizationStrings.TableActionsIsDeny</span>
                    }
                </div>
            </RadzenTabsItem>
            <RadzenTabsItem Text=@LocalizationStrings.Chart>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
}
else
{
    <RadzenLabel Text=@LocalizationStrings.MenuAccessDeny></RadzenLabel>
}

@code {
    #region Public and private fields and properties
    private void ShowTooltipGetData(ElementReference elementReference, TooltipOptions options = null) =>
        _tooltip.Open(elementReference, LocalizationStrings.TableReadData, options);
    [Parameter]
    public BaseIdEntity Entity { get; set; }
    [Parameter]
    public BaseIdEntity[] Entities { get; set; }
    [Parameter]
    public int FontSizeHeader { get; set; }
    [Parameter]
    public int FontSize { get; set; }
    private List<TypeEntity<string>> TemplateCategories { get; set; }
    private string TemplateCategory { get; set; }

    #endregion

    #region Public and private methods

    private async Task GuiRefreshAsync()
    {
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        _blazorSettings.Setup(_dataAccessConfig, _notification, _dialog, _navigation, _tooltip, null, _jsRuntime);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        FontSize = parameters.TryGetValue<int>("FontSize", out var fontSize) ? fontSize : 14;
        FontSizeHeader = parameters.TryGetValue<int>("FontSizeHeader", out var fontSizeHeader) ? fontSizeHeader : 20;
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task RowSelectAsync(BaseIdEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            Entity = entity;
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task RowDoubleClickAsync(BaseIdEntity entity,
    [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            Entity = entity;
            await ActionEditAsync(Entity, null).ConfigureAwait(true);
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = LocalizationStrings.Timeout
            };
            _notification.Notify(msg);
            _blazorSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private void GetData()
    {
        Entities = _blazorSettings.DataAccess.ScalesCrud.GetEntities(
            new FieldListEntity(new Dictionary<string, object> { { EnumField.Marked.ToString(), false } }),
            new FieldOrderEntity(EnumField.Description, EnumOrderDirection.Asc));
    }

    private async Task GetDataAsync([CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        var task = new Task(GetData);
        await _blazorSettings.RunTasks(LocalizationStrings.TableRead,
            "", LocalizationStrings.DialogResultFail, "",
            new List<Task> { task }, GuiRefreshAsync, filePath, lineNumber, memberName).ConfigureAwait(false);
    }

    private async Task ActionEditAsync(BaseIdEntity item, BaseIdEntity parentEntity)
    {
        var title = LocalizationStrings.GetItemTitle(EnumTable.Scales);
        await _blazorSettings.ActionAsync(EnumTable.Scales, EnumTableAction.Edit, item, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionMarkedAsync(EnumTable table, BaseIdEntity entity, BaseIdEntity parentEntity)
    {
        await _blazorSettings.ActionAsync(table, EnumTableAction.Marked, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task OnChange(object value, string name)
    {
        switch (name)
        {
            case "TemlateCategories":
                if (value is string strValue)
                {
                    TemplateCategory = strValue;
                }
                break;
        }
        StateHasChanged();
        await GetDataAsync().ConfigureAwait(false);
    }

    #endregion
}
