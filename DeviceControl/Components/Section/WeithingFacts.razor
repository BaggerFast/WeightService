@page "/weithingfacts"
@using DeviceControl.Core.DAL
@using DeviceControl.Core.DAL.TableModels
@using System.Runtime.CompilerServices
@using BlazorDeviceControl.Data
@using BlazorDeviceControl.Utils
@using DeviceControl.Core
@using DeviceControl.Core.DAL.DataModels
@using DeviceControl.Core.Models
@using Toolbelt.Blazor.HotKeys
@inject AppSettings AppSettings
@inject DataAccessConfig DataAccessConfig
@inject DialogService Dialog
@inject NavigationManager Navigation
@inject NotificationService Notification
@inject TooltipService Tooltip
@inject HotKeys HotKeys
@inject IJSRuntime JsRuntime
@* Header *@
<h2 style="font-size: @FontSizeHeader;">
    @GetHeader()
    <RadzenButton Click=@(args => GetDataAsync())
                  ButtonStyle="ButtonStyle.Primary" Style="margin-top: 10px; width: 80px; margin-left: 25px"
                  class="oi oi-reload" Disabled=@AppSettings.DataAccess.IsDisabled MouseEnter="@(args => ShowTooltipGetData(args))" />
</h2>

<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text=@LocalizationStrings.Table>
            @* RadzenGrid *@
            <div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px;">
                @if (EntitiesSummary == null)
                {
                    <RadzenLabel Text=@LocalizationStrings.DataLoading Style="width: 20%" />
                    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="width: 77%; height: 15px" />
                }
                else
                {
                    <!--var weithingFactEntities = new List<WeithingFactEntity>();
                    foreach (var entity in Entities)
                    {
                        weithingFactEntities.Add((WeithingFactEntity)entity);
                    }
                    // Sorting by [WeithingDate].
                    weithingFactEntities = weithingFactEntities.OrderByDescending(x => x.WeithingDate).ToList();
                    <RadzenGrid Data=@weithingFactEntities TItem="WeithingFactEntity"
                                RowSelect=@(args => RowSelectAsync(args)) RowDoubleClick=@(args => RowDoubleClickAsync(args))
                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                                AllowPaging="true" PageSize="100" AllowSorting="true" ColumnWidth="200px">
                        <Columns>
                            <RadzenGridColumn TItem="WeithingFactEntity" Property="WeithingDate" TextAlign="TextAlign.Center"
                                              Title=@LocalizationStrings.TableFieldWeithingDate
                                              Type="date" Width="15%">
                                <Template Context="weithingFactEntity">
                                    <RadzenDatePicker TValue="DateTime" Value=@weithingFactEntity.WeithingDate Disabled="true" />
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="WeithingFactEntity" Property="ProductDate" TextAlign="TextAlign.Center"
                                              Title=@LocalizationStrings.TableFieldProductDate
                                              Type="date" Width="10%">
                                <Template Context="weithingFactEntity">
                                    <RadzenDatePicker TValue="DateTime" Value=@weithingFactEntity.ProductDate Disabled="true" DateFormat="d" />
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="WeithingFactEntity" Property="RegNum" TextAlign="TextAlign.Center"
                                              Title=@LocalizationStrings.TableFieldRegNum
                                              Type="date" Width="5%" />
                            <RadzenGridColumn TItem="WeithingFactEntity" Property="Kneading" TextAlign="TextAlign.Center"
                                              Title=@LocalizationStrings.TableFieldKneding
                                              Type="int" Width="5%">
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="WeithingFactEntity" Property="Scales.Description" Title=@LocalizationStrings.TableFieldScale
                                              Type="string" Width="65%" />-->
                                @*<RadzenGridColumn TItem="WeithingFactEntity" Property="Scales.Host.Name" Title=@Utils.LocalizationStrings.TableFieldHost
                        Type="string" Width="32.5%" />*@
                                <!--</Columns>
                    </RadzenGrid>-->
                    // Sorting by [WeithingDate].
                    <RadzenGrid Data=@EntitiesSummary TItem="WeithingFactSummaryEntity"
                                AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                                AllowPaging="true" PageSize="100" AllowSorting="true" ColumnWidth="200px">
                        <Columns>
                            <RadzenGridColumn TItem="WeithingFactSummaryEntity" Property="WeithingDate" TextAlign="TextAlign.Center"
                                              Title=@LocalizationStrings.TableFieldWeithingDate
                                              Type="date" Width="15%">
                                <Template Context="weithingFactEntity">
                                    <RadzenDatePicker TValue="DateTime" Value=@weithingFactEntity.WeithingDate Disabled="true" DateFormat="d" />
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="WeithingFactSummaryEntity" Property="WeithingDay" TextAlign="TextAlign.Center"
                                              Title=@LocalizationStrings.TableFieldDayOfWeek
                                              Type="string" Width="15%" />
                            <RadzenGridColumn TItem="WeithingFactSummaryEntity" Property="Count" TextAlign="TextAlign.Center"
                                              Title=@LocalizationStrings.TableFieldCount
                                              Type="int" Width="10%" />
                            <RadzenGridColumn TItem="WeithingFactSummaryEntity" Property="Scale" TextAlign="TextAlign.Left"
                                              Title=@LocalizationStrings.TableFieldScale
                                              Type="string" Width="60%" />
                        </Columns>
                    </RadzenGrid>
                }
            </div>
            @* Actions *@
            <div class="row col-sm-12 col-md-12 col-lg-12" style="margin-top: 5px; height: 50px;">
                @if (AppSettings.IsDebug && !AppSettings.ShowActionsButtons)
                {
                    AppSettings.ShowActionsButtons = true;
                    <RadzenLabel Text=@LocalizationStrings.IsDebug />
                    <br />
                }
                @if (AppSettings.ShowActionsButtons)
                {
                    <RadzenButton Click=@(args => ActionAddAsync(EnumTable.WeithingFact, Entity, null))
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px;"
                                  Text=@LocalizationStrings.TableActionAdd Disabled=@AppSettings.DataAccess.IsDisabled />
                    <RadzenButton Click=@(args => ActionEditAsync(EnumTable.WeithingFact, Entity, null))
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px; "
                                  Text=@LocalizationStrings.TableActionEdit Disabled=@AppSettings.DataAccess.IsDisabled />
                    <RadzenButton Click=@(args => ActionMarkedAsync(EnumTable.WeithingFact, Entity, null))
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px; "
                                  Text=@LocalizationStrings.TableActionDelete Disabled=@AppSettings.DataAccess.IsDisabled />
                    @if (AppSettings.IsDebug)
                    {
                        <RadzenButton Click=@(args => ActionCopyAsync(EnumTable.WeithingFact, Entity, null))
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px; "
                                      Text=@LocalizationStrings.TableActionCopy Disabled=@AppSettings.DataAccess.IsDisabled />
                        <RadzenButton Click=@(args => ActionDeleteAsync(EnumTable.WeithingFact, Entity, null))
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Style="margin-left: 30px; width: 200px; height: 30px; font-size: 12px; "
                                      Text=@LocalizationStrings.TableActionDeleteForever Disabled=@AppSettings.DataAccess.IsDisabled />
                    }
                }
                else
                {
                    <span>@LocalizationStrings.TableActionsIsDeny</span>
                }
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text=@LocalizationStrings.Chart>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    #region Public and private fields and properties
    private void ShowTooltipGetData(ElementReference elementReference, TooltipOptions options = null) =>
        Tooltip.Open(elementReference, LocalizationStrings.TableReadData, options);
    ChartCountEntity[] ContragentsChartCreated { get; set; }
    ChartCountEntity[] ContragentsChartModified { get; set; }
    ChartCountEntity[] NomenclaturesChartCreated { get; set; }
    ChartCountEntity[] NomenclaturesChartModified { get; set; }
    [Parameter]
    public BaseEntity Entity { get; set; }
    public BaseEntity[] Entities { get; set; }
    public List<WeithingFactSummaryEntity> EntitiesSummary { get; set; }
    public object[] Objects { get; set; }
    [Parameter]
    public int FontSizeHeader { get; set; }
    [Parameter]
    public int FontSize { get; set; }
    private List<TypeEntity<string>> TemplateCategories { get; set; }
    private string TemplateCategory { get; set; }

    #endregion

    #region Public and private methods

    private async Task GuiRefreshAsync()
    {
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);
        AppSettings.Setup(DataAccessConfig, Notification, Dialog, Navigation, Tooltip, null, JsRuntime);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        AppSettings.ShowActionsButtons = false;
        await base.SetParametersAsync(parameters);
        FontSize = parameters.TryGetValue<int>("FontSize", out var fontSize) ? fontSize : 14;
        FontSizeHeader = parameters.TryGetValue<int>("FontSizeHeader", out var fontSizeHeader) ? fontSizeHeader : 20;
        await GetDataAsync().ConfigureAwait(false);
    }

    private string GetHeader()
    {
        return LocalizationStrings.TableTitleWeithingFactShort;
    }

    private async Task RowSelectAsync(BaseEntity entity, [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            Entity = entity;
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            AppSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private async Task RowDoubleClickAsync(BaseEntity entity,
        [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        try
        {
            Entity = entity;
            await ActionEditAsync(EnumTable.WeithingFact, Entity, null).ConfigureAwait(true);
        }
        catch (Exception ex)
        {
            var msg = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Ошибка метода [{memberName}]!",
                Detail = ex.Message,
                Duration = LocalizationStrings.Timeout
            };
            Notification.Notify(msg);
            Console.WriteLine(msg.Detail);
            AppSettings.DataAccess.LogExceptionToSql(ex, filePath, lineNumber, memberName);
        }
    }

    private void GetData()
    {
        Entities = null;
        Entities = AppSettings.DataAccess.WeithingFactCrud.GetEntities(null,
            new FieldOrderEntity(EnumField.WeithingDate, EnumOrderDirection.Desc), 100);
        Objects = AppSettings.DataAccess.GetEntitiesNativeObject(@"
-- Диаграмма. Взвешивания итоги
select
	 cast([wf].[WeithingDate] as date) [WeithingDate]
	,count(*) [Count]
	,[s].[Description] [Scale]
	,[h].[Name] [Host]
	,[p].[Name] [Printer]
from [db_scales].[WeithingFact] [wf]
left join [db_scales].[Scales] [s] on [wf].[ScaleId] = [s].[Id]
left join [db_scales].[Hosts] [h] on [s].[HostId] = [h].[Id]
left join [db_scales].[ZebraPrinter] [p] on [s].[ZebraPrinterId] = [p].[Id]
group by cast([WeithingDate] as date), [s].[Description], [h].[Name], [p].[Name]
order by [WeithingDate] desc
            ".TrimStart('\r', ' ', '\n').TrimEnd('\r', ' ', '\n'), string.Empty, 0, string.Empty);
        EntitiesSummary = new List<WeithingFactSummaryEntity>();
        foreach (var obj in Objects)
        {
            if (obj is object[] { Length: 5 } item)
            {
                EntitiesSummary.Add(new WeithingFactSummaryEntity
                {
                    WeithingDate = Convert.ToDateTime(item[0]),
                    Count = Convert.ToInt32(item[1]),
                    Scale = Convert.ToString(item[2]),
                    Host = Convert.ToString(item[3]),
                    Printer = Convert.ToString(item[4]),
                });
            }
        }

        // ChartDataCreated.
        ContragentsChartCreated = AppSettings.GetContragentsChartEntities(EnumField.CreateDate);
        // ChartDataModified.
        ContragentsChartModified = AppSettings.GetContragentsChartEntities(EnumField.ModifiedDate);

        // ChartDataCreated.
        NomenclaturesChartCreated = AppSettings.GetNomenclaturesChartEntities(EnumField.CreateDate);
        // ChartDataModified.
        NomenclaturesChartModified = AppSettings.GetNomenclaturesChartEntities(EnumField.ModifiedDate);
    }

    private async Task GetDataAsync([CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0, [CallerMemberName] string memberName = "")
    {
        var task = new Task(GetData);
        await AppSettings.RunTasks(LocalizationStrings.TableRead,
            "", LocalizationStrings.DialogResultFail, "",
            new List<Task> { task }, GuiRefreshAsync, filePath, lineNumber, memberName).ConfigureAwait(false);
    }

    private async Task ActionEditAsync(EnumTable table, BaseEntity item, BaseEntity parentEntity)
    {
        // Backup
        //await AppSettings.ActionAsync(table, EnumTableAction.Edit, entity, parentEntity).ConfigureAwait(true);
        //await GetDataAsync().ConfigureAwait(false);

        Task task = null;
        var title = LocalizationStrings.GetItemTitle(table);
        switch (table)
        {
            case EnumTable.Printer:
                task = new Task(() =>
                {
                    AppSettings.ActionAsync(table, EnumTableAction.Edit, item, LocalizationStrings.UriRouteItemPrinter, false)
                        .ConfigureAwait(true);
                });
                break;
            default:
                await AppSettings.ActionAsync(table, EnumTableAction.Edit, item, parentEntity).ConfigureAwait(true);
                await GetDataAsync().ConfigureAwait(false);
                break;
        }
        await AppSettings.RunTasks(title, "", LocalizationStrings.DialogResultFail, "",
            new List<Task> { task }, null).ConfigureAwait(false);
    }

    private async Task ActionAddAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Add, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionCopyAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Copy, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionDeleteAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Delete, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task ActionMarkedAsync(EnumTable table, BaseEntity entity, BaseEntity parentEntity)
    {
        await AppSettings.ActionAsync(table, EnumTableAction.Marked, entity, parentEntity).ConfigureAwait(true);
        await GetDataAsync().ConfigureAwait(false);
    }

    private async Task OnChange(object value, string name)
    {
        switch (name)
        {
            case "TemlateCategories":
                if (value is string strValue)
                {
                    TemplateCategory = strValue;
                }
                break;
        }
        StateHasChanged();
        await GetDataAsync().ConfigureAwait(false);
    }

    #endregion
}
