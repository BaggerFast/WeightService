@attribute [Authorize]
@using BlazorDeviceControl.Utils
@using Toolbelt.Blazor.HotKeys
@using BlazorDeviceControl.Data
@using DeviceControl.Core.Utils
@inherits LayoutComponentBase
@inject BlazorSettingsEntity _blazorSettings
@inject DataAccessConfig _dataAccessConfig
@inject DialogService _dialog
@inject NavigationManager _navigation
@inject NotificationService _notification
@inject TooltipService _tooltip
@inject HotKeys _hotKeys
@inject IJSRuntime _jsRuntime
@inject AuthenticationStateProvider _authenticationState

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

@if (IsSqlServerProduct)
{
    <div class="sidebar">
        <NavMenu />
    </div>
}
else
{
    <div class="sidebar" style="background: Green">
        <NavMenu />
    </div>
}

<div class="main">
    <div class="top-row px-4">
        <div class="col-sm-3 col-md-3 col-lg-3">
            <RadzenLabel Text=@DbServer Style="text-align: left;" />
        </div>
        <div class="col-sm-3 col-md-3 col-lg-3">
            <RadzenLabel Text=@AuthMessage Style="text-align: center; margin-left: 50px; height: 10px;" />
        </div>
        <div class="col-sm-4 col-md-4 col-lg-4">
            <RadzenLabel Text=@MemoryInfo Style="text-align: center; margin-left: 50px; height: 10px;" />
        </div>
        <div class="col-sm-2 col-md-2 col-lg-2">
            <RadzenLink Icon="email" Text=@LocalizationStrings.CallbackTitle Path=@LocalizationStrings.CallbackEmail Style="text-align: right" />
        </div>
    </div>
    <div class="content px-4">
        @Body
    </div>
</div>

@code{
    #region Public and private fields and properties

    private string DbServer => _dataAccessConfig.Server.Contains(LocalizationStrings.SqlServerProduct, StringComparison.InvariantCultureIgnoreCase)
        ? LocalizationStrings.ServerProduct : LocalizationStrings.ServerDevelop;
    private bool IsSqlServerProduct => _dataAccessConfig.Server.Contains(LocalizationStrings.SqlServerProduct, StringComparison.InvariantCultureIgnoreCase);
    private string MemoryInfo => _blazorSettings.Memory != null
        ? $"{LocalizationStrings.MemoryUsed}: {_blazorSettings.Memory.MemorySize.Physical.MegaBytes:N0} MB  |  {UtilsDt.FormatCurDtRus(true)}"
        : $"{LocalizationStrings.MemoryUsed}: - MB";
    private string AuthMessage => _blazorSettings.Identity != null ? _blazorSettings.Identity.Name : @"User error!";

    #endregion

    #region Public and private methods

    private async Task GuiRefreshAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(true);

        try
        {
            HotKeysContext hotKeys = _hotKeys.CreateContext()
                .Add(ModKeys.Alt, Keys.Num1, _blazorSettings.HotKeysMenuRoot, "Menu root");
            _blazorSettings.Setup(_dataAccessConfig, _notification, _dialog, _navigation, _tooltip, hotKeys, _jsRuntime);

            Task taskMemory = new Task(delegate { _blazorSettings.MemoryOpen(GuiRefreshAsync); });
            taskMemory.Start();

            Task taskAuthentication = new Task(delegate { _blazorSettings.AuthenticationOpen(_authenticationState, GuiRefreshAsync); });
            taskAuthentication.Start();
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
            if (!string.IsNullOrEmpty(ex.InnerException?.Message))
                msg += Environment.NewLine + ex.InnerException.Message;
            if (!string.IsNullOrEmpty(msg))
                _notification.Notify(NotificationSeverity.Error, LocalizationStrings.IndexDescription + Environment.NewLine, msg,
                    _blazorSettings.Delay);

            Console.WriteLine(msg);
            Console.WriteLine($"MainLayout.razor. {nameof(OnInitializedAsync)}.");
        }
        finally
        {
            await GuiRefreshAsync().ConfigureAwait(false);
        }
    }

    public void Dispose()
    {
        _dialog?.Dispose();
        _tooltip?.Dispose();
        _blazorSettings.HotKeys.Dispose();
    }

    #endregion
}
