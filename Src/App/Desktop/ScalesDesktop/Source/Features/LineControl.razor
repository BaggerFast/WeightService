@using Blazor.Heroicons.Outline
@using ScalesDesktop.Source.Shared.Services
@using TscZebra.Plugin.Abstractions.Enums
@using Ws.Shared.Enums

@implements IDisposable

<div class="flex justify-between items-center w-full">
  @if (LineContext.Line == null)
  {
    <Skeleton Class="size-16 !rounded-full shrink-0" />
  }
  else
  {
    <div class="size-16 shrink-0 rounded-full flex items-center justify-center bg-secondary">
      @switch (LineContext.Line.Type)
      {
        case ArmType.Pc:
          <ComputerDesktopIcon class="size-8"/>
          break;
        case ArmType.Tablet:
          <DeviceTabletIcon class="size-8 rotate-[270deg]"/>
          break;
        case ArmType.Universal:
          <ServerIcon class="size-8"/>
          break;
        default:
          <ExclamationTriangleIcon class="size-8 text-destructive"/>
          break;
      }
    </div>
  }
  <div class="flex w-full flex-col px-3 justify-start">
    @if (LineContext.Line == null)
    {
      <Skeleton Class="w-32 h-6" />
      <Skeleton Class="w-32 h-6 mt-1" />
    }
    else
    {
      <span class="font-medium truncate">@LineContext.Line.Name</span>
      <span class="truncate">@LineContext.Line.Warehouse</span>
    }
  </div>
  <Button
    Class="shrink-0 border"
    OnClick="@ResetLine"
    Variant="ButtonVariant.Secondary"
  >
    <ArrowPathIcon class="size-4 mr-2"/>
    @Localizer["BtnUpdate"]
  </Button>
</div>

@code {
  [Inject] private LineContext LineContext { get; set; } = default!;
  [Inject] private PrinterService PrinterService { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Parameter] public bool WithReconnect { get; set; }

  protected override void OnInitialized() => LineContext.LineChanged += StateHasChanged;

  private async Task ResetLine()
  {
    await LineContext.UpdateArmData();
    PrinterService.Setup(LineContext.Printer?.Ip ?? new(0), 9100, LineContext.Printer?.Type ?? PrinterTypes.Zebra); // TODO: fix
    if (WithReconnect) await PrinterService.ConnectAsync();
  }

  public void Dispose() => LineContext.LineChanged -= StateHasChanged;
}