@using Blazor.Heroicons.Outline
@implements IAsyncDisposable

<div class="size-full flex flex-col items-center justify-center">
  @if (string.IsNullOrEmpty(BarcodeValue))
  {
  <div class="flex max-w-sm flex-col px-2 gap-1 items-center">
    <DocumentTextIcon class="size-14 stroke-1" />
    <div class="flex flex-col text-center gap-1">
      <h2 class="text-lg font-semibold">Отсканируйте штрихкода</h2>
      <p class="text-xs">
        Для создания паллеты необходимо отсканировать штрихкод продукции, по которой будет создана паллета
      </p>
    </div>
  </div>
  }
  else
  {
    <div class="size-full flex flex-col px-2">
      <div class="size-full items-center justify-center flex flex-col grow">
        <span class="text-sm">Значение штрихкода:</span>
        <span>@BarcodeValue</span>
      </div>
      <div class="w-full flex shrink-0 py-3 px-2">
        <Button OnClick="@OnSuccessAction" class="w-full">
          Продолжить
        </Button>
      </div>
    </div>
  }
</div>

@code {
  [Inject] private IJSRuntime JsRuntime { get; set; } = default!;

  [Parameter] public EventCallback OnSuccessAction { get; set; }

  private string BarcodeValue { get; set; } = string.Empty;
  private IJSObjectReference Module { get; set; } = default!;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;
    Module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./libs/handle-barcode.js");
    await Module.InvokeVoidAsync("initializeBarcodeEnterEvent", DotNetObjectReference.Create(this));
  }

  [JSInvokable("HandleInputEvent")]
  public void HandleInputEvent(string inputValue)
  {
    BarcodeValue = inputValue;
    StateHasChanged();
  }

  public async ValueTask DisposeAsync()
  {
    try
    {
      await Module.InvokeVoidAsync("removeBarcodeEnterEvent");
      await Module.DisposeAsync();
    }
    catch
    {
      // pass
    }
  }
}