@using System.Drawing
@inject IJSRuntime JsRuntime

<div
  tabindex="0"
  @ref="DivRef"
  @onblur="@CloseContextMenuAsync"
  class="@Css.Class("flex-col shadow-md rounded-md p-1 border bg-background overflow-hidden focus:outline-none", IsContextMenuOpen ? "fixed" : "hidden")"
  style="@($"left:{ContextMenuPos.X}px;top:{ContextMenuPos.Y}px;")"
>
  @ChildContent
</div>

@code {
  [Parameter] public RenderFragment? ChildContent { get; set; }
  [Parameter] public Point ContextMenuPos { get; set; }
  [Parameter] public bool IsContextMenuOpen { get; set; }
  [Parameter] public EventCallback<bool> IsContextMenuOpenChanged { get; set; }

  public ElementReference DivRef { get; private set; }
  private IJSObjectReference Module { get; set; } = null!;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;
    Module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./libs/focus-handler.js");
  }

  private async Task CloseContextMenuAsync(FocusEventArgs args)
  {
    if (ChildContent == null || IsContextMenuOpen == false) return;
    if (await Module.InvokeAsync<bool>("getIsNestedItem", DivRef)) return;
    IsContextMenuOpen = false;
    await IsContextMenuOpenChanged.InvokeAsync(IsContextMenuOpen);
  }
}