@using Ws.Domain.Models.ValueTypes
@using Blazor.Heroicons.Outline
@using Microsoft.Extensions.Localization
@using Ws.Labels.Service.Features.Generate.Models
@using Ws.Shared.Resources


<div class="@Css.Class("border gap-px rounded-md overflow-hidden bg-border grid grid-cols-[10rem_1fr_1fr_1fr_10rem_5rem] [&>div]:bg-background", Class)">
  <div class="h-10 w-full flex items-center truncate px-3">
    @WsDataLocalizer["ColSequence"]
  </div>
  <div class="h-10 w-full flex items-center truncate px-3">
    @WsDataLocalizer["ColName"]
  </div>
  <div class="h-10 w-full flex items-center truncate px-3">
    @WsDataLocalizer["ColType"]
  </div>
  <div class="h-10 w-full flex items-center truncate px-3">
    @WsDataLocalizer["ColMask"]
  </div>
  <div class="h-10 w-full flex items-center truncate px-3">
    @WsDataLocalizer["ColLength"]
  </div>
  <div></div>
  @if (!BarcodeDictionary.Any())
  {
    <div class="col-span-6 flex w-full h-10 items-center justify-center">
      @Localizer["BarcodeEditorEmptyPlaceholder"]
    </div>
  }
  @foreach ((BarcodeItem value, int index) in BarcodeDictionary.Select((value, index) => (value, index)))
  {
    <div class="size-full flex items-center px-3 text-sm">
      <div class="flex items-center w-full justify-between">
        @(index + 1)
        <div class="flex gap-px">
          <Button
            Variant="ButtonVariant.Ghost"
            Size="ButtonSize.Icon"
            OnClick="@(() => SwapItems(index, index - 1))"
            Disabled="@(index == 0)"
          >
            <ChevronUpIcon class="size-4"/>
          </Button>
          <Button
            Variant="ButtonVariant.Ghost"
            Size="ButtonSize.Icon"
            OnClick="@(() => SwapItems(index, index + 1))"
            Disabled="@(index == BarcodeDictionary.Count - 1)"
          >
            <ChevronDownIcon class="size-4"/>
          </Button>
        </div>
      </div>
    </div>
    <div>
      @if (value.IsConst)
      {
        <InputTextField
          @bind-Value="@value.Property"
          @bind-Value:after="@(() => value.Length = (ushort)value.Property.Length)"
          Placeholder="@Localizer["BarcodeEditorConstInputPlaceholder"]"
          Class="!border-none !rounded-none"
        />
      }
      else
      {
        <SelectSingle
          TItem="string"
          Items="@GetFilteredValues()"
          @bind-SelectedItem="@value.Property"
          @bind-SelectedItem:after="@(() => { value.Length = (ushort)(BarcodeVariables.FirstOrDefault(x => x.Name == value.Property)?.Length ?? 0); })"
          ItemDisplayName="@(item => string.IsNullOrEmpty(item) ? Localizer["BarcodeEditorVariableSelectPlaceholder"] : item)"
          Class="!border-none !rounded-none"
        />
      }
    </div>
    <div>
      <SelectSingle
        TItem="bool"
        Items="[true, false]"
        ItemDisplayName="@(item => item ? WsDataLocalizer["ColConst"] : WsDataLocalizer["ColVariable"])"
        @bind-SelectedItem="@value.IsConst"
        @bind-SelectedItem:after="@(() => { value.Property = string.Empty; value.Length = 0; })"
        Class="!border-none !rounded-none"
      />
    </div>
    <div class="!bg-background/[.8]">
      @if (BarcodeVariables.FirstOrDefault(x => x.Name == value.Property)?.Type == typeof(DateTime))
      {
        <InputTextField
          @bind-Value="@value.FormatStr"
          Placeholder="@Localizer["BarcodeEditorMaskPlaceholder"]"
          Class="!border-none !rounded-none !bg-background"
        />
      }
    </div>
    <div class="size-full flex items-center px-3 text-sm">
      @value.Length
    </div>
    <div class="size-full flex items-center justify-center">
      <Button Variant="ButtonVariant.Ghost" Size="ButtonSize.Icon" OnClick="@(() => DeleteBarcodeItem(index))">
        <TrashIcon class="size-5 text-destructive" />
      </Button>
    </div>
  }
</div>
<div class="flex w-full py-4 gap-2 justify-between items-center">
  <BarcodePreview
    BarcodeDictionary="BarcodeDictionary"
    BarcodeVariables="BarcodeVariables"
  />
  <div class="gap-2 flex">
    <Button Variant="ButtonVariant.Destructive" OnClick="@CleanBarcode">
      <TrashIcon class="size-5 md:mr-2"/>
      <span class="hidden md:block">@Localizer["BtnClear"]</span>
    </Button>
    <Button OnClick="@AddBarcodeItem">
      <PlusIcon class="size-5 md:mr-2"/>
      <span class="hidden md:block">@Localizer["BtnAdd"]</span>
    </Button>
  </div>
</div>

@code {
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Parameter] public IList<BarcodeItem> BarcodeDictionary { get; set; } = [];
  [Parameter] public EventCallback<IList<BarcodeItem>> BarcodeDictionaryChanged { get; set; }
  [Parameter] public string Class { get; set; } = string.Empty;
  [Parameter] public IList<BarcodeVariable> BarcodeVariables { get; set; } = [];

  private void DeleteBarcodeItem(int itemIndex) => BarcodeDictionary.RemoveAt(itemIndex);

  private void AddBarcodeItem() => BarcodeDictionary.Add(new());

  private void CleanBarcode() => BarcodeDictionary = [];

  private IEnumerable<string> GetFilteredValues()
  {
    IEnumerable<string> currentValues = BarcodeDictionary.Select(y => y.Property);
    return BarcodeVariables.Where(x => x.IsRepeatable || !currentValues.Contains(x.Name)).Select(x => x.Name);
  }

  private void SwapItems(int oldIndex, int newIndex) =>
    (BarcodeDictionary[oldIndex], BarcodeDictionary[newIndex]) = (BarcodeDictionary[newIndex], BarcodeDictionary[oldIndex]);
}
