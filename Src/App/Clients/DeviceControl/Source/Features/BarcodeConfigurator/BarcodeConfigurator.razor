@using Ws.Domain.Models.ValueTypes
@using Blazor.Heroicons.Outline
@using Ws.Labels.Service.Features.Generate.Models
@using Ws.Labels.Service.Features.Generate.Utils
@using Ws.Shared.Extensions


<div class="@Css.Class("border gap-px rounded-md overflow-hidden bg-border grid grid-cols-[10rem_1fr_1fr_1fr_10rem_5rem] [&>div]:bg-background", Class)">
  <div class="h-10 w-full flex items-center truncate px-3">
    Порядок
  </div>
  <div class="h-10 w-full flex items-center truncate px-3">
    Название
  </div>
  <div class="h-10 w-full flex items-center truncate px-3">
    Тип
  </div>
  <div class="h-10 w-full flex items-center truncate px-3">
    Маска
  </div>
  <div class="h-10 w-full flex items-center truncate px-3">
    Длина
  </div>
  <div></div>
  @if (!BarcodeDictionary.Any())
  {
    <div class="col-span-6 flex w-full h-10 items-center justify-center">
      Поля отсутствуют
    </div>
  }
  @foreach (var item in BarcodeDictionary.Select((x, i) => new { Value = x, Index = i }) )
  {
    <div class="size-full flex items-center px-3 text-sm">
      <div class="flex items-center w-full justify-between">
        @(item.Index + 1)
        <div class="flex gap-px">
          <Button
            Variant="ButtonVariant.Ghost"
            Size="ButtonSize.Icon"
            OnClick="@(() => SwapItems(item.Index, item.Index - 1))"
            Disabled="@(item.Index == 0)"
          >
            <ChevronUpIcon class="size-4"/>
          </Button>
          <Button
            Variant="ButtonVariant.Ghost"
            Size="ButtonSize.Icon"
            OnClick="@(() => SwapItems(item.Index, item.Index + 1))"
            Disabled="@(item.Index == BarcodeDictionary.Count - 1)"
          >
            <ChevronDownIcon class="size-4"/>
          </Button>
        </div>
      </div>
    </div>
    <div>
      @if (item.Value.IsConst)
      {
        <InputTextField
          @bind-Value="@item.Value.Property"
          @bind-Value:after="@(() => item.Value.Length = (ushort)item.Value.Property.Length)"
          Placeholder="Введите константу..."
          Class="!border-none !rounded-none"
        />
      }
      else
      {
        <SelectSingle
          TItem="string"
          Items="@GetFilteredValues()"
          @bind-SelectedItem="@item.Value.Property"
          @bind-SelectedItem:after="@(() => { item.Value.Length = (ushort)(BarcodeVariables.FirstOrDefault(x => x.Name == item.Value.Property)?.Length ?? 0); })"
          Placeholder="Выберите переменную..."
          Class="!border-none !rounded-none"
        />
      }
    </div>
    <div>
      <SelectSingle
        TItem="bool"
        Items="[true, false]"
        ItemDisplayName="@(x => x ? "Константа" : "Переменная")"
        @bind-SelectedItem="@item.Value.IsConst"
        @bind-SelectedItem:after="@(() => { item.Value.Property = string.Empty; item.Value.Length = 0; })"
        Class="!border-none !rounded-none"
      />
    </div>
    <div>
      @if (BarcodeVariables.FirstOrDefault(x => x.Name == item.Value.Property)?.Type == typeof(DateTime))
      {
        <InputTextField
          @bind-Value="@item.Value.FormatStr"
          Placeholder="Формат поля..."
          Class="!border-none !rounded-none"
        />
      }
    </div>
    <div class="size-full flex items-center px-3 text-sm">
      @item.Value.Length
    </div>
    <div class="size-full flex items-center justify-center">
      <Button Variant="ButtonVariant.Ghost" Size="ButtonSize.Icon" OnClick="@(() => DeleteBarcodeItem(item.Index))">
        <TrashIcon class="size-5 text-destructive" />
      </Button>
    </div>
  }
</div>
<div class="flex w-full pt-4 gap-2 justify-between">
  <div class="h-10 rounded-md px-0.5 overflow-hidden border">
    <ol class="flex items-center h-full divide-x">
      @foreach (BarcodeItem item in BarcodeDictionary)
      {
        <li class="h-full px-1.5 flex items-center">
          @if (BarcodeVariables.FirstOrDefault(x => x.Name == item.Property)?.Type == typeof(DateTime))
          {
            @if (item.FormatStr.IsDateFormat())
            {
              <span>@DateTime.Now.ToString(item.FormatStr)</span>
            }
            else
            {
              <span class="text-destructive">Ошибка</span>
            }
          }
          else if (item.IsConst)
          {
            <span>@item.Property</span>
          }
          else
          {
            Random random = new();
            @for (int i = 0; i < item.Length; i++)
            {
              <span>@random.Next(0, 10)</span>
            }
          }
        </li>
      }
    </ol>
  </div>
  <div class="gap-2 flex">
    <Button Variant="ButtonVariant.Destructive" OnClick="@CleanBarcode">
      <TrashIcon class="size-5 mr-2"/>
      Очистить
    </Button>
    <Button OnClick="@AddBarcodeItem">
      <PlusIcon class="size-5 mr-2"/>
      Добавить
    </Button>
  </div>
</div>

@code {
  [Parameter] public IList<BarcodeItem> BarcodeDictionary { get; set; } = [];
  [Parameter] public bool IsWeight { get; set; }
  [Parameter] public EventCallback<IList<BarcodeItem>> BarcodeDictionaryChanged { get; set; }
  [Parameter] public string Class { get; set; } = string.Empty;

  private IList<BarcodeVariable> BarcodeVariables { get; set; } = [];

  protected override void OnInitialized() =>
    BarcodeVariables = IsWeight ? TemplateTypesUtils.GetVariablesForWeightTemplate() : TemplateTypesUtils.GetVariablesForPieceTemplate();

  private void DeleteBarcodeItem(int itemIndex) => BarcodeDictionary.RemoveAt(itemIndex);

  private void AddBarcodeItem() => BarcodeDictionary.Add(new());

  private void CleanBarcode() => BarcodeDictionary = [];

  private IEnumerable<string> GetFilteredValues()
  {
    IEnumerable<string> currentValues = BarcodeDictionary.Select(y => y.Property);
    return BarcodeVariables.Where(x => x.IsRepeatable || !currentValues.Contains(x.Name)).Select(x => x.Name);
  }

  private void SwapItems(int oldIndex, int newIndex) =>
    (BarcodeDictionary[oldIndex], BarcodeDictionary[newIndex]) = (BarcodeDictionary[newIndex], BarcodeDictionary[oldIndex]);
}
