@using Blazor.Heroicons.Outline
@using MassaK.Plugin.Abstractions.Enums
@using Microsoft.FluentUI.AspNetCore.Components
@using ScalesDesktop.Source.Shared.Services

@implements IDisposable

<Button
  Size="ButtonSize.Icon"
  Variant="ButtonVariant.Outline"
  Class="relative !size-10"
  OnClick="PrintStatusMessage"
>
  <div class="@Css.Class("size-3 rounded-full shadow-sm overflow-hidden absolute -top-1 -right-1", GetIndicatorStyle)"></div>
  <ScaleIcon class="@Css.Class("size-6", GetIconStyle)"/>
</Button>

@code {
  [Inject] private ScalesService ScalesService { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  protected override void OnInitialized() => ScalesService.StatusChanged += StateHasChanged;

  private string GetIconStyle => ScalesService.Status switch
  {
    MassaKStatus.IsDisabled => "text-muted-foreground",
    MassaKStatus.IsDetached => "text-red-500",
    _ => "text-green-500"
  };

  private string GetIndicatorStyle => ScalesService.Status switch
  {
    MassaKStatus.IsDisabled => "bg-muted-foreground",
    MassaKStatus.IsDetached => "bg-red-500 animate-ping",
    _ => "bg-green-500"
  };

  private void PrintStatusMessage()
  {
    MassaKStatus scalesStatus = ScalesService.Status;
    switch (scalesStatus)
    {
      case MassaKStatus.IsDetached:
        ToastService.ShowError(Localizer["ScalesStatusDetached"]);
        break;
      case MassaKStatus.IsReady:
        ToastService.ShowSuccess(Localizer["ScalesStatusSuccess"]);
        break;
      case MassaKStatus.IsDisabled:
        ToastService.ShowWarning(Localizer["ScalesStatusDisabled"]);
        break;
      default:
        throw new ArgumentOutOfRangeException();
    }
  }

  public void Dispose() => ScalesService.StatusChanged -= StateHasChanged;
}