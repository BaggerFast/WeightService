@using Blazor.Heroicons.Outline
@using ScalesDesktop.Source.Shared.Services
@using Ws.Domain.Models.Enums
@implements IDisposable

<div class="flex justify-between items-center w-full">
  <div class="h-16 px-4 shrink-0 rounded-full flex items-center justify-center overflow-hidden bg-secondary">
    @switch (LineContext.Line.Type)
    {
      case ArmTypes.Pc:
        <ComputerDesktopIcon class="size-8"/>
        break;
      case ArmTypes.Tablet:
        <DeviceTabletIcon class="size-8 rotate-[270deg]"/>
        break;
      case ArmTypes.Universal:
        <ServerIcon class="size-8"/>
        break;
      default:
        <ExclamationTriangleIcon class="size-8 text-destructive"/>
        break;
    }
  </div>
  <div class="flex w-full flex-col px-3 justify-start">
    <span class="font-medium truncate">@LineContext.Line.Name</span>
    <span class="truncate">@LineContext.Line.Warehouse.Name</span>
  </div>
  <Button
    Class="shrink-0 border"
    OnClick="@ResetLine"
    Variant="ButtonVariant.Secondary"
  >
    <ArrowPathIcon class="size-4 mr-2"/>
    @Localizer["BtnUpdate"]
  </Button>
</div>

@code {
  [Inject] private LineContext LineContext { get; set; } = default!;
  [Inject] private PrinterService PrinterService { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Parameter] public bool WithReconnect { get; set; }

  protected override void OnInitialized() => LineContext.LineChanged += StateHasChanged;

  private async Task ResetLine()
  {
    LineContext.ResetLine();
    PrinterService.Setup(LineContext.Printer.Ip, 9100, LineContext.Printer.Type);
    if (WithReconnect) await PrinterService.ConnectAsync();
  }

  public void Dispose() => LineContext.LineChanged -= StateHasChanged;
}