@using Blazor.Heroicons.Outline
@using ScalesDesktop.Source.Features
@using ScalesDesktop.Source.Features.PluSelectDialog
@using ScalesDesktop.Source.Shared.Services
@using Microsoft.FluentUI.AspNetCore.Components
@using Ws.Domain.Models.Entities.Ref1c.Plu
@implements IDisposable

<div class="w-full h-full flex flex-col overflow-hidden">
  <div class="flex flex-col overflow-hidden items-start h-12 shrink-0 justify-center w-full px-6 border-b xl:px-8">
    <h2 class="text-xl line-clamp-1 text-center xl:text-2xl">
      @Localizer["LabelConfigHeader"]
    </h2>
  </div>
  <div class="flex flex-col w-full h-full pt-2 pb-5 px-6 overflow-hidden justify-around xl:px-8 xl:pt-4 xl:pb-7">
    <div class="w-full h-full overflow-hidden flex flex-col gap-2">
      <div class="w-full h-14 shrink-0">
        <Button
          Size="ButtonSize.Full"
          Variant="ButtonVariant.Outline"
          OnClick="@ShowPluSelectDialog"
          Disabled="@LabelContext.Line.IsNew"
        >
          <div class="size-full text-xl font-normal px-5 flex items-center justify-between">
            <span class="pb-1 truncate">
              @(LabelContext.Plu.IsNew ? Localizer["DisplayPluSelectWarning"] : LabelContext.Plu.DisplayName)
            </span>
            <ChevronDownIcon class="size-5"/>
          </div>
        </Button>
      </div>
      @if (LabelContext.Plu.IsNew)
      {
        <UnselectedPluWarning />
      }
      else
      {
        <PluDescription Plu="@LabelContext.Plu" />
      }
    </div>
    <LineControl />
  </div>
</div>

@code {

  # region Injects

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IDialogService DialogService { get; set; } = default!;
  [Inject] private LabelContext LabelContext { get; set; } = default!;

  # endregion

  protected override void OnInitialized() => LabelContext.OnStateChanged += StateHasChanged;

  private async Task ShowPluSelectDialog()
  {
    PluDialogContent data = new() { Data = LabelContext.PluEntities.AsQueryable() };
    IDialogReference dialog = await DialogService.ShowDialogAsync<PluSelectDialog>(data, new());
    DialogResult result = await dialog.Result;
    if (result is { Cancelled: false, Data: Plu pluEntity })
      LabelContext.ChangePlu(pluEntity);
  }

  public void Dispose() => LabelContext.OnStateChanged -= StateHasChanged;

}