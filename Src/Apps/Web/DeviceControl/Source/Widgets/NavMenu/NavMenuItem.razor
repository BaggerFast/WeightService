@using Blazor.Heroicons
@implements IDisposable

<AuthorizeView Policy="@(RequiredClaim)">
  <ChildContent Context="main">
    <div data-state="@(IsOpened ? "open" : "closed")">
      <button
        type="button"
        @onclick="SwitchVisibility"
        class="@Css.Class("w-full gap-2 px-2 py-1.5 flex items-center transition-colors justify-between rounded-md", GetIsAnyActive() ? "font-medium hover:bg-secondary/[.5] text-primary" : "text-muted-foreground hover:bg-secondary/[.5] hover:text-accent-foreground/[.8]")"
      >
        <div class="flex gap-2 items-center overflow-hidden">
          <Heroicon
            Name="@Icon"
            Type="HeroiconType.Outline"
            class="size-5 shrink-0"
          />
          <span class="truncate">
            @Label
          </span>
        </div>
        <Heroicon
          Name="@(IsOpened ? HeroiconName.ChevronUp : HeroiconName.ChevronDown)"
          Type="HeroiconType.Outline"
          class="size-4 shrink-0"
        />
      </button>
      <ul class="@Css.Class("flex flex-col border-s ml-4 pl-2 transition-colors", IsOpened ? "visible py-1.5" : "invisible h-0 overflow-hidden", GetIsAnyActive() ? "border-s-accent-foreground/[.4]" : "")">
        @foreach (NavMenuItemModel item in Items)
        {
          <AuthorizeView Policy="@(item.Claim)">
            <ChildContent>
              <li>
                <a href="@item.Link">
                  <button
                    type="button"
                    class="@Css.Class("px-3 py-1.5 w-full flex items-center truncate transition-colors rounded-md", GetIsActivePath(item.Link) ?
                             "font-medium bg-secondary text-primary" : "text-muted-foreground hover:bg-secondary/[.5] hover:text-accent-foreground/[.8]")">
                    @item.Name
                  </button>
                </a>
              </li>
            </ChildContent>
          </AuthorizeView>
        }
      </ul>
    </div>
  </ChildContent>
</AuthorizeView>

@code {
  [Inject] private NavigationManager NavigationManager { get; set; } = default!;

  [Parameter, EditorRequired] public string Label { get; set; } = string.Empty;
  [Parameter, EditorRequired] public string Icon { get; set; } = HeroiconName.Home;
  [Parameter, EditorRequired] public NavMenuItemModel[] Items { get; set; } = [];
  [Parameter, EditorRequired] public string RequiredClaim { get; set; } = string.Empty;

  private bool IsOpened { get; set; }
  private bool IsProduction { get; set; }

  protected override void OnInitialized()
  {
    NavigationManager.LocationChanged += HandleLocationChanged;
    IsProduction = !ConfigurationUtils.IsDevelop;
    IsOpened = GetIsAnyActive();
  }

  private bool GetIsActivePath(string relativePath)
  {
    string currentUri = NavigationManager.Uri;
    string uriToCheck = GetAbsolutePath(relativePath);
    bool startsWithFullPath = currentUri.StartsWith(uriToCheck, StringComparison.OrdinalIgnoreCase);
    bool isExactMatchOrSubpath = currentUri.Length >= uriToCheck.Length &&
                                 (currentUri.Length == uriToCheck.Length || currentUri[uriToCheck.Length] == '/');
    return startsWithFullPath && isExactMatchOrSubpath;
  }

  private void HandleLocationChanged(object? sender, LocationChangedEventArgs e) => StateHasChanged();

  private string GetAbsolutePath(string relativePath) =>
    new Uri(new(NavigationManager.BaseUri), relativePath).ToString();

  private bool GetIsAnyActive() => Items.Any(item => GetIsActivePath(item.Link));

  private void SwitchVisibility() => IsOpened = !IsOpened;

  public void Dispose() => NavigationManager.LocationChanged -= HandleLocationChanged;
}
