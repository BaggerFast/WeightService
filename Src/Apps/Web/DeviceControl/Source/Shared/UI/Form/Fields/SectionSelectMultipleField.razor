@typeparam TItem
@inherits SectionFieldBase<ISet<TItem>>

<SectionInputWrapper Path="@Path" Label="@Label" HtmlFor="@HtmlId">
  <SelectMultiple
    TItem="TItem"
    Items="Items"
    HtmlId="@HtmlId"
    @bind-SelectedItems="@Value"
    @bind-SelectedItems:after="OnValueChanged"
    EmptyPlaceholder="@EmptyPlaceholder"
    SearchPlaceholder="@SearchPlaceholder"
    IsFilterable="IsFilterable"
    ItemDisplayName="@ItemDisplayName"
    IsDisabled="Disabled"
  />
  @if (For != null)
  {
    <FieldValidation For="@For" />
  }
</SectionInputWrapper>

@code {
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Parameter] public ISet<TItem> Items { get; set; } = new HashSet<TItem>();
  [Parameter] public bool IsFilterable { get; set; }
  [Parameter] public string EmptyPlaceholder { get; set; } = string.Empty;
  [Parameter] public string SearchPlaceholder { get; set; } = string.Empty;
  [Parameter] public Func<TItem,string> ItemDisplayName { get; set; } = item => item!.ToString()!;


  protected override void OnInitialized()
  {
    base.OnInitialized();
    EmptyPlaceholder = string.IsNullOrWhiteSpace(EmptyPlaceholder) ? Localizer["FormSelectEmptyDefaultPlaceholder"] : Placeholder;
    SearchPlaceholder = string.IsNullOrWhiteSpace(SearchPlaceholder) ? Localizer["FormSelectSearchDefaultPlaceholder"] : Placeholder;
  }

}