@using Ws.DeviceControl.Models.Dto.Shared
@using Ws.DeviceControl.Models.Dto.Devices.Arms.Commands.Create
@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Blazor.Heroicons.Outline

@inherits SectionFormBase<ArmCreateDto>

<SectionForm
  FormModel="@FormModel"
  Validator="@(new ArmCreateValidator(WsDataLocalizer))"
  OnCancelAction="@OnCancelAction"
  OnSubmitAction="@CreateItem"
>
  <FieldsContent>
    <SectionInputWrapper Label="@WsDataLocalizer["ColNumber"]" HtmlFor="arm-number">
      <div class="w-full items-center flex gap-2">
        <InputNumberField
          id="arm-number"
          Min="10000"
          Max="99999"
          @bind-Value="@FormModel.Number"
        />
        <Button
          Size="ButtonSize.Icon"
          Variant="ButtonVariant.Outline"
          Class="shrink-0 !size-10"
          OnClick="@GenerateArmNumber"
        >
          <ArrowPathIcon class="size-5" />
        </Button>
      </div>
      <FieldValidation For="@(() => FormModel.Number)"/>
    </SectionInputWrapper>

    <SectionTextField
      Label="@WsDataLocalizer["ColName"]"
      @bind-Value="@FormModel.Name"
      For="@(() => FormModel.Name)"
      MaxLength="32"
    />

    <SectionSelectSingleField
      TItem="ArmType"
      Label="@WsDataLocalizer["ColType"]"
      Items="LineTypes"
      @bind-Value="@FormModel.Type"
      ItemDisplayName="item => Localizer[EnumHelper.GetEnumDescription(item)]"
      For="@(() => FormModel.Type)"
    />

    <FormDivider>@WsDataLocalizer["ColDevice"]</FormDivider>

    <SectionTextField
      Label="@WsDataLocalizer["ColPcName"]"
      @bind-Value="@FormModel.PcName"
      For="@(() => FormModel.PcName)"
      MaxLength="16"
    />

    <UseEndpoint
      Endpoint="@DevicesEndpoints.ProxyPrintersEndpoint"
      Arg="ProductionSiteState.Value.ProductionSite.Uid"
      Context="printersQuery"
    >
      @if (printersQuery.HasData)
      {
        <SectionInputWrapper
          Path="@(FormModel.PrinterId != Guid.Empty ? Redirector.ToPrinterPath(FormModel.PrinterId, UserPrincipal) : string.Empty)"
          Label="@WsDataLocalizer["ColPrinter"]"
        >
          <SelectSingle
            TItem="ProxyDto?"
            Items="printersQuery.Data"
            SelectedItem="@printersQuery.Data.SingleOrDefault(x => x.Id == FormModel.PrinterId)"
            SelectedItemChanged="@(value => FormModel.PrinterId = value?.Id ?? Guid.Empty)"
            Placeholder="@Localizer["FormPrinterDefaultPlaceholder"]"
            EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
            SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
            ItemDisplayName="@(item => item!.Name)"
            IsFilterable
          />
          <FieldValidation For="@(() => FormModel.PrinterId)" />
        </SectionInputWrapper>
      }
      else
      {
        <Skeleton class="h-10 w-full" />
      }
    </UseEndpoint>

    <FormDivider>@Localizer["FieldLocation"]</FormDivider>

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColProductionSite"]"
      Value="@ProductionSiteState.Value.ProductionSite.Name"
      Path="@Redirector.ToPath(ProductionSiteState.Value.ProductionSite, UserPrincipal)"
    />

    <UseEndpoint
      Endpoint="@ReferencesEndpoints.ProxyWarehousesEndpoint"
      Arg="ProductionSiteState.Value.ProductionSite.Uid"
      Context="warehousesQuery"
    >
      @if (warehousesQuery.HasData)
      {
        <SectionInputWrapper
          Path="@(FormModel.WarehouseId != Guid.Empty ? Redirector.ToWarehousePath(FormModel.WarehouseId, UserPrincipal) : string.Empty)"
          Label="@WsDataLocalizer["ColWarehouse"]"
        >
          <SelectSingle
            TItem="ProxyDto?"
            Items="warehousesQuery.Data"
            SelectedItem="@warehousesQuery.Data.SingleOrDefault(x => x.Id == FormModel.WarehouseId)"
            SelectedItemChanged="@(value => FormModel.WarehouseId = value?.Id ?? Guid.Empty)"
            Placeholder="@Localizer["FormWarehouseDefaultPlaceholder"]"
            EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
            SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
            ItemDisplayName="@(item => item!.Name)"
            IsFilterable
          />
          <FieldValidation For="@(() => FormModel.WarehouseId)" />
        </SectionInputWrapper>
      }
      else
      {
        <Skeleton class="h-10 w-full" />
      }
    </UseEndpoint>
  </FieldsContent>
</SectionForm>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private DevicesEndpoints DevicesEndpoints { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;
  [Inject] private Redirector Redirector { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  # endregion

  private IEnumerable<ArmType> LineTypes { get; } = Enum.GetValues(typeof(ArmType)).Cast<ArmType>().ToList();

  protected override async Task CreateItemAction(ArmCreateDto item) =>
    DevicesEndpoints.AddArm(ProductionSiteState.Value.ProductionSite.Uid, await WebApi.CreateArm(item));

  private void GenerateArmNumber() => FormModel.Number = new Random().Next(10001, 100000);
}
