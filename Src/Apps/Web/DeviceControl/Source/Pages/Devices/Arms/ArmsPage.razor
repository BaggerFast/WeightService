@using Blazor.Heroicons.Outline
@using DeviceControl.Source.Features
@using DeviceControl.Source.Shared.Api.Web.Endpoints
@using DeviceControl.Source.Shared.Constants
@using DeviceControl.Source.Shared.Services.Stores
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Features.Devices.Arms.Queries
@inherits SectionDataGridBase<ArmDto>
@attribute [Route(Urls.Lines)]
@attribute [Authorize(Policy = PolicyEnum.Support)]
@rendermode InteractiveServer

<PageTitle>DeviceControl - @Localizer["SectionLines"]</PageTitle>

<UserProductionSiteErrorSuspense>
  <UseEndpoint
    Endpoint="@DevicesEndpoints.ArmsEndpoint"
    Arg="@ProductionSiteState.Value.ProductionSite.Id"
    Options="@DefaultEndpointOptions"
    Context="armsQuery"
  >
    <Breadcrumbs Class="!pb-5">
      <Breadcrumb Label="Линия" Link="@Urls.Lines" />
    </Breadcrumbs>

    <DataGridHeader>
      <DataGridLabelWithCounter Label="@Localizer["SectionLines"]" ItemsCount="@(armsQuery.Data?.Length ?? 0)" IsLoading="armsQuery.IsLoading"/>
      <DataGridActionReload OnClick="@armsQuery.RefetchAsync" IsLoading="armsQuery.IsFetching" />
      <AuthorizeView Policy="@PolicyEnum.SeniorSupport">
        <DataGridActionCreate OnClick="@OpenCreateFormModal"/>
      </AuthorizeView>
    </DataGridHeader>

    <DataGridContainer
      TItem="ArmDto"
      Items="@(armsQuery.HasData ? armsQuery.Data : [])"
      OnItemSelect="@(item => OpenItemInNewTab(item))"
      IsFilterable
    >
      <ColumnsContent>
        <DataGridColumn
          Field="@(nameof(ArmDto.Type))"
          Caption="@WsDataLocalizer["ColType"]"
          Width="7%"
          Filterable="false"
        >
          <DisplayTemplate>
            @switch (context.Type)
            {
              case ArmType.Pc:
                <ComputerDesktopIcon class="size-5"/>
                break;
              case ArmType.Tablet:
                <DeviceTabletIcon class="size-5"/>
                break;
              case ArmType.Universal:
                <ServerIcon class="size-5"/>
                break;
              default:
                <ExclamationTriangleIcon class="size-5 text-destructive"/>
                break;
            }
          </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn
          Caption="@WsDataLocalizer["ColVersion"]"
          Field="@nameof(ArmDto.Version)"
          Width="2rem"
          Filterable="false"
        />
        <DataGridColumn
          Caption="@WsDataLocalizer["ColLine"]"
          Field="@nameof(ArmDto.Name)"
          Width="20%"
        />
        <DataGridColumn
          Caption="@WsDataLocalizer["ColPrinter"]"
          Field="Printer.Name"
          Width="20%"
        />
        <DataGridColumn
          Caption="@WsDataLocalizer["ColWarehouse"]"
          Field="@($"{nameof(ArmDto.Warehouse)}.{nameof(ProxyDto.Name)}")"
          Width="20%"
        >
        </DataGridColumn>
        <DataGridColumn
          Caption="@WsDataLocalizer["ColProductionSite"]"
          Field="@($"{nameof(ArmDto.ProductionSite)}.{nameof(ProxyDto.Name)}")"
          Width="20%"
          FilterCellClass="!font-normal"
        >
          <FilterTemplate>
            <ProductionSiteSelect />
          </FilterTemplate>
        </DataGridColumn>
      </ColumnsContent>
      <ContextMenuContent>
        <DataGridActionViewItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => OpenUpdateFormModal(item)))" />
        <DataGridActionOpenInNewTab OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => OpenItemInNewTab(item)))" />
        <AuthorizeView Policy="@PolicyEnum.SeniorSupport" Context="authContext">
          <DataGridActionDeleteItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => DeleteItem(item)))" />
        </AuthorizeView>
      </ContextMenuContent>
    </DataGridContainer>
  </UseEndpoint>
</UserProductionSiteErrorSuspense>

@code {
  #region Inject

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private DevicesEndpoints DevicesEndpoints { get; set; } = default!;
  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  #endregion

  protected override async Task OpenCreateFormModal() =>
    await OpenModal<ArmsCreateDialog>();

  protected override async Task OpenUpdateFormModal(ArmDto item) =>
    await OpenModalWithItem<ArmsUpdateDialog>(item);

  protected override async Task OpenItemInNewTab(ArmDto item) =>
    await OpenLinkInNewTab($"{Urls.Lines}/{item.Id}");

  protected override Task<ArmDto> SearchByUidAction(Guid uid) =>
    WebApi.GetArmByUid(uid);

  protected override async Task DeleteItemAction(ArmDto item)
  {
    await WebApi.DeleteArm(item.Id);
    DevicesEndpoints.DeleteArm(item.ProductionSite.Id, item.Id);
  }
}
