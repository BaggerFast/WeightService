@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Dto.Shared
@using Ws.DeviceControl.Models.Dto.Devices.Arms.Commands.Update
@using Ws.DeviceControl.Models.Dto.Devices.Arms.Queries

@inherits SectionFormBase<ArmUpdateDto>

<SectionForm
  FormModel="@FormModel"
  ChangeDate="@Model.ChangeDt"
  CreateDate="@Model.CreateDt"
  Validator="@(new ArmUpdateValidator(WsDataLocalizer))"
  OnCancelAction="@OnCancelAction"
  OnSubmitAction="@UpdateItem"
>
  <FieldsContent>
    <SectionAdminGuidField Value="@Model.Id" />

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColVersion"]"
      Value="@Model.Version"
    />

    <SectionNumericField
      Label="@WsDataLocalizer["ColNumber"]"
      @bind-Value="@FormModel.Number"
      Min="10000"
      Max="99999"
      For="@(() => FormModel.Number)"
      Disabled="IsOnlyView"
    />

    <SectionTextField
      Label="@WsDataLocalizer["ColName"]"
      @bind-Value="@FormModel.Name"
      For="@(() => FormModel.Name)"
      MaxLength="32"
      Disabled="IsOnlyView"
    />

    <SectionNumericField
      Label="@WsDataLocalizer["ColCounter"]"
      @bind-Value="@(FormModel.Counter)"
      Min="0"
      For="@(() => FormModel.Counter)"
      Disabled="IsOnlyView"
    />

    <SectionSelectSingleField
      TItem="ArmType"
      Label="@WsDataLocalizer["ColType"]"
      Items="LineTypes"
      @bind-Value="@FormModel.Type"
      ItemDisplayName="item => Localizer[EnumHelper.GetEnumDescription(item)]"
      For="@(() => FormModel.Type)"
      Disabled="IsOnlyView"
    />

    <FormDivider>@WsDataLocalizer["ColDevice"]</FormDivider>

    <SectionTextField
      Label="@WsDataLocalizer["ColPcName"]"
      @bind-Value="@FormModel.PcName"
      For="@(() => FormModel.PcName)"
      Disabled="IsOnlyView"
      MaxLength="16"
    />

    <SectionInputWrapper
      Path="@(FormModel.PrinterId != Guid.Empty ? Redirector.ToPrinterPath(FormModel.PrinterId, UserPrincipal) : string.Empty)"
      Label="@WsDataLocalizer["ColPrinter"]"
    >
      <UseEndpoint
        Endpoint="@DevicesEndpoints.ProxyPrintersEndpoint"
        Arg="@ProductionSiteState.Value.ProductionSite.Id"
        Context="printersQuery"
      >
        @if (printersQuery.HasData)
        {
          <SelectSingle
            TItem="ProxyDto?"
            Items="printersQuery.Data"
            SelectedItem="@printersQuery.Data.SingleOrDefault(x => x.Id == FormModel.PrinterId)"
            SelectedItemChanged="@(value => FormModel.PrinterId = value?.Id ?? Guid.Empty)"
            Placeholder="@Localizer["FormPrinterDefaultPlaceholder"]"
            EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
            SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
            ItemDisplayName="@(item => item!.Name)"
            IsFilterable
          />
        }
        else
        {
          <Skeleton class="h-10 w-full" />
        }
      </UseEndpoint>
      <FieldValidation For="@(() => FormModel.PrinterId)" />
    </SectionInputWrapper>

    <FormDivider>@Localizer["FieldLocation"]</FormDivider>

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColProductionSite"]"
      Value="@ProductionSiteState.Value.ProductionSite.Name"
      Path="@Redirector.ToProductionPath(ProductionSiteState.Value.ProductionSite.Id, UserPrincipal)"
    />

    <SectionInputWrapper
      Path="@(FormModel.WarehouseId != Guid.Empty ? Redirector.ToWarehousePath(FormModel.WarehouseId, UserPrincipal) : string.Empty)"
      Label="@WsDataLocalizer["ColWarehouse"]"
    >
      <UseEndpoint
        Endpoint="@ReferencesEndpoints.ProxyWarehousesEndpoint"
        Arg="@ProductionSiteState.Value.ProductionSite.Id"
        Context="warehousesQuery"
      >
        @if (warehousesQuery.HasData)
        {
          <SelectSingle
            TItem="ProxyDto?"
            Items="warehousesQuery.Data"
            SelectedItem="@warehousesQuery.Data.SingleOrDefault(x => x.Id == FormModel.WarehouseId)"
            SelectedItemChanged="@(value => FormModel.WarehouseId = value?.Id ?? Guid.Empty)"
            Placeholder="@Localizer["FormWarehouseDefaultPlaceholder"]"
            EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
            SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
            ItemDisplayName="@(item => item!.Name)"
            IsFilterable
          />
        }
        else
        {
          <Skeleton class="h-10 w-full" />
        }
      </UseEndpoint>
      <FieldValidation For="@(() => FormModel.WarehouseId)" />
    </SectionInputWrapper>
  </FieldsContent>
  <ActionsContent>
    <SectionFormActionShare Path="@($"{RouteUtils.SectionLines}?id={Model.Id}")" />
    @if (IsOnlyView == false)
    {
      <SectionFormActionReset OnClick="@ResetAction" />
      <SectionFormActionDelete OnClick="@DeleteItem" />
    }
  </ActionsContent>
</SectionForm>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private Redirector Redirector { get; set; } = default!;
  [Inject] private IAuthorizationService AuthorizationService { get; set; } = default!;
  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private DevicesEndpoints DevicesEndpoints { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  # endregion

  [CascadingParameter] private ProxyDto UserProductionSite { get; set; } = default!;
  [Parameter, EditorRequired] public ArmDto Model { get; set; } = default!;

  private IEnumerable<ArmType> LineTypes { get; } = Enum.GetValues(typeof(ArmType)).Cast<ArmType>().ToList();
  private bool IsOnlyView { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    bool isSeniorSupport = (await AuthorizationService.AuthorizeAsync(UserPrincipal, PolicyEnum.SeniorSupport)).Succeeded;
    IsOnlyView = !isSeniorSupport && !UserProductionSite.Equals(ProductionSiteState.Value.ProductionSite);
  }

  protected override async Task UpdateItemAction(ArmUpdateDto item)
  {
    ArmDto dto = await WebApi.UpdateArm(Model.Id, item);
    DevicesEndpoints.UpdateArm(ProductionSiteState.Value.ProductionSite.Id, dto);
  }

  protected override async Task DeleteItemAction()
  {
    await WebApi.DeleteArm(Model.Id);
    DevicesEndpoints.DeleteArm(ProductionSiteState.Value.ProductionSite.Id, Model.Id);
  }
}
