@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Dto.Devices.Arms.Commands.Update
@using Ws.DeviceControl.Models.Dto.Devices.Arms.Queries
@using Ws.DeviceControl.Models.Dto.Shared

@inherits DeviceControl.Source.Shared.UI.Form.SectionFormBase<ArmUpdateDto>

<UseParameterlessEndpoint
  Endpoint="ReferencesEndpoints.ProxyUserProductionSiteEndpoint"
  Context="userProductionSiteQuery"
>
  @{ bool isOnlyView = !IsSeniorSupport && Model.ProductionSite.Id == userProductionSiteQuery.Data?.Id; }
  <SectionForm
    FormModel="@FormModel"
    ChangeDate="@Model.ChangeDt"
    CreateDate="@Model.CreateDt"
    Validator="@(new ArmUpdateValidator(WsDataLocalizer))"
    OnCancelAction="@OnCancelAction"
    OnSubmitAction="@UpdateItem"
  >
    <FieldsContent>
      <SectionAdminGuidField Value="@Model.Id" />

      <SectionReadOnlyField
        Label="@WsDataLocalizer["ColVersion"]"
        Value="@Model.Version"
      />

      <SectionNumericField
        Label="@WsDataLocalizer["ColNumber"]"
        @bind-Value="@FormModel.Number"
        Min="10000"
        Max="99999"
        For="@(() => FormModel.Number)"
        Disabled="isOnlyView"
      />

      <SectionTextField
        Label="@WsDataLocalizer["ColName"]"
        @bind-Value="@FormModel.Name"
        For="@(() => FormModel.Name)"
        MaxLength="32"
        Disabled="isOnlyView"
      />

      <SectionNumericField
        Label="@WsDataLocalizer["ColCounter"]"
        @bind-Value="@(FormModel.Counter)"
        Min="0"
        For="@(() => FormModel.Counter)"
        Disabled="isOnlyView"
      />

      <SectionSelectSingleField
        TItem="ArmType"
        Label="@WsDataLocalizer["ColType"]"
        Items="LineTypes"
        @bind-Value="@FormModel.Type"
        ItemDisplayName="item => Localizer[EnumUtils.GetEnumDescription(item)]"
        For="@(() => FormModel.Type)"
        Disabled="isOnlyView"
      />

      <FormDivider>@WsDataLocalizer["ColDevice"]</FormDivider>

      <SectionTextField
        Label="@WsDataLocalizer["ColPcName"]"
        @bind-Value="@FormModel.PcName"
        For="@(() => FormModel.PcName)"
        Disabled="isOnlyView"
        MaxLength="16"
      />

      <SectionInputWrapper
        Path="@(FormModel.PrinterId != Guid.Empty ? Redirector.ToPrinterPath(FormModel.PrinterId, UserPrincipal) : string.Empty)"
        Label="@WsDataLocalizer["ColPrinter"]"
        HtmlFor="arms-printer"
      >
        <UseEndpoint
          Endpoint="@DevicesEndpoints.ProxyPrintersEndpoint"
          Arg="@Model.ProductionSite.Id"
          Context="printersQuery"
        >
          @if (printersQuery.HasData)
          {
            <SelectSingle
              TItem="ProxyDto"
              HtmlId="arms-printer"
              Items="printersQuery.Data"
              Value="@printersQuery.Data.SingleOrDefault(x => x.Id == FormModel.PrinterId)"
              ValueChanged="@(value => FormModel.PrinterId = value?.Id ?? Guid.Empty)"
              Placeholder="@Localizer["FormPrinterDefaultPlaceholder"]"
              EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
              SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
              ItemDisplayName="@(item => item.Name)"
              Filterable
            />
          }
          else
          {
            <Skeleton class="h-10 w-full" />
          }
        </UseEndpoint>
        <FieldValidation For="@(() => FormModel.PrinterId)" />
      </SectionInputWrapper>

      <FormDivider>@Localizer["FieldLocation"]</FormDivider>

      <SectionReadOnlyField
        Label="@WsDataLocalizer["ColProductionSite"]"
        Value="@Model.ProductionSite.Name"
        Path="@Redirector.ToProductionPath(Model.ProductionSite.Id, UserPrincipal)"
      />

      <SectionInputWrapper
        Path="@(FormModel.WarehouseId != Guid.Empty ? Redirector.ToWarehousePath(FormModel.WarehouseId, UserPrincipal) : string.Empty)"
        Label="@WsDataLocalizer["ColWarehouse"]"
        HtmlFor="arm-warehouse"
      >
        <UseEndpoint
          Endpoint="@ReferencesEndpoints.ProxyWarehousesEndpoint"
          Arg="@Model.ProductionSite.Id"
          Context="warehousesQuery"
        >
          @if (warehousesQuery.HasData)
          {
            <SelectSingle
              TItem="ProxyDto"
              HtmlId="arm-warehouse"
              Items="warehousesQuery.Data"
              Value="@warehousesQuery.Data.SingleOrDefault(x => x.Id == FormModel.WarehouseId)"
              ValueChanged="@(value => FormModel.WarehouseId = value?.Id ?? Guid.Empty)"
              Placeholder="@Localizer["FormWarehouseDefaultPlaceholder"]"
              EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
              SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
              ItemDisplayName="@(item => item.Name)"
              Filterable
            />
          }
          else
          {
            <Skeleton class="h-10 w-full" />
          }
        </UseEndpoint>
        <FieldValidation For="@(() => FormModel.WarehouseId)" />
      </SectionInputWrapper>
    </FieldsContent>
    <ActionsContent>
      <SectionFormActionShare Path="@($"{RouteUtils.SectionLines}?id={Model.Id}")" />
      @if (!isOnlyView)
      {
        <SectionFormActionReset OnClick="@ResetAction" />
        <SectionFormActionDelete OnClick="@DeleteItem" />
      }
    </ActionsContent>
  </SectionForm>
</UseParameterlessEndpoint>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private Redirector Redirector { get; set; } = default!;
  [Inject] private IAuthorizationService AuthorizationService { get; set; } = default!;
  [Inject] private DevicesEndpoints DevicesEndpoints { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public ArmDto Model { get; set; } = default!;

  private IEnumerable<ArmType> LineTypes { get; } = Enum.GetValues(typeof(ArmType)).Cast<ArmType>().ToList();
  private bool IsSeniorSupport { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    IsSeniorSupport = (await AuthorizationService.AuthorizeAsync(UserPrincipal, PolicyEnum.SeniorSupport)).Succeeded;
  }

  protected override async Task UpdateItemAction(ArmUpdateDto item)
  {
    ArmDto dto = await WebApi.UpdateArm(Model.Id, item);
    DevicesEndpoints.UpdateArm(Model.ProductionSite.Id, dto);
  }

  protected override async Task DeleteItemAction()
  {
    await WebApi.DeleteArm(Model.Id);
    DevicesEndpoints.DeleteArm(Model.ProductionSite.Id, Model.Id);
  }
}
