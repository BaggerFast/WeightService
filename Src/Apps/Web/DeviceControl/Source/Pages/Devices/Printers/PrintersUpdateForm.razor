@using DeviceControl.Source.Shared.Services
@using TscZebra.Plugin.Abstractions.Enums
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Dto.Devices.Printers.Commands.Update
@using Ws.DeviceControl.Models.Dto.Devices.Printers.Queries
@using Ws.DeviceControl.Models.Dto.Shared
@inherits SectionFormBase<PrinterUpdateDto>

<SectionForm
  FormModel="@FormModel"
  ChangeDate="@Model.ChangeDt"
  CreateDate="@Model.CreateDt"
  Validator="@(new PrinterUpdateValidator(WsDataLocalizer))"
  OnCancelAction="@OnCancelAction"
  OnSubmitAction="@UpdateItem"
>
  <FieldsContent>
    <SectionAdminGuidField Value="@Model.Id" />

    <SectionTextField
      Label="@WsDataLocalizer["ColName"]"
      @bind-Value="FormModel.Name"
      For="@(() => FormModel.Name)"
      Disabled="IsOnlyView"
    />

    <SectionIpField
      Label="@($"IP ({Localizer["FormPrinterControl"]})")"
      @bind-Value="@FormModel.Ip"
      For="@(() => FormModel.Ip)"
      Path="@($"http://{FormModel.Ip}")"
      Disabled="IsOnlyView"
    />

    <SectionSelectSingleField
      TItem="PrinterTypes"
      Label="@WsDataLocalizer["ColType"]"
      Items="PrinterTypes"
      @bind-Value="@FormModel.Type"
      Disabled="IsOnlyView"
      For="@(() => FormModel.Type)"
    />

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColProductionSite"]"
      Value="@Model.ProductionSite.Name"
    />
  </FieldsContent>
  <ActionsContent>
    <SectionFormActionShare Path="@($"{RouteUtils.SectionPrinters}?id={Model.Id}")" />
    @if (IsOnlyView == false)
    {
      <SectionFormActionReset OnClick="@ResetAction" />
      <SectionFormActionDelete OnClick="@DeleteItem" />
    }
  </ActionsContent>
</SectionForm>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IAuthorizationService AuthorizationService { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private DevicesEndpoints DevicesEndpoints { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public PrinterDto Model { get; set; } = default!;
  [CascadingParameter] private ProxyDto UserProductionSite { get; set; } = default!;

  private IEnumerable<PrinterTypes> PrinterTypes { get; } = Enum.GetValues(typeof(PrinterTypes)).Cast<PrinterTypes>().ToList();
  private bool IsOnlyView { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    bool isSeniorSupport = (await AuthorizationService.AuthorizeAsync(UserPrincipal, PolicyEnum.SeniorSupport)).Succeeded;
    IsOnlyView = !isSeniorSupport && !UserProductionSite.Equals(Model.ProductionSite);
  }

  protected override async Task UpdateItemAction(PrinterUpdateDto item)
  {
    PrinterDto dto = await WebApi.UpdatePrinter(Model.Id, item);
    DevicesEndpoints.UpdatePrinter(Model.ProductionSite.Id, dto);
  }

  protected override async Task DeleteItemAction()
  {
    await WebApi.DeletePrinter(Model.Id);
    DevicesEndpoints.DeletePrinter(Model.ProductionSite.Id, Model.Id);
  }
}
