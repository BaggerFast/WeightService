@using DeviceControl.Source.Shared.Api.Web.Endpoints
@using DeviceControl.Source.Shared.Constants
@using DeviceControl.Source.Shared.Helpers
@using TscZebra.Plugin.Abstractions.Enums
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Features.Devices.Printers.Commands
@using Ws.DeviceControl.Models.Features.Devices.Printers.Queries
@inherits SectionFormBase<PrinterUpdateDto>

<UseParameterlessEndpoint
  Endpoint="ReferencesEndpoints.ProxyUserProductionSiteEndpoint"
  Context="userProductionSiteQuery"
>
  @{ bool isOnlyView = !((!IsSeniorSupport && Model.ProductionSite.Id == userProductionSiteQuery.Data?.Id) || IsSeniorSupport); }
  <SectionForm
    FormModel="@FormModel"
    ChangeDate="@Model.ChangeDt"
    CreateDate="@Model.CreateDt"
    Validator="@(new PrinterUpdateValidator(WsDataLocalizer))"
    OnCancelAction="@OnCancelAction"
    OnSubmitAction="@UpdateItem"
  >
    <FieldsContent>
      <SectionAdminGuidField Value="@Model.Id" />

      <SectionTextField
        Label="@WsDataLocalizer["ColName"]"
        @bind-Value="FormModel.Name"
        For="@(() => FormModel.Name)"
        Disabled="@isOnlyView"
      />

      <SectionIpField
        Label="@($"IP ({Localizer["FormPrinterControl"]})")"
        @bind-Value="@FormModel.Ip"
        For="@(() => FormModel.Ip)"
        Path="@($"http://{FormModel.Ip}")"
        Disabled="@isOnlyView"
      />

      <SectionSelectSingleField
        TItem="PrinterTypes"
        Label="@WsDataLocalizer["ColType"]"
        Items="PrinterTypes"
        @bind-Value="@FormModel.Type"
        Disabled="@isOnlyView"
        For="@(() => FormModel.Type)"
      />

      <SectionReadOnlyField
        Path="@RedirectHelper.ToProductionSite(Model.ProductionSite.Id)"
        Label="@WsDataLocalizer["ColProductionSite"]"
        Value="@Model.ProductionSite.Name"
      />
    </FieldsContent>
    <ActionsContent>
      <SectionFormActionShare Path="@($"{Urls.Printers}?id={Model.Id}")" />
      @if (!isOnlyView)
      {
        <SectionFormActionReset OnClick="@ResetAction" />
        <SectionFormActionDelete OnClick="@DeleteItem" />
      }
    </ActionsContent>
  </SectionForm>
</UseParameterlessEndpoint>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IAuthorizationService AuthorizationService { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private RedirectHelper RedirectHelper { get; set; } = default!;
  [Inject] private DevicesEndpoints DevicesEndpoints { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public PrinterDto Model { get; set; } = default!;

  private IEnumerable<PrinterTypes> PrinterTypes { get; } = Enum.GetValues(typeof(PrinterTypes)).Cast<PrinterTypes>().ToList();
  private bool IsSeniorSupport { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    IsSeniorSupport = (await AuthorizationService.AuthorizeAsync(UserPrincipal, PolicyEnum.SeniorSupport)).Succeeded;
  }

  protected override async Task UpdateItemAction(PrinterUpdateDto item)
  {
    PrinterDto dto = await WebApi.UpdatePrinter(Model.Id, item);
    DevicesEndpoints.UpdatePrinter(Model.ProductionSite.Id, dto);
  }

  protected override async Task DeleteItemAction()
  {
    await WebApi.DeletePrinter(Model.Id);
    DevicesEndpoints.DeletePrinter(Model.ProductionSite.Id, Model.Id);
  }
}
