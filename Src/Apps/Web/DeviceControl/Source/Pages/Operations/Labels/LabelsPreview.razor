@using DeviceControl.Source.Shared.Api
@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models.Features.Print.Labels

<div class="flex items-center min-h-72 w-full p-10 overflow-hidden justify-center bg-secondary/[.3] dark:bg-inherit">
  <UseEndpoint Endpoint="OperationsEndpoints.LabelZplEndpoint" Arg="Model.Id" Context="labelZplQuery">
    @if (labelZplQuery.IsLoading)
    {
      <Spinner Class="size-14 text-muted animate-spin fill-blue-600"/>
    }
    else if (labelZplQuery.HasData && !string.IsNullOrEmpty(labelZplQuery.Data.Zpl))
    {
      <UseEndpoint
        Endpoint="@ZplEndpoints.ZplEndpoint"
        Arg="@(new ZplEndpointArgs(labelZplQuery.Data.Zpl, labelZplQuery.Data.Width, labelZplQuery.Data.Height, (short)labelZplQuery.Data.Rotate))"
        Context="zplQuery"
      >
        @if (zplQuery.IsLoading)
        {
          <Spinner Class="size-14 text-muted animate-spin fill-blue-600"/>
        }
        else
        {
          @if (zplQuery.HasData)
          {
          <div class="p-2 flex flex-col w-full h-full overflow-hidden gap-3">
            <div class="rounded-md bg-white border w-fit h-full max-h-[28rem] mx-auto border-black/[.2] overflow-hidden p-2">
              <img
                src="@($"data:image/png;base64,{zplQuery.Data}")"
                class="max-w-full max-h-full"
                alt=""/>
            </div>
            <div class="flex justify-between items-center gap-2">
              <div class="flex gap-2 pb-1 items-center">
                <span class="pb-1px">Размер:</span>
                <Badge>
                  @($"{labelZplQuery.Data.Width}x{labelZplQuery.Data.Height}")
                </Badge>
              </div>
              <div class="flex items-center gap-3">
                <Button OnClick="@(() => CopyToClipboard(labelZplQuery.Data.Zpl))">
                  Скопировать zpl
                </Button>
                <Button OnClick="@(() => CopyBase64ToClipboard($"data:image/png;base64,{zplQuery.Data}"))">
                  Скопировать картинку
                </Button>
              </div>
            </div>
          </div>
          }
          else
          {
            <p>@Localizer["LabelsPreviewErrorMsg"]</p>
          }
        }
      </UseEndpoint>
    }
    else
    {
      <p>@Localizer["LabelsPreviewErrorMsg"]</p>
    }
  </UseEndpoint>
</div>

@code {
  # region Injects

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private ILabelaryApi LabelaryApi { get; set; } = default!;
  [Inject] private ZplEndpoints ZplEndpoints { get; set; } = default!;
  [Inject] private OperationsEndpoints OperationsEndpoints { get; set; } = default!;
  [Inject] private IJSRuntime JsRuntime { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public LabelDto Model { get; set; } = default!;

  private async Task CopyToClipboard(string valueToCopy)
  {
    try
    {
      await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", valueToCopy);
      ToastService.ShowInfo("Zpl код сохранен в буфер обмена");
    }
    catch
    {
      ToastService.ShowError("Ваш браузер не поддерживает копирование в буфер обмена");
    }
  }

  private async Task CopyBase64ToClipboard(string valueToCopy)
  {
    try
    {
      await JsRuntime.InvokeVoidAsync("copyBase64ToClipboard", valueToCopy);
      ToastService.ShowInfo("Изображение сохранено в буфер обмена");
    }
    catch
    {
      ToastService.ShowError("Ваш браузер не поддерживает копирование в буфер обмена");
    }
  }
}