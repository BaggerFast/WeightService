@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Dto.Admins.PalletMen.Commands.Update
@using Ws.DeviceControl.Models.Dto.Admins.PalletMen.Queries
@using Ws.DeviceControl.Models.Dto.Shared

@inherits SectionFormBase<PalletManUpdateDto>

<SectionForm
  FormModel="@FormModel"
  ChangeDate="@Model.ChangeDt"
  CreateDate="@Model.CreateDt"
  Validator="@(new PalletManUpdateValidator(WsDataLocalizer))"
  OnCancelAction="@OnCancelAction"
  OnSubmitAction="@UpdateItem"
>
  <FieldsContent>
    <SectionAdminGuidField Value="@Model.Id"/>

    <SectionGuidField
      Label="UID 1C"
      @bind-Value="@FormModel.Id1C"
      For="@(() => FormModel.Id1C)"
      IsCopyable
      Disabled="IsOnlyView"
    />

    <SectionInputWrapper
      Path="@(FormModel.WarehouseId != Guid.Empty ? Redirector.ToWarehousePath(FormModel.WarehouseId, UserPrincipal) : string.Empty)"
      Label="@WsDataLocalizer["ColWarehouse"]"
    >
      <UseEndpoint
        Endpoint="@ReferencesEndpoints.ProxyWarehousesEndpoint"
        Arg="ProductionSiteState.Value.ProductionSite.Id"
        Context="warehousesQuery"
      >
        @if (warehousesQuery.HasData)
        {
          <SelectSingle
            TItem="ProxyDto?"
            Items="warehousesQuery.Data"
            SelectedItem="@warehousesQuery.Data.SingleOrDefault(x => x.Id == FormModel.WarehouseId)"
            SelectedItemChanged="@(value => FormModel.WarehouseId = value?.Id ?? Guid.Empty)"
            Placeholder="@Localizer["FormWarehouseDefaultPlaceholder"]"
            EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
            SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
            ItemDisplayName="@(item => item!.Name)"
            IsFilterable
          />
        }
        else
        {
          <Skeleton class="h-10 w-full" />
        }
      </UseEndpoint>
      <FieldValidation For="@(() => FormModel.WarehouseId)" />
    </SectionInputWrapper>

    <FormDivider></FormDivider>

    <SectionTextField
      Label="@WsDataLocalizer["ColFirstName"]"
      @bind-Value="@FormModel.Name"
      For="@(() => FormModel.Name)"
      Disabled="IsOnlyView"
    />

    <SectionTextField
      Label="@WsDataLocalizer["ColSurname"]"
      @bind-Value="@FormModel.Surname"
      For="@(() => FormModel.Surname)"
      Disabled="IsOnlyView"
    />

    <SectionTextField
      Label="@WsDataLocalizer["ColPatronymic"]"
      @bind-Value="@FormModel.Patronymic"
      For="@(() => FormModel.Patronymic)"
      Disabled="IsOnlyView"
    />

    <FormDivider></FormDivider>

    <SectionTextField
      Label="@WsDataLocalizer["ColPassword"]"
      @bind-Value="@FormModel.Password"
      For="@(() => FormModel.Password)"
      Disabled="IsOnlyView"
    />
  </FieldsContent>
  <ActionsContent>
    <SectionFormActionShare Path="@($"{RouteUtils.SectionPalletMen}?id={Model.Id}")" />
    <SectionFormActionReset OnClick="@ResetAction" />
    <SectionFormActionDelete OnClick="@DeleteItem" />
  </ActionsContent>
</SectionForm>

@code {
  #region Inject

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private Redirector Redirector { get; set; } = default!;
  [Inject] private IAuthorizationService AuthorizationService { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;
  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private AdminEndpoints AdminEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  #endregion

  [CascadingParameter] private ProxyDto UserProductionSite { get; set; } = default!;
  [Parameter, EditorRequired] public PalletManDto Model { get; set; } = default!;

  private bool IsOnlyView { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    bool isSeniorSupport = (await AuthorizationService.AuthorizeAsync(UserPrincipal, PolicyEnum.SeniorSupport)).Succeeded;
    IsOnlyView = !isSeniorSupport && !UserProductionSite.Equals(ProductionSiteState.Value.ProductionSite);
  }

  protected override async Task UpdateItemAction(PalletManUpdateDto item)
  {
    PalletManDto dto = await WebApi.UpdatePalletMan(Model.Id, item);
    AdminEndpoints.UpdatePalletMan(ProductionSiteState.Value.ProductionSite.Id, dto);
  }

  protected override async Task DeleteItemAction()
  {
    await WebApi.DeletePalletMan(Model.Id);
    AdminEndpoints.DeletePalletMan(ProductionSiteState.Value.ProductionSite.Id, Model.Id);
  }
}
