@using DeviceControl.Source.Features
@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Dto.Admins.PalletMen.Queries
@using Ws.DeviceControl.Models.Dto.Shared

@inherits SectionPageBase<Ws.DeviceControl.Models.Dto.Admins.PalletMen.Queries.PalletManDto>
@attribute [Route(RouteUtils.SectionPalletMen)]
@attribute [Authorize(Policy = PolicyEnum.Support)]
@rendermode InteractiveServer

<PageTitle>DeviceControl - @Localizer["SectionPalletMen"]</PageTitle>

<UserProductionSiteErrorSuspense>
  <UseEndpoint
    Endpoint="@AdminEndpoints.PalletMenEndpoint"
    Arg="@ProductionSiteState.Value.ProductionSite.Id"
    Options="@DefaultEndpointOptions"
    Context="palletManQuery"
  >
    <PageHeader>
      <span>@Localizer["SectionPalletMen"]</span>
      <DataGridItemsCounter ItemsCount="@(palletManQuery.Data?.Length ?? 0)" IsLoading="palletManQuery.IsLoading"/>
      <DataGridActionReload OnClick="@palletManQuery.RefetchAsync" IsLoading="palletManQuery.IsFetching" />
      <DataGridActionCreate OnClick="@OpenCreateFormModal" />
    </PageHeader>

    <DataGridWrapper>
      <DataGridContainer
        TItem="PalletManDto"
        Items="@(palletManQuery.HasData ? palletManQuery.Data : [])"
        OnItemSelect="@(item => OpenUpdateFormModal(item))"
        IsFilterable>
        <ColumnsContent>
          <DataGridColumn
            Caption="@WsDataLocalizer["ColChangeDt"]"
            Field="@nameof(PalletManDto.ChangeDt)"
            Width="20%"
            Filterable="false"
          />
          <DataGridColumn
            Caption="@WsDataLocalizer["ColFIO"]"
            Field="@(nameof(PalletManDto.Fio))"
            Width="25%"
          >
            <DisplayTemplate>
              @context.Fio.DisplayFullName
            </DisplayTemplate>
          </DataGridColumn>
          <DataGridColumn
            Caption="@WsDataLocalizer["ColProductionSite"]"
            Width="30%"
            FilterCellClass="!font-normal"
          >
            <FilterTemplate>
              <ProductionSiteSelect />
            </FilterTemplate>
            <DisplayTemplate>
              @ProductionSiteState.Value.ProductionSite.Name
            </DisplayTemplate>
          </DataGridColumn>
          <DataGridColumn
            Caption="@WsDataLocalizer["ColWarehouse"]"
            Field="@($"{nameof(PalletManDto.Warehouse)}.{nameof(ProxyDto.Name)}")"
            Width="25%"
            Filterable="false"
          />
        </ColumnsContent>
        <ContextMenuContent>
          <DataGridActionViewItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => OpenUpdateFormModal(item)))"/>
          <DataGridActionOpenInNewTab OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => OpenItemInNewTab(item)))"/>
          <DataGridActionDeleteItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => DeleteItem(item)))"/>
        </ContextMenuContent>
      </DataGridContainer>
    </DataGridWrapper>
  </UseEndpoint>
</UserProductionSiteErrorSuspense>

@code {
  #region Inject

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private AdminEndpoints AdminEndpoints { get; set; } = default!;
  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  #endregion

  protected override async Task OpenCreateFormModal() =>
    await OpenModal<PalletMenCreateDialog>();

  protected override async Task OpenUpdateFormModal(PalletManDto item) =>
    await OpenModalWithItem<PalletMenUpdateDialog>(item);

  protected override async Task OpenItemInNewTab(PalletManDto item) =>
    await OpenLinkInNewTab($"{RouteUtils.SectionPalletMen}?id={item.Id}");

  protected override Task<PalletManDto> SearchByUidAction(Guid uid) =>
    WebApi.GetPalletManByUid(uid);

  protected override async Task DeleteItemAction(PalletManDto item)
  {
    await WebApi.DeletePalletMan(item.Id);
    AdminEndpoints.DeletePalletMan(ProductionSiteState.Value.ProductionSite.Id, item.Id);
  }
}
