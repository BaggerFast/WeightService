@using DeviceControl.Source.Features
@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Features.References.Warehouses.Queries
@inherits SectionDataGridBase<WarehouseDto>
@attribute [Route(RouteUtils.SectionWarehouses)]
@attribute [Authorize(Policy = PolicyEnum.SeniorSupport)]
@rendermode InteractiveServer

<PageTitle>DeviceControl - @Localizer["SectionWarehouses"]</PageTitle>

<UserProductionSiteErrorSuspense>
  <UseEndpoint
    Endpoint="@ReferencesEndpoints.WarehousesEndpoint"
    Arg="@ProductionSiteState.Value.ProductionSite.Id"
    Options="@(DefaultEndpointOptions)"
    Context="warehousesQuery"
  >
    <PageHeader>
      <span>@Localizer["SectionWarehouses"]</span>
      <DataGridItemsCounter ItemsCount="@(warehousesQuery.Data?.Length ?? 0)" IsLoading="warehousesQuery.IsLoading"/>
      <DataGridActionReload OnClick="@warehousesQuery.RefetchAsync" IsLoading="warehousesQuery.IsFetching" />
      <AuthorizeView Policy="@PolicyEnum.Admin">
        <DataGridActionCreate OnClick="@OpenCreateFormModal" />
      </AuthorizeView>
    </PageHeader>

  <DataGridWrapper>
    <DataGridContainer
      TItem="WarehouseDto"
      Items="@(warehousesQuery.HasData ? warehousesQuery.Data : [])"
      OnItemSelect="@(item => OpenUpdateFormModal(item))"
      IsFilterable
    >
      <ColumnsContent>
        <DataGridColumn
          Caption="@WsDataLocalizer["ColName"]"
          Field="@nameof(WarehouseDto.Name)"
          Width="30%"/>
        <DataGridColumn
          Caption="@WsDataLocalizer["ColProductionSite"]"
          Field="@($"{nameof(WarehouseDto.ProductionSite)}.{nameof(ProxyDto.Name)}")"
          Width="70%"
          FilterCellClass="!font-normal"
        >
          <FilterTemplate>
            <ProductionSiteSelect />
          </FilterTemplate>
        </DataGridColumn>
      </ColumnsContent>
      <ContextMenuContent>
        <DataGridActionViewItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => OpenUpdateFormModal(item)))"/>
        <DataGridActionOpenInNewTab OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => OpenItemInNewTab(item)))"/>
        <AuthorizeView Policy="@PolicyEnum.Admin" Context="authContext">
          <DataGridActionDeleteItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => DeleteItem(item)))"/>
        </AuthorizeView>
      </ContextMenuContent>
    </DataGridContainer>
  </DataGridWrapper>
  </UseEndpoint>
</UserProductionSiteErrorSuspense>

@code {
  #region Inject

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;
  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  #endregion

  protected override async Task OpenCreateFormModal() =>
    await OpenModal<WarehousesCreateDialog>();

  protected override async Task OpenUpdateFormModal(WarehouseDto item) =>
    await OpenModalWithItem<WarehousesUpdateDialog>(item);

  protected override async Task OpenItemInNewTab(WarehouseDto item) =>
    await OpenLinkInNewTab($"{RouteUtils.SectionWarehouses}?id={item.Id}");

  protected override Task<WarehouseDto> SearchByUidAction(Guid uid) =>
    WebApi.GetWarehouseByUid(uid);

  protected override async Task DeleteItemAction(WarehouseDto item)
  {
    await WebApi.DeleteWarehouse(item.Id);
    ReferencesEndpoints.DeleteWarehouse(item.ProductionSite.Id, item.Id);
  }
}
