@using Ws.DeviceControl.Models
@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models.Dto.References1C.Plus.Queries
@using Ws.DeviceControl.Models.Dto.Shared
@using Blazor.Heroicons.Outline

@inherits SectionPageBase<Ws.DeviceControl.Models.Dto.References1C.Plus.Queries.PluDto>
@attribute [Route(RouteUtils.SectionPlus)]
@rendermode InteractiveServer

<PageTitle>DeviceControl - @Localizer["SectionPLU"]</PageTitle>

<UseParameterlessEndpoint Endpoint="@References1CEndpoints.PlusEndpoint" Options="@(DefaultEndpointOptions)" Context="plusQuery">
  <PageHeader>
    <span>@Localizer["SectionPLU"]</span>
    <DataGridItemsCounter ItemsCount="@(plusQuery.Data?.Length ?? 0)" IsLoading="plusQuery.IsLoading"/>
    <DataGridActionReload OnClick="@plusQuery.RefetchAsync" IsLoading="plusQuery.IsFetching" />
  </PageHeader>

  <DataGridWrapper>
    <DataGridContainer
      TItem="PluDto"
      Items="@(plusQuery.HasData ? plusQuery.Data : [])"
      OnItemSelect="@(item => OpenUpdateFormModal(item))"
      IsFilterable
    >
      <ColumnsContent>
        <DataGridColumn
          Caption="@WsDataLocalizer["ColStatus"]"
          Width="5%"
          Sortable="false"
          Filterable="false"
        >
          <DisplayTemplate>
            @if (context.Name.StartsWith('—è'))
            {
              <div class="w-full flex items-center justify-center">
                <TrashIcon class="text-red-600 size-5"/>
              </div>
            }
            else if (context.Template?.Id == Guid.Empty || context.Template?.Id == null)
            {
              <div class="w-full flex items-center justify-center">
                <BookmarkSlashIcon class="text-purple-500 size-5 transition-colors hover:text-purple-700 dark:hover:text-purple-300"/>
              </div>
            }
            @* else if (!PluValidator.Validate(context).IsValid) *@
            @* { *@
            @*   <div class="w-full flex items-center justify-center"> *@
            @*     <ExclamationTriangleIcon class="text-orange-400 size-5"/> *@
            @*   </div> *@
            @* } *@
          </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn
          Caption="@WsDataLocalizer["ColNumber"]"
          Field="@nameof(PluDto.Number)"
          FilterMethod="DataGridColumnFilterMethod.StartsWith"
          Width="10%"
        />

        <DataGridColumn
          Caption="@WsDataLocalizer["ColName"]"
          Field="@nameof(PluDto.Name)"
          FilterMethod="DataGridColumnFilterMethod.Contains"
          Width="25%"
        />

        <DataGridColumn
          Caption="@WsDataLocalizer["ColType"]"
          Field="@nameof(PluDto.IsWeight)"
          Width="10%"
          Sortable="false"
          FilterCellClass="!font-normal"
        >
          <FilterTemplate>
            @{ context.SearchValue = IsWeightFilter; }
            <SelectSingle
              TItem="bool?"
              Items="@( [false, true, null])"
              @bind-SelectedItem="@IsWeightFilter"
              @bind-SelectedItem:after="@(() => context.TriggerFilterChange(IsWeightFilter))"
              Placeholder="@Localizer["SelectItemNotSelected"]"
              ItemDisplayName="@(item => item == null ? Localizer["SelectItemNotSelected"] :
                                 item.Value ? WsDataLocalizer["ColPluWeight"] : WsDataLocalizer["ColPluPiece"])"
            />
          </FilterTemplate>
          <DisplayTemplate>
            <span>
              @(context.IsWeight ? WsDataLocalizer["ColPluWeight"] : WsDataLocalizer["ColPluPiece"])
            </span>
          </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn
          Caption="@WsDataLocalizer["ColBrand"]"
          Field="@($"{nameof(PluDto.Brand)}.{nameof(ProxyDto.Name)}")"
          Width="20%"
          Sortable="false"
          Filterable="false"
        />

        <DataGridColumn
          Caption="@WsDataLocalizer["ColChangeDt"]"
          Field="@nameof(PluDto.ChangeDt)"
          Width="15%"
          Filterable="false"
        />
      </ColumnsContent>
      <ContextMenuContent>
        <DataGridActionViewItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, async item => await OpenUpdateFormModal(item)))" />
        <DataGridActionOpenInNewTab OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, async item => await OpenItemInNewTab(item)))" />
      </ContextMenuContent>
    </DataGridContainer>
  </DataGridWrapper>
</UseParameterlessEndpoint>

@code {
  # region Injects

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private References1CEndpoints References1CEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  # endregion

  private bool? IsWeightFilter { get; set; }

  protected override async Task OpenUpdateFormModal(PluDto item) =>
    await OpenModalWithItem<PlusUpdateDialog>(item);

  protected override async Task OpenItemInNewTab(PluDto item) =>
    await OpenLinkInNewTab($"{RouteUtils.SectionPlus}?id={item.Id}");

  protected override Task<PluDto> SearchByUidAction(Guid uid) =>
    WebApi.GetPluByUid(uid);
}
