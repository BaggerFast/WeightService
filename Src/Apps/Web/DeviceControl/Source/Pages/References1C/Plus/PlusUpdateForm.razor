@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Dto.References1C.Plus.Commands.Update
@using Ws.DeviceControl.Models.Dto.References1C.Plus.Queries
@using Ws.DeviceControl.Models.Dto.Shared
@inherits SectionFormBase<PluUpdateDto>

<SectionForm
  FormModel="@FormModel"
  ChangeDate="Model.ChangeDt"
  CreateDate="Model.CreateDt"
  Validator="@(new PluUpdateValidator(WsDataLocalizer))"
  OnCancelAction="@OnCancelAction"
  OnSubmitAction="@UpdateItem"
>
  <FieldsContent>
    <SectionAdminGuidField Value="@Model.Id" />

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColNumber"]"
      Value="@Model.Number"
    />

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColType"]"
      Value="@GetPluTypeName(Model.IsWeight)"
    />

    <SectionReadOnlyField
      Label="@($"{WsDataLocalizer["ColWeight"]} ({WsDataLocalizer["MeasureKg"]})")"
      Value="@Model.Weight"
    />

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColBrand"]"
      Value="@Model.Brand.Name"
      Path="@Redirector.ToBrandPath(Model.Brand.Id)"
    />

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColShelfLifeDays"]"
      Value="@Model.ShelfLifeDays"
    />

    <SectionInputWrapper
      Path="@(FormModel.TemplateId != Guid.Empty ? Redirector.ToTemplatePath(FormModel.TemplateId, UserPrincipal) : string.Empty)"
      Label="@WsDataLocalizer["ColTemplate"]"
      HtmlFor="plu-template"
    >
      <UseEndpoint
        Endpoint="@PrintSettingsEndpoints.ProxyTemplatesEndpoint"
        Arg="@Model.IsWeight"
        Context="templatesQuery"
      >
        @if (templatesQuery.HasData)
        {
          <SelectSingle
            TItem="ProxyDto?"
            HtmlId="plu-template"
            Items="templatesQuery.Data"
            Value="@templatesQuery.Data.SingleOrDefault(x => x.Id == FormModel.TemplateId)"
            ValueChanged="@(value => FormModel.TemplateId = value?.Id ?? Guid.Empty)"
            Placeholder="@Localizer["FormTemplateDefaultPlaceholder"]"
            EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
            SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
            ItemDisplayName="@(item => item!.Name)"
            Disabled="@(!IsSupport)"
            Filterable
          />
        }
        else
        {
          <Skeleton class="h-10 w-full" />
        }
      </UseEndpoint>
      <FieldValidation For="@(() => FormModel.TemplateId)" />
    </SectionInputWrapper>

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColStorageMethod"]"
      Value="@Model.StorageMethod"
    />

    <FormDivider>@WsDataLocalizer["ColDescription"]</FormDivider>

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColName"]"
      Value="@Model.Name"
    />

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColFullName"]"
      Value="@Model.FullName"
    />

    <SectionReadOnlyField
      Label="@WsDataLocalizer["ColDescription"]"
      Value="@Model.Description"
    />

    <FormDivider>@Localizer["FieldPackaging"]</FormDivider>

    @if (Model.Bundle != null)
    {
      <SectionReadOnlyField
        Label="@WsDataLocalizer["ColBundle"]"
        Value="@Model.Bundle.Name"
        Path="@Redirector.ToBundlePath(Model.Bundle.Id)"
      />
    }

    @if (Model.Clip != null)
    {
      <SectionReadOnlyField
        Label="@WsDataLocalizer["ColClip"]"
        Value="@Model.Clip.Name"
        Path="@Redirector.ToClipPath(Model.Clip.Id)"
      />
    }

    <FormDivider>@WsDataLocalizer["ColBarcode"]</FormDivider>

    <SectionReadOnlyField
      Label="Ean13"
      Value="@Model.Ean13"
    />

    <SectionReadOnlyField
      Label="Gtin"
      Value="@Model.Gtin"
    />

  </FieldsContent>

  <ActionsContent>
    <SectionFormActionShare Path="@($"{RouteUtils.SectionPlus}?id={Model.Id}")" />
    <SectionFormActionReset OnClick="@ResetAction" />
  </ActionsContent>
</SectionForm>

@code {
  # region Injects

  [Inject] private Redirector Redirector { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private References1CEndpoints References1CEndpoints { get; set; } = default!;
  [Inject] private PrintSettingsEndpoints PrintSettingsEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private IAuthorizationService AuthorizationService { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public PluDto Model { get; set; } = default!;

  private bool IsSupport { get; set; } = false;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    IsSupport = (await AuthorizationService.AuthorizeAsync(UserPrincipal, PolicyEnum.SeniorSupport)).Succeeded;
  }

  protected override async Task UpdateItemAction(PluUpdateDto item)
  {
    PluDto dto = await WebApi.UpdatePlu(Model.Id, item);
    References1CEndpoints.UpdatePlu(dto);
  }

  private string GetPluTypeName(bool isWeight) =>
    isWeight ? WsDataLocalizer["ColPluWeight"] : WsDataLocalizer["ColPluPiece"];
}
