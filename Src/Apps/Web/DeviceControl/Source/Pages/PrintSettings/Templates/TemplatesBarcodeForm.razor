@using DeviceControl.Source.Shared.Services

@using Ws.DeviceControl.Models.Features.References.Template.Queries
@using DeviceControl.Source.Features.BarcodeConfigurator
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Features.References.Template.Universal

<UseEndpoint
  Endpoint="PrintSettingsEndpoints.VariablesEndpoint"
  Arg="@Template.Id"
  Context="variablesQuery"
>
  <div class="w-full bg-secondary/[.3] pt-6 pb-8 px-5 overflow-y-auto dark:bg-inherit">
    <Accordion Title="@WsDataLocalizer["ColBarcodeTop"]">

      @if (variablesQuery.IsLoading || !variablesQuery.HasData)
      {
        <Skeleton Class="w-full h-32"/>
      }
      else
      {
        <BarcodeConfigurator
          BarcodeVariables="variablesQuery.Data"
          @bind-BarcodeDictionary="BarcodesCopy.Top"
        />
      }
    </Accordion>
    <Accordion Title="@WsDataLocalizer["ColBarcodeBottom"]">
      @if (variablesQuery.IsLoading || !variablesQuery.HasData)
      {
        <Skeleton Class="w-full h-32"/>
      }
      else
      {
        <BarcodeConfigurator
          BarcodeVariables="variablesQuery.Data"
          @bind-BarcodeDictionary="BarcodesCopy.Bottom"
        />
      }
    </Accordion>
    <Accordion Title="@WsDataLocalizer["ColBarcodeRight"]">
      @if (variablesQuery.IsLoading || !variablesQuery.HasData)
      {
        <Skeleton Class="w-full h-32"/>
      }
      else
      {
        <BarcodeConfigurator
          BarcodeVariables="variablesQuery.Data"
          @bind-BarcodeDictionary="BarcodesCopy.Right"
        />
      }
    </Accordion>
    <div class="pt-4 flex justify-end">
      <Button OnClick="@UpdateBarcode">
        @Localizer["BtnSubmit"]
      </Button>
    </div>
  </div>
</UseEndpoint>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private PrintSettingsEndpoints PrintSettingsEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public TemplateDto Template { get; set; } = default!;
  [Parameter, EditorRequired] public BarcodeItemWrapper Barcodes { get; set; } = default!;

  private BarcodeItemWrapper BarcodesCopy { get; set; } = default!;

  protected override void OnInitialized() => BarcodesCopy = Barcodes with {};

  private async Task UpdateBarcode()
  {
    try
    {
      BarcodeItemWrapper newBarcodes = await WebApi.UpdateBarcodeVariables(Template.Id, BarcodesCopy);
      PrintSettingsEndpoints.UpdateBarcodes(Template.Id, newBarcodes);
      ToastService.ShowSuccess(Localizer["ToastUpdateItem"]);
    }
    catch
    {
      ToastService.ShowError(Localizer["UnknownError"]);
    }
  }
}