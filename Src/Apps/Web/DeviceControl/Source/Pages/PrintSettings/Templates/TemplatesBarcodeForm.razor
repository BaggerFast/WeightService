@using DeviceControl.Source.Shared.Services

@using Ws.DeviceControl.Models.Features.References.Template.Queries
@using DeviceControl.Source.Features.BarcodeConfigurator
@using Ws.DeviceControl.Models.Features.References.Template.Universal

<UseEndpoint
  Endpoint="PrintSettingsEndpoints.VariablesEndpoint"
  Arg="@Template.Id"
  Context="variablesQuery"
>
  <div class="w-full bg-secondary/[.3] pt-6 pb-8 px-5 overflow-y-auto dark:bg-inherit">
    <Accordion Title="@WsDataLocalizer["ColBarcodeTop"]">

      @if (variablesQuery.IsLoading || !variablesQuery.HasData)
      {
        <Skeleton Class="w-full h-32"/>
      }
      else
      {
        <BarcodeConfigurator
          BarcodeVariables="variablesQuery.Data"
          @bind-BarcodeDictionary="BarcodesCopy.Top"
        />
      }
    </Accordion>
    <Accordion Title="@WsDataLocalizer["ColBarcodeBottom"]">
      @if (variablesQuery.IsLoading || !variablesQuery.HasData)
      {
        <Skeleton Class="w-full h-32"/>
      }
      else
      {
        <BarcodeConfigurator
          BarcodeVariables="variablesQuery.Data"
          @bind-BarcodeDictionary="BarcodesCopy.Bottom"
        />
      }
    </Accordion>
    <Accordion Title="@WsDataLocalizer["ColBarcodeRight"]">
      @if (variablesQuery.IsLoading || !variablesQuery.HasData)
      {
        <Skeleton Class="w-full h-32"/>
      }
      else
      {
        <BarcodeConfigurator
          BarcodeVariables="variablesQuery.Data"
          @bind-BarcodeDictionary="BarcodesCopy.Right"
        />
      }
    </Accordion>
    <div class="pt-4 flex justify-end">
      <Button>
        @Localizer["BtnSubmit"]
      </Button>
    </div>
  </div>
</UseEndpoint>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private PrintSettingsEndpoints PrintSettingsEndpoints { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public TemplateDto Template { get; set; } = default!;
  [Parameter, EditorRequired] public BarcodeItemWrapper Barcodes { get; set; } = default!;
  [CascadingParameter] protected FluentDialog Dialog { get; set; } = default!;

  private BarcodeItemWrapper BarcodesCopy { get; set; } = default!;

  protected override void OnInitialized() => BarcodesCopy = Barcodes with {};

  // private async Task SubmitForm()
  // {
  //   if (!ValidateBarcodes())
  //     return;
  //
  //   try
  //   {
  //     TemplateService.Update(DialogItem);
  //     ToastService.ShowSuccess(Localizer["ToastUpdateItem"]);
  //     await Dialog.CloseAsync(new SectionDialogContent<Template>
  //       { Item = DialogItem, DataAction = SectionDialogResultEnum.Update });
  //   }
  //   catch
  //   {
  //     ToastService.ShowError(Localizer["UnknownError"]);
  //   }
  // }
  //
  // private bool ValidateBarcodes()
  // {
  //   BarcodeItemValidator validator = new(BarcodeVariables);
  //   List<BarcodeError> validationErrors = [];
  //
  //   validationErrors.AddRange(ValidateBarcodeItems(DialogItem.BarcodeTopTemplate, WsDataLocalizer["ColBarcodeTop"], validator));
  //   validationErrors.AddRange(ValidateBarcodeItems(DialogItem.BarcodeBottomTemplate, WsDataLocalizer["ColBarcodeBottom"], validator));
  //   validationErrors.AddRange(ValidateBarcodeItems(DialogItem.BarcodeRightTemplate, WsDataLocalizer["ColBarcodeBottom"], validator));
  //
  //   if (!validationErrors.Any()) return true;
  //
  //   foreach (BarcodeError barcodeError in validationErrors)
  //     ToastService.ShowError($"{barcodeError.Barcode} - {barcodeError.ItemName} {barcodeError.Error}");
  //
  //   return false;
  // }
  //
  // private List<BarcodeError> ValidateBarcodeItems(IEnumerable<BarcodeItem> barcodeItems, string barcodeType, BarcodeItemValidator validator) =>
  //   barcodeItems
  //     .Select(item => new { Item = item, validator.Validate(item).Errors })
  //     .Where(x => x.Errors != null && x.Errors.Any())
  //     .Select(x => new BarcodeError
  //     {
  //       Barcode = barcodeType,
  //       ItemName = x.Item.Property,
  //       Error = x.Errors.First().ErrorMessage
  //     })
  //     .ToList();
}