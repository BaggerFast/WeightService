@using Ws.DeviceControl.Models.Features.References.Template.Queries
@using DeviceControl.Source.Features.BarcodeConfigurator
@using DeviceControl.Source.Shared.Api.Web.Endpoints
@using FluentValidation.Results
@using Ws.Print.Features.Barcodes.Models
@using Ws.Print.Features.Barcodes.Utils
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Features.References.Template.Universal

<div class="w-full bg-secondary/[.3] pt-6 pb-8 px-5 overflow-y-auto dark:bg-inherit">
  <Accordion Title="@WsDataLocalizer["ColBarcodeTop"]">
    <BarcodeConfigurator
      BarcodeVariables="@BarcodeVarUtils.BarcodeVarInfos"
      @bind-BarcodeDictionary="BarcodesCopy.Top"
    />
  </Accordion>
  <Accordion Title="@WsDataLocalizer["ColBarcodeBottom"]">
    <BarcodeConfigurator
      BarcodeVariables="@BarcodeVarUtils.BarcodeVarInfos"
      @bind-BarcodeDictionary="BarcodesCopy.Bottom"
    />
  </Accordion>
  <Accordion Title="@WsDataLocalizer["ColBarcodeRight"]">
    <BarcodeConfigurator
      BarcodeVariables="@BarcodeVarUtils.BarcodeVarInfos"
      @bind-BarcodeDictionary="BarcodesCopy.Right"
    />
  </Accordion>
  <div class="pt-4 flex justify-end gap-3">
    <SectionCaptcha @bind-Valid="CaptchaValid" Class="!w-48" />
    <Button OnClick="@UpdateBarcode">
      @Localizer["BtnSubmit"]
    </Button>
  </div>
</div>


@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private PrintSettingsEndpoints PrintSettingsEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;

  # endregion

  [CascadingParameter] protected FluentDialog Dialog { get; set; } = default!;

  [Parameter, EditorRequired] public TemplateDto Template { get; set; } = default!;
  [Parameter, EditorRequired] public BarcodeItemWrapper Barcodes { get; set; } = default!;

  private BarcodeItemWrapper BarcodesCopy { get; set; } = default!;
  private BarcodeVarValidator Validator { get; } = new();

  private bool CaptchaValid { get; set; }

  protected override void OnInitialized() => BarcodesCopy = Barcodes with {};

  private async Task UpdateBarcode()
  {
    if (Barcodes.Equals(BarcodesCopy))
    {
      await Dialog.CloseAsync();
      return;
    }

    if (!CaptchaValid)
    {
      ToastService.ShowError("Введена неправильная капча");
      return;
    }

    try
    {
      List<BarcodeError> topBarcodeError = await ValidateBarcode(BarcodesCopy.Top, WsDataLocalizer["ColBarcodeTop"]);
      List<BarcodeError> bottomBarcodeError = await ValidateBarcode(BarcodesCopy.Bottom, WsDataLocalizer["ColBarcodeBottom"]);
      List<BarcodeError> rightBarcodeError = await ValidateBarcode(BarcodesCopy.Right, WsDataLocalizer["ColBarcodeRight"]);
      List<BarcodeError> allBarcodeErrors = topBarcodeError.Concat(bottomBarcodeError).Concat(rightBarcodeError).ToList();

      if (allBarcodeErrors.Any())
      {
        foreach (BarcodeError error in allBarcodeErrors.Take(5))
          ToastService.ShowError($"{error.Barcode}. Поле '{error.Name}'. {error.Message}");
        return;
      }

      BarcodeItemWrapper newBarcodes = await WebApi.UpdateBarcodeVariables(Template.Id, BarcodesCopy);
      PrintSettingsEndpoints.UpdateBarcodes(Template.Id, newBarcodes);
      ToastService.ShowSuccess(Localizer["ToastUpdateItem"]);
      await Dialog.CloseAsync();
    }
    catch
    {
      ToastService.ShowError(Localizer["UnknownError"]);
    }
  }

  private async Task<List<BarcodeError>> ValidateBarcode(List<BarcodeItemDto> barcodes, string barcodeName)
  {
    List<BarcodeError> errorList = [];
    foreach (BarcodeItemDto barcode in barcodes)
    {
      ValidationResult? result = await Validator.ValidateAsync(BarcodeMapper.ItemDtoToVar(barcode));
      if (result == null || !result.Errors.Any()) continue;
      BarcodeError error = new(barcodeName, barcode.Property, result.Errors.First().ErrorMessage);
      errorList = errorList.Append(error).ToList();
    }
    return errorList;
  }
}