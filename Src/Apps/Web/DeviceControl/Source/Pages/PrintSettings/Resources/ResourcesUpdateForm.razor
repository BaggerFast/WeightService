@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Features.References.TemplateResources.Commands.Create
@using Ws.DeviceControl.Models.Features.References.TemplateResources.Commands.Update
@using Ws.DeviceControl.Models.Features.References.TemplateResources.Queries

@inherits DeviceControl.Source.Shared.UI.Form.SectionFormBase<TemplateResourceUpdateDto>

<SectionForm
  FormModel="@FormModel"
  ChangeDate="@Model.ChangeDt"
  CreateDate="@Model.CreateDt"
  Validator="@(new TemplateResourceCreateValidator(WsDataLocalizer))"
  OnCancelAction="@OnCancelAction"
  OnSubmitAction="@UpdateItem"
>
  <FieldsContent>
    <SectionAdminGuidField Value="@Model.Id" />

    <SectionTextField
      Label="@WsDataLocalizer["ColName"]"
      @bind-Value="@FormModel.Name"
      For="@(() => FormModel.Name)"
    />

    <SectionSelectSingleField
      TItem="ZplResourceType"
      Label="@WsDataLocalizer["ColType"]"
      Items="ZplResourceTypes"
      @bind-Value="@FormModel.Type"
      ItemDisplayName="item => Localizer[EnumUtils.GetEnumDescription(item)]"
      For="@(() => FormModel.Type)"
    />

    <UseEndpoint
      Endpoint="@PrintSettingsEndpoints.ResourceBodyEndpoint"
      Arg="Model.Id"
      Context="resourceBodyQuery"
    >
      @if (resourceBodyQuery.HasData)
      {
        {
          if (string.IsNullOrEmpty(FormModel.Body)) FormModel.Body = resourceBodyQuery.Data;
          if (string.IsNullOrEmpty(DialogItemCopy.Body)) DialogItemCopy.Body = resourceBodyQuery.Data;
        }
        <SectionTextAreaField
          Label="@WsDataLocalizer["ColTemplate"]"
          @bind-Value="@FormModel.Body"
          For="@(() => FormModel.Body)"
          IsCopyable
        />
      }
      else
      {
        <Skeleton Class="h-20 w-full" />
      }
    </UseEndpoint>
  </FieldsContent>
  <ActionsContent>
    <SectionFormActionShare Path="@($"{RouteUtils.SectionResources}?id={Model.Id}")" />
    <SectionFormActionReset OnClick="@ResetAction" />
    <SectionFormActionDelete OnClick="@DeleteItem" />
    @if (FormModel.Type == ZplResourceType.Sign)
    {
      <div style="background-color: white;" class="w-full h-32 p-2 flex items-center rounded-md justify-center overflow-hidden border bg-background">
        <UseEndpoint
          Endpoint="@PrintSettingsEndpoints.ResourceBodyEndpoint"
          Arg="Model.Id"
          Context="resourceBodyQuery"
        >
          @if (resourceBodyQuery.HasData)
          {
            @((MarkupString)FormModel.Body)
          }
          else
          {
            <Spinner Class="size-6 inline text-gray-200 animate-spin fill-primary" />
          }
        </UseEndpoint>
      </div>
    }
  </ActionsContent>
</SectionForm>

@code {
  #region Inject

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private PrintSettingsEndpoints PrintSettingsEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  #endregion

  [Parameter, EditorRequired] public TemplateResourceDto Model { get; set; } = default!;

  private IList<ZplResourceType> ZplResourceTypes { get; set; } = Enum.GetValues(typeof(ZplResourceType)).Cast<ZplResourceType>().ToList();

  protected override async Task UpdateItemAction(TemplateResourceUpdateDto item)
  {
    TemplateResourceDto dto = await WebApi.UpdateResource(Model.Id, item);
    PrintSettingsEndpoints.UpdateResource(dto, item.Body);
  }

  protected override async Task DeleteItemAction()
  {
    await WebApi.DeleteResource(Model.Id);
    PrintSettingsEndpoints.DeleteResource(Model.Id);
  }
}
