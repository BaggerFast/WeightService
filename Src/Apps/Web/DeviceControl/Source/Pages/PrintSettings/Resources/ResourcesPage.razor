@using DeviceControl.Source.Shared.Services
@using Ws.DeviceControl.Models
@using Ws.DeviceControl.Models.Dto.References.TemplateResources.Queries

@inherits SectionDataGridBase<TemplateResourceDto>
@attribute [Route(RouteUtils.SectionResources)]
@attribute [Authorize(Policy = PolicyEnum.Admin)]
@rendermode InteractiveServer

<PageTitle>DeviceControl - @Localizer["SectionResources"]</PageTitle>

<UseParameterlessEndpoint
  Endpoint="PrintSettingsEndpoints.ResourcesEndpoint"
  Options="DefaultEndpointOptions"
  Context="resourcesQuery"
>
  <PageHeader>
    <span>@Localizer["SectionTemplateResources"]</span>
    <DataGridItemsCounter ItemsCount="@(resourcesQuery.Data?.Length ?? 0)" IsLoading="resourcesQuery.IsLoading"/>
    <DataGridActionReload OnClick="@resourcesQuery.RefetchAsync" IsLoading="resourcesQuery.IsFetching" />
    <DataGridActionCreate OnClick="@OpenCreateFormModal"/>
  </PageHeader>

  <DataGridWrapper>
    <DataGridContainer
      TItem="TemplateResourceDto"
      Items="@(resourcesQuery.HasData ? resourcesQuery.Data : [])"
      OnItemSelect="@(item => OpenUpdateFormModal(item))"
      IsFilterable
    >
      <ColumnsContent>
        <DataGridColumn
          Caption="@WsDataLocalizer["ColChangeDt"]"
          Field="@nameof(TemplateResourceDto.ChangeDt)"
          Width="20%"
          Filterable="false"
        />

        <DataGridColumn
          Caption="@WsDataLocalizer["ColType"]"
          Field="@nameof(TemplateResourceDto.Type)"
          Width="20%"
          Sortable="false"
          FilterCellClass="!font-normal"
        >
          <FilterTemplate>
            @{ context.SearchValue = Type; }
            <SelectSingle
              TItem="ZplResourceType?"
              Items="@(Enum.GetValues(typeof(ZplResourceType)).Cast<ZplResourceType?>().ToList().Union([null]))"
              @bind-Value="@Type"
              @bind-Value:after="@(() => context.TriggerFilterChange(Type))"
              Placeholder="@Localizer["SelectItemNotSelected"]"
              ItemDisplayName="@(item => item == null ? Localizer["SelectItemNotSelected"] : Localizer[EnumUtils.GetEnumDescription(item.Value)])"
            />
          </FilterTemplate>
          <DisplayTemplate>
            @Localizer[EnumUtils.GetEnumDescription(context.Type)]
          </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn
          Caption="@WsDataLocalizer["ColName"]"
          Field="@nameof(TemplateResourceDto.Name)"
          Width="60%"
        />
      </ColumnsContent>
      <ContextMenuContent>
        <DataGridActionViewItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => OpenUpdateFormModal(item)))" />
        <DataGridActionOpenInNewTab OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => OpenItemInNewTab(item)))" />
        <DataGridActionDeleteItem OnClick="@(() => ContextFuncWrapper(context.Item, context.CloseContextMenu, item => DeleteItem(item)))" />
      </ContextMenuContent>
    </DataGridContainer>
  </DataGridWrapper>
</UseParameterlessEndpoint>

@code {

  #region Inject

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private PrintSettingsEndpoints PrintSettingsEndpoints { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;

  #endregion

  private ZplResourceType? Type { get; set; }

  protected override async Task OpenUpdateFormModal(TemplateResourceDto item) =>
    await OpenModalWithItem<ResourcesUpdateDialog>(item);

  protected override async Task OpenCreateFormModal() =>
    await OpenModal<ResourcesCreateDialog>();

  protected override async Task OpenItemInNewTab(TemplateResourceDto item) =>
    await OpenLinkInNewTab($"{RouteUtils.SectionResources}?id={item.Id}");

  protected override Task<TemplateResourceDto> SearchByUidAction(Guid uid) =>
    WebApi.GetResourceByUid(uid);

  protected override async Task DeleteItemAction(TemplateResourceDto item)
  {
    await WebApi.DeleteResource(item.Id);
    PrintSettingsEndpoints.DeleteResource(item.Id);
  }
}
