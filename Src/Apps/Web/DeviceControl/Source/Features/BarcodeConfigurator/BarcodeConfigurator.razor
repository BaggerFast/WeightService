@using Ws.DeviceControl.Models.Features.References.Template.Universal
@using Ws.DeviceControl.Models.Features.References.Template.Queries
@using Blazor.Heroicons.Outline

<CascadingValue Value="this">
  <div class="@Css.Class("border gap-px rounded-md overflow-hidden", Class)">
    <BarcodeConfiguratorHeader />
    @if (!BarcodeDictionary.Any())
    {
      <BarcodeConfiguratorEmptyPlaceholder Placeholder="@Placeholder" />
    }
    <FluentSortableList
      Items="BarcodeDictionary"
      OnUpdate="@SortList"
      Class="!pb-0 !p-1 !rounded-none !border-none [&_.sortable-item]:!mb-1 [&_.sortable-item]:!border-border [&_.sortable-item]:!rounded-md [&_.sortable-item]:!overflow-hidden"
      Style="--fluent-sortable-list-item-height: 4;"
    >
      <ItemTemplate>
        <BarcodeConfiguratorItem
          Value="@(BarcodeMapper.DtoToExtendedDto(context, BarcodeVariables))"
          ValueChanged="@(value => BarcodeDictionary[BarcodeDictionary.FindIndex(x => x == context)] = value)"
        />
      </ItemTemplate>
    </FluentSortableList>
  </div>
</CascadingValue>

<div class="flex w-full py-4 gap-2 justify-end items-center overflow-hidden flex-wrap gap-y-8">
  <div class="gap-2 flex">
    <Button Variant="ButtonVariantType.Destructive" OnClick="@CleanBarcode">
      <TrashIcon class="size-5 md:mr-2"/>
      <span class="hidden md:block">@Localizer["BtnClear"]</span>
    </Button>
    <Button OnClick="@AddBarcodeItem">
      <PlusIcon class="size-5 md:mr-2"/>
      <span class="hidden md:block">@Localizer["BtnAdd"]</span>
    </Button>
  </div>
</div>

@code {
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Parameter] public List<BarcodeItemDto> BarcodeDictionary { get; set; } = [];
  [Parameter] public EventCallback<List<BarcodeItemDto>> BarcodeDictionaryChanged { get; set; }
  [Parameter] public BarcodeVarDto[] BarcodeVariables { get; set; } = [];

  [Parameter] public string Class { get; set; } = string.Empty;
  [Parameter] public string Placeholder { get; set; } = string.Empty;

  private async Task AddBarcodeItem()
  {
    BarcodeDictionary.Add(new());
    await BarcodeDictionaryChanged.InvokeAsync(BarcodeDictionary);
  }

  private async Task CleanBarcode()
  {
    BarcodeDictionary = [];
    await BarcodeDictionaryChanged.InvokeAsync(BarcodeDictionary);
  }

  internal async Task DeleteBarcodeItem(int itemIndex)
  {
    BarcodeDictionary.RemoveAt(itemIndex);
    await BarcodeDictionaryChanged.InvokeAsync(BarcodeDictionary);
  }

  internal async Task SwapItems(int oldIndex, int newIndex)
  {
    (BarcodeDictionary[oldIndex], BarcodeDictionary[newIndex]) =
      (BarcodeDictionary[newIndex], BarcodeDictionary[oldIndex]);
    await BarcodeDictionaryChanged.InvokeAsync(BarcodeDictionary);
  }

  private async Task SortList(FluentSortableListEventArgs? args)
  {
    if (args is null || args.OldIndex == args.NewIndex) return;

    int oldIndex = args.OldIndex;
    int newIndex = args.NewIndex;

    List<BarcodeItemDto> items = BarcodeDictionary;
    BarcodeItemDto itemToMove = items[oldIndex];
    items.RemoveAt(oldIndex);

    if (newIndex < items.Count)
    {
      items.Insert(newIndex, itemToMove);
    }
    else
    {
      items.Add(itemToMove);
    }

    BarcodeDictionary = items;
  }
}
