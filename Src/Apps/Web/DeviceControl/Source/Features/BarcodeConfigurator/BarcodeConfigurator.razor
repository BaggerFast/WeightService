@using Ws.DeviceControl.Models.Features.References.Template.Universal
@using Ws.DeviceControl.Models.Features.References.Template.Queries
@using Blazor.Heroicons.Outline

<CascadingValue Value="this">
  <div class="@Css.Class("border gap-px rounded-md overflow-hidden bg-border grid grid-cols-[10rem_1fr_1fr_1fr_10rem_5rem] [&>div]:bg-background", Class)">
    <BarcodeConfiguratorHeader />
    @if (!BarcodeDictionary.Any())
    {
      <BarcodeConfiguratorEmptyPlaceholder Placeholder="@Placeholder" />
    }
    @foreach ((BarcodeItemDto value, int index) in BarcodeDictionary.Select((value, index) => (value, index)))
    {
      <BarcodeConfiguratorItem
        Value="@(BarcodeMapper.DtoToExtendedDto(value, BarcodeVariables))"
        ValueChanged="@(barcode => BarcodeDictionary[index] = BarcodeMapper.ExtendedDtoToDto(barcode))"
        Index="@index"
      />
    }
  </div>
</CascadingValue>

<div class="flex w-full py-4 gap-2 justify-end items-center overflow-hidden flex-wrap gap-y-8">
  <div class="gap-2 flex">
    <Button Variant="ButtonVariantType.Destructive" OnClick="@CleanBarcode">
      <TrashIcon class="size-5 md:mr-2"/>
      <span class="hidden md:block">@Localizer["BtnClear"]</span>
    </Button>
    <Button OnClick="@AddBarcodeItem">
      <PlusIcon class="size-5 md:mr-2"/>
      <span class="hidden md:block">@Localizer["BtnAdd"]</span>
    </Button>
  </div>
</div>

@code {
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Parameter] public List<BarcodeItemDto> BarcodeDictionary { get; set; } = [];
  [Parameter] public EventCallback<List<BarcodeItemDto>> BarcodeDictionaryChanged { get; set; }
  [Parameter] public BarcodeVarDto[] BarcodeVariables { get; set; } = [];

  [Parameter] public string Class { get; set; } = string.Empty;
  [Parameter] public string Placeholder { get; set; } = string.Empty;

  private async Task AddBarcodeItem()
  {
    BarcodeDictionary.Add(new());
    await BarcodeDictionaryChanged.InvokeAsync(BarcodeDictionary);
  }

  private async Task CleanBarcode()
  {
    BarcodeDictionary = [];
    await BarcodeDictionaryChanged.InvokeAsync(BarcodeDictionary);
  }

  internal async Task DeleteBarcodeItem(int itemIndex)
  {
    BarcodeDictionary.RemoveAt(itemIndex);
    await BarcodeDictionaryChanged.InvokeAsync(BarcodeDictionary);
  }

  internal async Task SwapItems(int oldIndex, int newIndex)
  {
    (BarcodeDictionary[oldIndex], BarcodeDictionary[newIndex]) =
      (BarcodeDictionary[newIndex], BarcodeDictionary[oldIndex]);
    await BarcodeDictionaryChanged.InvokeAsync(BarcodeDictionary);
  }
}
