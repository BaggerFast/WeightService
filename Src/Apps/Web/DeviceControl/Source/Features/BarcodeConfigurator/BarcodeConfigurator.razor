@using Ws.DeviceControl.Models.Features.References.Template.Universal
@using Force.DeepCloner
@using Ws.Barcodes.Features.Barcodes.Utils
@using Ws.Barcodes.Features.Barcodes.Models
@using Blazor.Heroicons.Outline

<CascadingValue Value="this">
  <div class="@Css.Class("border gap-px rounded-md overflow-hidden", Class)">
    <BarcodeConfiguratorHeader />
    @if (!BarcodeDictionary.Any())
    {
      <BarcodeConfiguratorEmptyPlaceholder Placeholder="@Placeholder" />
    }
    <FluentSortableList
      Items="ExtendedBarcodeDictionary"
      OnUpdate="@SortList"
      Class="!pb-0 !p-1 !rounded-none !border-none [&_.sortable-item]:!mb-1 [&_.sortable-item]:!border-border [&_.sortable-item]:!rounded-md [&_.sortable-item]:!overflow-hidden [&_.sortable-item]:!select-auto"
      Style="--fluent-sortable-list-item-height: 4;"
      Context="item"
      Handle
    >
      <ItemTemplate>
        <BarcodeConfiguratorItem Value="@item" ValueChanged="@OnItemChanged" />
      </ItemTemplate>
    </FluentSortableList>
  </div>
</CascadingValue>

<div class="flex w-full py-4 gap-2 justify-between items-center overflow-hidden flex-wrap gap-y-8">
  <Badge Type="@BadgeType.Outline">
    @WsDataLocalizer["ColLength"]: @ExtendedBarcodeDictionary.Sum(x => x.Example.Count(char.IsDigit))
  </Badge>
  <div class="gap-2 flex">
    <Button Variant="ButtonVariantType.Outline" OnClick="@ResetBarcode">
      <ArrowUturnLeftIcon class="size-[1.1rem] md:mr-2"/>
      <span class="hidden md:block">@Localizer["BtnReset"]</span>
    </Button>
    <Button OnClick="@AddBarcodeItem">
      <PlusIcon class="size-5 md:mr-2"/>
      <span class="hidden md:block">@Localizer["BtnAdd"]</span>
    </Button>
  </div>
</div>

@code {
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Parameter] public List<BarcodeItemDto> BarcodeDictionary { get; set; } = [];
  [Parameter] public EventCallback<List<BarcodeItemDto>> BarcodeDictionaryChanged { get; set; }
  [Parameter] public List<BarcodeVarInfo> BarcodeVariables { get; set; } = [];

  [Parameter] public string Class { get; set; } = string.Empty;
  [Parameter] public string Placeholder { get; set; } = string.Empty;

  private List<ExtendedBarcodeItemDto> ExtendedBarcodeDictionary { get; set; } = [];
  private List<ExtendedBarcodeItemDto> ExtendedBarcodeDictionaryCopy { get; set; } = [];

  protected override void OnInitialized()
  {
    ExtendedBarcodeDictionary = BarcodeDictionary.Select(x => BarcodeMapper.DtoToExtendedDto(x, BarcodeVariables)).ToList();
    ExtendedBarcodeDictionaryCopy = ExtendedBarcodeDictionary.DeepClone();
  }

  private Task SyncBarcodeDictionary() =>
    BarcodeDictionaryChanged.InvokeAsync(ExtendedBarcodeDictionary.Select(BarcodeMapper.ExtendedDtoToDto).ToList());

  private async Task AddBarcodeItem()
  {
    ExtendedBarcodeDictionary.Add(new() { FormatStr = BarcodeVarUtils.BarcodeVarConstantsFormats.First() });
    await SyncBarcodeDictionary();
  }

  private async Task ResetBarcode()
  {
    ExtendedBarcodeDictionary = ExtendedBarcodeDictionaryCopy.DeepClone();
    await SyncBarcodeDictionary();
  }

  internal async Task DeleteBarcodeItem(ExtendedBarcodeItemDto item)
  {
    int index = ExtendedBarcodeDictionary.FindIndex(x => x.Id.Equals(item.Id));
    if (index == -1) return;
    ExtendedBarcodeDictionary.RemoveAt(index);
    await SyncBarcodeDictionary();
  }

  private async Task OnItemChanged(ExtendedBarcodeItemDto item)
  {
    int index = ExtendedBarcodeDictionary.FindIndex(x => x.Id.Equals(item.Id));
    if (index == -1) return;
    ExtendedBarcodeDictionary[index] = item;
    await SyncBarcodeDictionary();
  }

  private async Task SortList(FluentSortableListEventArgs? args)
  {
    if (args is null || args.OldIndex == args.NewIndex) return;

    ExtendedBarcodeItemDto itemToMove = ExtendedBarcodeDictionary[args.OldIndex];
    ExtendedBarcodeDictionary.RemoveAt(args.OldIndex);
    ExtendedBarcodeDictionary.Insert(Math.Min(args.NewIndex, ExtendedBarcodeDictionary.Count), itemToMove);

    await SyncBarcodeDictionary();
  }
}
