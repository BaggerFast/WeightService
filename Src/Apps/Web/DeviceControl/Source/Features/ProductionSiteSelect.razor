@using System.Security.Claims
@using Ws.Domain.Models.Entities.Ref
@using Ws.Domain.Services.Features.ProductionSites
@using Ws.Shared.Extensions

<div class="w-64">
  <SelectSingle
    TItem="ProductionSite"
    Items="ProductionSiteEntities"
    @bind-SelectedItem="Value"
    @bind-SelectedItem:after="@OnValueChanged"
    ItemDisplayName="@(item => item.IsNew ? "Без площадки" : item.Name)"
    IsDisabled="@(!IsSeniorSupport)"
    IsFilterable
  />
</div>

@code {
  [Inject] private IAuthorizationService AuthorizationService { get; set; } = default!;
  [Inject] private IProductionSiteService ProductionSiteService { get; set; } = default!;

  [CascadingParameter] private ProductionSite UserProductionSite { get; set; } = default!;
  [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

  [Parameter] public ProductionSite Value { get; set; } = new();
  [Parameter] public EventCallback<ProductionSite> ValueChanged { get; set; }
  [Parameter] public bool AllowIsNew { get; set; }

  private List<ProductionSite> ProductionSiteEntities { get; set; } = [];
  private bool IsSeniorSupport { get; set; }

  private async Task OnValueChanged() => await ValueChanged.InvokeAsync(Value);

  protected override async Task OnInitializedAsync()
  {
    ClaimsPrincipal userPrincipal = (await AuthState).User;
    bool isDeveloper = false;

    if (userPrincipal.Identity?.Name != null)
    {
      IsSeniorSupport = (await AuthorizationService.AuthorizeAsync(userPrincipal, PolicyEnum.SeniorSupport))
        .Succeeded;
      isDeveloper = (await AuthorizationService.AuthorizeAsync(userPrincipal, PolicyEnum.Developer))
        .Succeeded || Value.Uid.IsMax();
    }

    if (IsSeniorSupport)
      ProductionSiteEntities = ProductionSiteService.GetAll().ToList();

    if (!isDeveloper)
      ProductionSiteEntities.RemoveAll(i => i.Uid.IsMax());

    if (AllowIsNew)
      ProductionSiteEntities = ProductionSiteEntities.Append(new()).ToList();
  }

}