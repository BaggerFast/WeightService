@using DeviceControl.Source.Shared.Api.Web.Endpoints
@using DeviceControl.Source.Shared.Services.Stores
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<UseParameterlessEndpoint
  Endpoint="ReferencesEndpoints.ProxyProductionSiteEndpoint"
  Context="productionSiteQuery"
>
  @if (productionSiteQuery.HasData)
  {
    <UseParameterlessEndpoint
      Endpoint="ReferencesEndpoints.ProxyUserProductionSiteEndpoint"
      Context="userProdSiteQuery"
    >
      @{ @if (userProdSiteQuery.HasData) InitializeProductionSite(userProdSiteQuery.Data); }
      <SelectSingle
        TItem="ProxyDto"
        Items="GetFilteredProductionSiteList(productionSiteQuery.Data, userProdSiteQuery.Data)"
        Value="ProductionSiteState.Value.ProductionSite"
        ValueChanged="@(OnSelectedChanged)"
        ItemDisplayName="@(item => item.Name)"
        Placeholder="@Localizer["FormProductionSiteDefaultPlaceholder"]"
        EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
        SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
        Disabled="@(productionSiteQuery.Data.Length <= 1)"
        Filterable
      />
    </UseParameterlessEndpoint>
  }
  else
  {
    <Skeleton Class="h-10 w-full" />
  }
</UseParameterlessEndpoint>

@code {
  # region Injects

  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  # endregion

  [Parameter] public bool AllowIsNew { get; set; }
  [Parameter] public EventCallback<ProxyDto> ValueChanged { get; set; }

  private bool IsFirstLoad { get; set; } = true;

  private Task OnValueChanged() => ValueChanged.InvokeAsync(ProductionSiteState.Value.ProductionSite);

  private async Task OnSelectedChanged(ProxyDto? value)
  {
    if (value == null) return;
    Dispatcher.Dispatch(new ChangeProductionSiteAction(value));
    await OnValueChanged();
  }

  private void InitializeProductionSite(ProxyDto userProductionSite)
  {
    if (!IsFirstLoad) return;
    IsFirstLoad = false;
    if (ProductionSiteState.Value.ProductionSite.Id.IsEmpty() && AllowIsNew) return;
    if (ProductionSiteState.Value.ProductionSite.Id.IsEmpty() && !AllowIsNew)
      Dispatcher.Dispatch(new ChangeProductionSiteAction(userProductionSite));
  }

  private List<ProxyDto> GetFilteredProductionSiteList(ProxyDto[] productionSites, ProxyDto? userProductionSite)
  {
    List<ProxyDto> productionSitesList = productionSites.ToList();
    if (AllowIsNew) productionSitesList = productionSitesList.Append(new(Guid.Empty, "Без площадки")).ToList();
    if (userProductionSite != null && !productionSitesList.Contains(ProductionSiteState.Value.ProductionSite) && productionSitesList.Contains(userProductionSite))
      Dispatcher.Dispatch(new ChangeProductionSiteAction(userProductionSite));
    return productionSitesList;
  }
}
