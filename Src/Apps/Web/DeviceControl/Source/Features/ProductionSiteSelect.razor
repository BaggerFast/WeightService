@using System.Security.Claims
@using DeviceControl.Source.Shared.Services
@using Ws.Domain.Models.Entities.Ref
@using Ws.Shared.Extensions

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<SelectSingle
  TItem="ProductionSite"
  Items="ProductionSiteEntities"
  SelectedItem="ProductionSiteState.Value.ProductionSite"
  SelectedItemChanged="@(item => Dispatcher.Dispatch(new ChangeProductionSiteAction(item)))"
  ItemDisplayName="@(item => item.IsNew ? "Без площадки" : item.Name)"
  IsDisabled="@(!IsSeniorSupport)"
  IsFilterable
/>

@code {
  [Inject] private IAuthorizationService AuthorizationService { get; set; } = default!;
  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;

  [CascadingParameter] private ProductionSite UserProductionSite { get; set; } = default!;
  [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
  [Parameter] public bool AllowIsNew { get; set; }

  private List<ProductionSite> ProductionSiteEntities { get; set; } = [];
  private bool IsSeniorSupport { get; set; }

  protected override async Task OnInitializedAsync()
  {
    ClaimsPrincipal userPrincipal = (await AuthState).User;
    bool isDeveloper = false;

    if (userPrincipal.Identity?.Name != null)
    {
      IsSeniorSupport = (await AuthorizationService.AuthorizeAsync(userPrincipal, PolicyEnum.SeniorSupport))
        .Succeeded;
      isDeveloper = (await AuthorizationService.AuthorizeAsync(userPrincipal, PolicyEnum.Developer))
        .Succeeded || ProductionSiteState.Value.ProductionSite.Uid.IsMax();
    }

    if (IsSeniorSupport)
      ProductionSiteEntities = [];

    if (!isDeveloper)
      ProductionSiteEntities.RemoveAll(i => i.Uid.IsMax());

    if (AllowIsNew)
      ProductionSiteEntities = ProductionSiteEntities.Append(new()).ToList();
  }
}