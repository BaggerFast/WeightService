@using Pl.Admin.Client.Source.Pages.References.ProductionSites.Update
@using Pl.Admin.Client.Source.Shared.Api.Web.Endpoints
@using Pl.Admin.Client.Source.Shared.Constants
@using Pl.Admin.Models.Features.References.ProductionSites.Queries
@using Pl.Admin.Models

@attribute [Route(Urls.ProductionSites + "/{Id:guid}")]
@attribute [Authorize(Policy = PolicyEnum.Support)]

<UseEndpoint
  Endpoint="@ReferencesEndpoints.ProductionSiteEndpoint"
  Arg="@Id"
  Context="query"
>
  <BrowserTitle Label="@(query.Data?.Name ?? Localizer["SectionProductionSites"])" />

  <Breadcrumbs Start="BreadcrumbStart.Back">
    <Breadcrumb Label="@Localizer["SectionProductionSites"]" Link="@Urls.ProductionSites" />
    @if (query.HasData)
    {
      <Breadcrumb Label="@query.Data.Name" />
    }
  </Breadcrumbs>

  <ViewHeader Title="@query.Data?.Name">
    <ButtonsContent>
      @if (query.HasData)
      {
        <ViewButtonShare Link="@RedirectHelper.ToAbsoluteUrl(RedirectHelper.ToProductionSite(query.Data.Id))" />
        <AuthorizeView Policy="@PolicyEnum.Admin">
          <ViewButtonUpdate TDialog="ProductionSiteUpdateDialog" Model="query.Data" />
          <ViewButtonDelete Action="@EventCallback.Factory.Create(this, () => DeleteItem(query.Data))" />
        </AuthorizeView>
      }
    </ButtonsContent>

    <TabsContent>
      <ViewTabButton Value="info" @bind-CurrentTab="CurrentTab">
        @Localizer["SectionViewInfo"]
      </ViewTabButton>
    </TabsContent>
  </ViewHeader>

  <Tabs @bind-ActiveTabId="@CurrentTab">
    @if (query.HasData)
    {
      <Tab Id="info">
        <ProductionSiteViewInfo Model="@query.Data"/>
      </Tab>
    }
  </Tabs>
</UseEndpoint>

@code {
  # region Injects

  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Inject] private PageHelper PageHelper { get; set; } = default!;
  [Inject] private RedirectHelper RedirectHelper { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;

  # endregion

  [Parameter] public Guid Id { get; set; }

  private string CurrentTab { get; set; } = "info";

  private async Task DeleteItem(ProductionSiteDto item)
  {
    await WebApi.DeleteProductionSite(item.Id);
    ReferencesEndpoints.DeleteProductionSite(item.Id);
    await PageHelper.OpenLink(Urls.ProductionSites);
  }
}