@using Pl.Admin.Client.Source.Shared.Api.Web.Endpoints
@using Pl.Admin.Client.Source.Shared.Constants
@using Pl.Admin.Models
@using Pl.Admin.Models.Features.References.Warehouses.Commands
@using Pl.Admin.Models.Features.References.Warehouses.Queries

@inherits SectionFormBase<WarehouseUpdateDto>

<SectionForm
  FormModel="@FormModel"
  ChangeDate="@Model.ChangeDt"
  CreateDate="@Model.CreateDt"
  Validator="@(new WarehouseUpdateValidator(WsDataLocalizer))"
  OnCancelAction="@OnCancelAction"
  OnSubmitAction="@UpdateItem"
>
  <FieldsContent>
    <SectionAdminGuidField Value="@Model.Id" />

    <SectionGuidField
      Label="UID 1C"
      @bind-Value="@FormModel.Id1C"
      For="@(() => FormModel.Id1C)"
    />

    <SectionTextField
      Label="@WsDataLocalizer["ColName"]"
      @bind-Value="@FormModel.Name"
      For="@(() => FormModel.Name)"
    />

    <UseParameterlessEndpoint Endpoint="ReferencesEndpoints.ProductionSitesEndpoint" Context="productionSiteQuery">
      @if (productionSiteQuery.HasData)
      {
        <SectionReadOnlyField
          Label="@WsDataLocalizer["ColProductionSite"]"
          Value="@(productionSiteQuery.Data.FirstOrDefault(x => x.Id == Model.ProductionSite.Id)?.Name ?? string.Empty)"
          For="@(() => FormModel.Id1C)"
        />
      }
    </UseParameterlessEndpoint>
  </FieldsContent>
  <ActionsContent>
    <SectionFormActionReset OnClick="@ResetAction" />
  </ActionsContent>
</SectionForm>

@code {
  #region Inject

  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;

  #endregion

  [Parameter, EditorRequired] public WarehouseDto Model { get; set; } = default!;

  protected override async Task UpdateItemAction(WarehouseUpdateDto item)
  {
    WarehouseDto dto = await WebApi.UpdateWarehouse(Model.Id, item);
    ReferencesEndpoints.UpdateWarehouse(Model.ProductionSite.Id, dto);
  }
}
