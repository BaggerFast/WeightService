@using Pl.Admin.Client.Source.Shared.Api.Labelary
@using Pl.Admin.Client.Source.Shared.Api.Web.Endpoints
@using Pl.Admin.Models.Features.Print.Labels
@using Blazor.Heroicons.Outline

<div class="flex items-center min-h-72 max-w-screen-lg w-full overflow-hidden justify-center mx-auto p-4">
  <UseEndpoint Endpoint="OperationsEndpoints.LabelZplEndpoint" Arg="Model.Id" Context="labelZplQuery">
    @if (labelZplQuery.IsLoading)
    {
      <Spinner Class="size-14 text-muted animate-spin fill-blue-600"/>
    }
    else if (labelZplQuery.HasData && !string.IsNullOrWhiteSpace(labelZplQuery.Data.Zpl))
    {
      <UseEndpoint
        Endpoint="@ZplEndpoints.ZplEndpoint"
        Arg="@(new ZplEndpointArgs(labelZplQuery.Data.Zpl, labelZplQuery.Data.Width, labelZplQuery.Data.Height, (short)labelZplQuery.Data.Rotate))"
        Context="zplQuery"
      >
        @if (zplQuery.IsLoading)
        {
          <Spinner Class="size-14 text-muted animate-spin fill-primary" />
        }
        else
        {
          @if (zplQuery.HasData)
          {
          <div class="p-2 grid grid-cols-1 overflow-hidden gap-3">
            <div class="rounded-md w-full bg-white border mx-auto border-black/[.2] overflow-hidden p-2">
              <img
                src="@($"data:image/png;base64,{zplQuery.Data}")"
                class="max-w-full h-auto max-h-96"
                alt=""
              />
            </div>
            <div class="flex justify-between items-center gap-2">
              <div class="flex gap-2 pb-1 items-center">
                <span class="pb-1px">Размер:</span>
                <Badge Variant="@BadgeVariants.Outline">
                  @($"{labelZplQuery.Data.Width}x{labelZplQuery.Data.Height}")
                </Badge>
              </div>
              <div class="flex items-center gap-2">
                <Button
                  Size="ButtonSizeType.Small"
                  Variant="ButtonVariantType.Outline"
                  OnClick="@(() => CopyToClipboard(labelZplQuery.Data.Zpl))"
                >
                  <ClipboardIcon class="size-4 mr-2" />
                  <span>ZPL</span>
                </Button>
                <Button
                  Size="ButtonSizeType.Small"
                  Variant="ButtonVariantType.Outline"
                  OnClick="@(() => CopyBase64ToClipboard($"data:image/png;base64,{zplQuery.Data}"))"
                >
                  <ClipboardIcon class="size-4 mr-2" />
                  <span>Фото</span>
                </Button>
              </div>
            </div>
          </div>
          }
          else
          {
            <p>@Localizer["LabelsPreviewErrorMsg"]</p>
          }
        }
      </UseEndpoint>
    }
    else
    {
      <p>@Localizer["LabelsPreviewErrorMsg"]</p>
    }
  </UseEndpoint>
</div>

@code {
  # region Injects

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private ILabelaryApi LabelaryApi { get; set; } = default!;
  [Inject] private ZplEndpoints ZplEndpoints { get; set; } = default!;
  [Inject] private OperationsEndpoints OperationsEndpoints { get; set; } = default!;
  [Inject] private IJSRuntime JsRuntime { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public LabelDto Model { get; set; } = default!;

  private async Task CopyToClipboard(string valueToCopy)
  {
    try
    {
      await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", valueToCopy);
    }
    catch
    {
      ToastService.ShowError("Ваш браузер не поддерживает копирование в буфер обмена");
    }
  }

  private async Task CopyBase64ToClipboard(string valueToCopy)
  {
    try
    {
      await JsRuntime.InvokeVoidAsync("copyBase64ToClipboard", valueToCopy);
    }
    catch
    {
      ToastService.ShowError("Ваш браузер не поддерживает копирование в буфер обмена");
    }
  }
}