@using Pl.Admin.Client.Source.Features
@using Pl.Admin.Client.Source.Shared.Api.Web.Endpoints
@using Pl.Admin.Client.Source.Shared.Api.Web.Models
@using Pl.Admin.Client.Source.Shared.Constants
@using Pl.Admin.Client.Source.Shared.Services.Stores
@using Pl.Admin.Models

@attribute [Route($"{Urls.Users}")]
@attribute [Authorize(Policy = PolicyEnum.SeniorSupport)]
@rendermode InteractiveServer

<PageTitle>Admin - @Localizer["SectionUsers"]</PageTitle>

<UserProductionSiteErrorSuspense>
  <UseParameterlessEndpoint
    Endpoint="@AdminEndpoints.UsersEndpoint"
    Options="@PageHelper.DefaultEndpointOptions"
    Context="query"
  >
    <DataGridHeader>
      <DataGridLabelWithCounter
        Label="@Localizer["SectionUsers"]"
        ItemsCount="@(query.Data?.Count(x => x.ProductionSiteId == ProductionSiteState.Value.ProductionSite.Id))"
        IsLoading="@query.IsLoading"
      />
      <DataGridActionReload OnClick="@(() => { query.Refetch(); })" IsLoading="@(query.IsFetching)" />
    </DataGridHeader>

    <DataGridContainer
      TItem="UserModel"
      Items="@(query.Data ?? [])"
      OnItemSelect="@(item => OpenUpdateDialog(item))"
      IsFilterable
    >
      <ColumnsContent>
        <DataGridColumn
          Caption="@WsDataLocalizer["ColUser"]"
          Field="@($"{nameof(UserModel.Fio)}.{nameof(Fio.DisplayFullName)}")"
          Width="30%"
        />
        <DataGridColumn
          Caption="@WsDataLocalizer["ColProductionSite"]"
          Field="@(nameof(UserModel.ProductionSiteId))"
          Width="40%"
          FilterCellClass="!font-normal"
          CustomFilter="@((item, _) => ProductionSiteFilter(item))"
        >
          <FilterTemplate>
            <ProductionSiteSelect
              Value="@CurrentProductionSite"
              ValueChanged="@(value => { ProductionSite = value; context.TriggerFilterChange(ProductionSite.Id); })"
              AllowIsNew
            />
          </FilterTemplate>
          <DisplayTemplate>
            @CurrentProductionSite.Name
          </DisplayTemplate>
        </DataGridColumn>
      </ColumnsContent>
      <ContextMenuContent>
        <DataGridActionUpdateItem TItem="UserModel" Action="@OpenUpdateDialog" />
        <DataGridActionDeleteItem TItem="UserModel" Action="@DeleteItem" />
      </ContextMenuContent>
    </DataGridContainer>
  </UseParameterlessEndpoint>
</UserProductionSiteErrorSuspense>

@code {

  #region Inject

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private AdminEndpoints AdminEndpoints { get; set; } = default!;
  [Inject] private IState<ProductionSiteState> ProductionSiteState { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private PageHelper PageHelper { get; set; } = default!;
  [Inject] private IDialogService DialogService { get; set; } = default!;

  #endregion

  private ProxyDto? ProductionSite { get; set; }
  private ProxyDto CurrentProductionSite => ProductionSite ?? ProductionSiteState.Value.ProductionSite;

  private Task OpenUpdateDialog(UserModel item) =>
    DialogService.ShowDialogAsync<UsersUpdateDialog>(item, PageHelper.DialogParameters);

  private bool ProductionSiteFilter(object dto)
  {
    if (dto is not Guid userProductionSiteId) return false;
    return userProductionSiteId.Equals(CurrentProductionSite.Id);
  }

  private async Task DeleteItem(UserModel item)
  {
    await WebApi.DeleteUser(item.Id);
    AdminEndpoints.DeleteUser(item.Id);
  }
}
