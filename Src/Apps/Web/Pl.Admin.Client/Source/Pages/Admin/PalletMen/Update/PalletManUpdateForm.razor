@using Pl.Admin.Client.Source.Shared.Api.Web.Endpoints
@using Pl.Admin.Models
@using Pl.Admin.Models.Features.Admins.PalletMen.Commands
@using Pl.Admin.Models.Features.Admins.PalletMen.Queries

@inherits SectionFormBase<PalletManUpdateDto>

<UseParameterlessEndpoint
  Endpoint="ReferencesEndpoints.ProxyUserProductionSiteEndpoint"
  Context="userProductionSiteQuery"
>
  <SectionForm
    FormModel="@FormModel"
    ChangeDate="@Model.ChangeDt"
    CreateDate="@Model.CreateDt"
    Validator="@PalletManUpdateValidator"
    OnCancelAction="@OnCancelAction"
    OnSubmitAction="@UpdateItem"
  >
    <FieldsContent>
      <SectionAdminGuidField Value="@Model.Id"/>

      <SectionGuidField
        Label="UID 1C"
        @bind-Value="@FormModel.Id1C"
        For="@(() => FormModel.Id1C)"
        IsCopyable
      />

      <SectionInputWrapper
        Path="@(RedirectHelper.ToWarehouse(FormModel.WarehouseId))"
        Label="@WsDataLocalizer["ColWarehouse"]"
        HtmlFor="pallet-man-warehouse"
      >
        <UseEndpoint
          Endpoint="@ReferencesEndpoints.ProxyWarehousesEndpoint"
          Arg="Model.ProductionSite.Id"
          Context="warehousesQuery"
        >
          @if (warehousesQuery.HasData)
          {
            <SelectSingle
              TItem="ProxyDto"
              HtmlId="pallet-man-warehouse"
              Items="warehousesQuery.Data"
              Value="@warehousesQuery.Data.SingleOrDefault(x => x.Id == FormModel.WarehouseId)"
              ValueChanged="@(value => FormModel.WarehouseId = value?.Id ?? Guid.Empty)"
              Placeholder="@Localizer["FormWarehouseDefaultPlaceholder"]"
              EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
              SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
              ItemDisplayName="@(item => item.Name)"
              Filterable
            />
          }
          else
          {
            <Skeleton class="h-9 w-full" />
          }
        </UseEndpoint>
        <FieldValidation For="@(() => FormModel.WarehouseId)" />
      </SectionInputWrapper>

      <SectionTextField
        Label="@WsDataLocalizer["ColPassword"]"
        @bind-Value="@FormModel.Password"
        For="@(() => FormModel.Password)"
      />

      <FormDivider>@WsDataLocalizer["ColFIO"]</FormDivider>

      <SectionTextField
        Label="@WsDataLocalizer["ColSurname"]"
        @bind-Value="@FormModel.Surname"
        For="@(() => FormModel.Surname)"
      />

      <SectionTextField
        Label="@WsDataLocalizer["ColFirstName"]"
        @bind-Value="@FormModel.Name"
        For="@(() => FormModel.Name)"
      />

      <SectionTextField
        Label="@WsDataLocalizer["ColPatronymic"]"
        @bind-Value="@FormModel.Patronymic"
        For="@(() => FormModel.Patronymic)"
      />
    </FieldsContent>
    <ActionsContent>
      <SectionFormActionReset OnClick="@ResetAction" />
    </ActionsContent>
  </SectionForm>
</UseParameterlessEndpoint>

@code {
  #region Inject

  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Inject] private RedirectHelper RedirectHelper { get; set; } = default!;
  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;
  [Inject] private AdminEndpoints AdminEndpoints { get; set; } = default!;
  [Inject] private PalletManUpdateValidator PalletManUpdateValidator { get; set; } = default!;

  #endregion

  [Parameter, EditorRequired] public PalletManDto Model { get; set; } = default!;

  protected override async Task UpdateItemAction(PalletManUpdateDto item)
  {
    PalletManDto dto = await WebApi.UpdatePalletMan(Model.Id, item);
    AdminEndpoints.UpdatePalletMan(Model.ProductionSite.Id, dto);
  }
}
