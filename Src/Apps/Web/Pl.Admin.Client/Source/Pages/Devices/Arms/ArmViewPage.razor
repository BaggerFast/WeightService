@using Pl.Admin.Client.Source.Shared.Api.Web.Endpoints
@using Pl.Admin.Client.Source.Shared.Constants
@using Pl.Admin.Models.Features.Devices.Arms.Queries
@using Pl.Admin.Models
@using Blazor.Heroicons.Outline

@attribute [Route(Urls.Arms + "/{Id:guid}")]

<UseEndpoint
  Endpoint="@DevicesEndpoints.ArmEndpoint"
  Arg="@Id"
  Context="armQuery"
>
  <div class="w-full">
    <Breadcrumbs>
      <Breadcrumb Label="Линии" Link="@Urls.Arms" />
      @if (armQuery.HasData)
      {
        <Breadcrumb Label="@armQuery.Data.Name" />
      }
    </Breadcrumbs>
    <div class="w-full border-b">
      <div class="py-2 flex w-full justify-between items-center">
        @if (armQuery.HasData)
        {
          <div class="flex gap-2 items-center">
            <h2 class="font-bold text-3xl truncate tracking-tight">@armQuery.Data.Name</h2>
            <div class="@Css.Class("size-4 rounded-full overflow-hidden", (DateTime.Now - armQuery.Data.ChangeDt).TotalMinutes < 5 ? "bg-green-500" : "bg-muted-foreground")"></div>
          </div>
          <div class="flex gap-2">
            <Button Variant="ButtonVariantType.Outline" OnClick="@(() => OpenShareDialog(armQuery.Data))">
              <ShareIcon class="size-4 mr-2"/>
              <span>Поделиться</span>
            </Button>
            <Button Variant="ButtonVariantType.Outline" OnClick="@(() => OpenUpdateDialog(armQuery.Data))">
              <PencilIcon class="size-4 mr-2"/>
              <span>Изменить</span>
            </Button>
            <Button Variant="ButtonVariantType.Destructive" OnClick="@(() => OpenDeleteDialog(armQuery.Data))">
              <TrashIcon class="size-4 mr-2"/>
              <span>Удалить</span>
            </Button>
          </div>
          }
        else
        {
          <Skeleton Class="h-8 w-40"/>
        }
      </div>
      <div class="flex gap-6">
        <ViewTabButton Value="info" @bind-CurrentTab="CurrentTab">
          Информация
        </ViewTabButton>
        <ViewTabButton Value="plus" @bind-CurrentTab="CurrentTab">
          ПЛУ
        </ViewTabButton>
        <ViewTabButton Value="labels" @bind-CurrentTab="CurrentTab">
          Этикетки
        </ViewTabButton>
        <ViewTabButton Value="pallets" @bind-CurrentTab="CurrentTab">
          Паллеты
        </ViewTabButton>
        <ViewTabButton Value="analytics" @bind-CurrentTab="CurrentTab">
          Аналитика
        </ViewTabButton>
      </div>
    </div>
    <div class="flex flex-col w-full pt-4">
      <Tabs @bind-ActiveTabId="@CurrentTab">
        @if (armQuery.HasData)
        {
          <Tab Id="info">
            <ArmViewInfo Arm="@armQuery.Data"/>
          </Tab>
          <Tab Id="analytics">
            <ArmViewAnalytics Arm="@armQuery.Data" />
          </Tab>
          <Tab Id="labels">
            <ArmViewLabels Arm="@armQuery.Data" />
          </Tab>
          <Tab Id="pallets">
            <ArmViewPallets Arm="@armQuery.Data" />
          </Tab>
          <Tab Id="plus">
            <ArmViewPlu Arm="@armQuery.Data" />
          </Tab>
        }
        else
        {
          <Spinner Class="inline size-32 text-muted-foreground animate-spin fill-primary mx-auto py-20" />
        }
      </Tabs>
    </div>
  </div>
</UseEndpoint>



@code {
  [Inject] private PageHelper PageHelper { get; set; } = default!;
  [Inject] private IDialogService DialogService { get; set; } = default!;
  [Inject] private DevicesEndpoints DevicesEndpoints { get; set; } = default!;
  [Inject] private RedirectHelper RedirectHelper { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Parameter] public Guid Id { get; set; }

  private string CurrentTab { get; set; } = "info";

  private Task OpenUpdateDialog(ArmDto item) =>
    DialogService.ShowDialogAsync<ArmUpdateDialog>(item, PageHelper.DialogParameters);

  private async Task OpenDeleteDialog(ArmDto item)
  {
    EventCallback action = EventCallback.Factory.Create(this, () => DeleteItem(item));
    await DialogService.ShowDialogAsync<DeleteItemDialog>(action, PageHelper.DialogParameters);
  }

  private async Task OpenShareDialog(ArmDto item)
  {
    string url = RedirectHelper.ToAbsoluteUrl(RedirectHelper.ToArm(item.Id));
    await DialogService.ShowDialogAsync<ShareUrlDialog>(url, PageHelper.DialogParameters);
  }

  private async Task DeleteItem(ArmDto item)
  {
    await WebApi.DeleteArm(item.Id);
    DevicesEndpoints.DeleteArm(item.ProductionSite.Id, item.Id);
    await PageHelper.OpenLink(Urls.Arms);
  }
}