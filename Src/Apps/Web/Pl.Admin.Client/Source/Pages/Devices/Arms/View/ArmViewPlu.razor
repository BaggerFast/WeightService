@using Pl.Admin.Client.Source.Shared.Api.Web.Endpoints
@using Refit
@using Pl.Admin.Models
@using Pl.Admin.Models.Features.Devices.Arms.Queries
@using Pl.Admin.Models.Features.References1C.Brands

<UseEndpoint Endpoint="@DevicesEndpoints.ArmPluEndpoint" Arg="Model.Id" Options="@(PageHelper.DefaultEndpointOptions)" Context="plusQuery">
  <DataGridHeader>
    <span class="text-xl font-medium">@Localizer["SectionArmPlu"]</span>
    <DataGridItemsSelected
      Count="@(plusQuery.Data?.Length ?? 0)"
      SelectedCount="@(plusQuery.Data?.Where(x => x.IsActive).Count() ?? 0)"
      IsLoading="plusQuery.IsLoading"
    />
    <DataGridActionReload OnClick="@plusQuery.RefetchAsync" IsLoading="plusQuery.IsFetching"/>
  </DataGridHeader>

  <DataGridContainer
    TItem="PluArmDto"
    Items="@(plusQuery.HasData ? plusQuery.Data : [])"
    ItemsPerPage="11"
    IsFilterable
  >
    <ColumnsContent>
      <DataGridColumn
        Caption="@WsDataLocalizer["ColPluActive"]"
        Field="@($"{nameof(PluArmDto.IsActive)}")"
        Width="8%"
        Sortable="false"
        FilterMethod="DataGridColumnFilterMethod.Equals"
        FilterCellClass="!font-normal"
      >
        <FilterTemplate>
          @{ context.SearchValue = IsActiveFilter; }
          <SelectSingle
            TItem="bool?"
            Items="@( [false, true, null])"
            @bind-Value="@IsActiveFilter"
            @bind-Value:after="@(() => context.TriggerFilterChange(IsActiveFilter))"
            Placeholder="@Localizer["SelectItemNotSelected"]"
            ItemDisplayName="@(item => item == null ? Localizer["SelectItemNotSelected"] :
                               item.Value ? Localizer["StateOn"] : Localizer["StateOff"])"
          />
        </FilterTemplate>
        <DisplayTemplate>
          <div class="size-full flex items-center justify-center">
            <Switch
              Value="@context.IsActive"
              ValueChanged="@(value => value ? AddArmPlu(context) : DeleteArmPlu(context))"
            />
          </div>
        </DisplayTemplate>
      </DataGridColumn>

      <DataGridColumn
        Caption="@WsDataLocalizer["ColNumber"]"
        Field="@($"{nameof(PluArmDto.Number)}")"
        Width="10%"
      />

      <DataGridColumn
        Caption="@WsDataLocalizer["ColType"]"
        Field="@nameof(PluArmDto.IsWeight)"
        Width="15%"
        Sortable="false"
        FilterCellClass="!font-normal"
      >
        <FilterTemplate>
          @{ context.SearchValue = IsWeightFilter; }
          <SelectSingle
            TItem="bool?"
            Items="@( [false, true, null])"
            @bind-Value="@IsWeightFilter"
            @bind-Value:after="@(() => context.TriggerFilterChange(IsWeightFilter))"
            Placeholder="@Localizer["SelectItemNotSelected"]"
            ItemDisplayName="@(item => item == null ? Localizer["SelectItemNotSelected"] :
                               item.Value ? WsDataLocalizer["ColPluWeight"] : WsDataLocalizer["ColPluPiece"])"
          />
        </FilterTemplate>
        <DisplayTemplate>
          <span>
            @(context.IsWeight ? WsDataLocalizer["ColPluWeight"] : WsDataLocalizer["ColPluPiece"])
          </span>
        </DisplayTemplate>
      </DataGridColumn>

      <DataGridColumn
        Caption="@WsDataLocalizer["ColName"]"
        Field="@($"{nameof(PluArmDto.Name)}")"
        Width="30%"
      />

      <DataGridColumn
        Caption="@WsDataLocalizer["ColBrand"]"
        Field="@($"{nameof(PluArmDto.Brand)}")"
        Width="30%"
        Sortable="false"
        FilterMethod="DataGridColumnFilterMethod.Equals"
        FilterCellClass="!font-normal"
      >
        <FilterTemplate>
          <UseParameterlessEndpoint Endpoint="@References1CEndpoints.BrandsEndpoint" Context="brandsQuery">
            @if (brandsQuery.HasData)
            {
              <SelectSingle
                TItem="BrandDto?"
                Items="@(brandsQuery.Data.Concat([null]))"
                @bind-Value="@BrandFilter"
                @bind-Value:after="@(() => context.TriggerFilterChange(BrandFilter?.Name))"
                Placeholder="@Localizer["SelectItemNotSelected"]"
                ItemDisplayName="@(item => item?.Name ?? Localizer["SelectItemNotSelected"])"
                Filterable
              />
            }
            else
            {
              <Skeleton Class="h-9 w-full" />
            }
          </UseParameterlessEndpoint>
        </FilterTemplate>
      </DataGridColumn>
    </ColumnsContent>
    <ContextMenuContent>
      <DataGridActionOpenItem Link="@(RedirectHelper.ToPlu(context.Item.Id))" />
      <DataGridActionOpenInNewTab TItem="ArmDto" Link="@(RedirectHelper.ToPlu(context.Item.Id))" />
    </ContextMenuContent>
  </DataGridContainer>
</UseEndpoint>

@code {

  # region Injects

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private RedirectHelper RedirectHelper { get; set; } = default!;
  [Inject] private PageHelper PageHelper { get; set; } = default!;
  [Inject] private IWebApi WebApi { get; set; } = default!;
  [Inject] private References1CEndpoints References1CEndpoints { get; set; } = default!;
  [Inject] private DevicesEndpoints DevicesEndpoints { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public ArmDto Model { get; set; } = default!;

  private BrandDto? BrandFilter { get; set; }
  private bool? IsWeightFilter { get; set; }
  private bool? IsActiveFilter { get; set; }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    IsWeightFilter = Model.Type switch
    {
      ArmType.Pc => false,
      ArmType.Tablet => true,
      _ => IsWeightFilter
    };
  }

  private async Task DeleteArmPlu(PluArmDto item)
  {
    try
    {
      await WebApi.DeleteArmPlu(Model.Id, item.Id);
      DevicesEndpoints.DeleteArmPlu(Model.Id, item.Id);
    }
    catch (ApiException ex)
    {
      ToastService.ShowError(ex.GetMessage(string.Format(Localizer["ArmPluRemovedUnsuccessfully"], item.Number)));
    }
  }

  private async Task AddArmPlu(PluArmDto item)
  {
    try
    {
      await WebApi.AddArmPlu(Model.Id, item.Id);
      DevicesEndpoints.AddArmPlu(Model.Id, item.Id);
    }
    catch (ApiException ex)
    {
      ToastService.ShowError(ex.GetMessage(string.Format(Localizer["ArmPluAddedUnsuccessfully"], item.Number)));
    }
  }
}