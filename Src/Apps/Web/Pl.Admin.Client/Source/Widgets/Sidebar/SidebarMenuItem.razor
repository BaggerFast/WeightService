@using Blazor.Heroicons.Outline
@using Blazor.Heroicons
@implements IDisposable

<AuthorizeView Policy="@(RequiredClaim)">
  <ChildContent Context="main">
    <li class="group relative font-light" data-sidebar="menu-item" data-state="@(IsOpened ? "open" : "closed")">
      <button
        data-active="@(GetIsAnyActive() ? "true" : "false")"
        type="button"
        @onclick="SwitchVisibility"
        class="peer w-full h-9 gap-2 p-2 overflow-hidden flex text-left items-center transition-colors justify-between rounded-md hover:bg-secondary/50 data-[active=true]:font-normal"
      >
        <div class="flex gap-2 items-center">
          <Heroicon
            Name="@Icon"
            Type="HeroiconType.Outline"
            class="size-[1.1rem] shrink-0 pb-px"
          />
          <span class="truncate">
          @Label
        </span>
        </div>
        <ChevronRightIcon class="@Css.Class("peer size-4 transition-transform shrink-0", IsOpened ? "rotate-90" : "")" />
      </button>
      <ul class="@Css.Class("flex flex-col border-s mx-4 px-2.5 transition-colors", IsOpened ? "visible py-0.5" : "invisible h-0 overflow-hidden", GetIsAnyActive() ? "border-s-accent-foreground/[.4]" : "")">
        @foreach (NavMenuItemModel item in Items)
        {
          <AuthorizeView Policy="@(item.Claim)">
            <ChildContent>
              <li>
                <a href="@item.Link">
                  <button
                    type="button"
                    class="@Css.Class("px-3 py-1.5 w-full h-8 flex text-primary items-center truncate transition-colors rounded-md", GetIsActivePath(item.Link) ?
                             "font-normal bg-secondary" : "hover:bg-secondary/[.5]")">
                    @item.Name
                  </button>
                </a>
              </li>
            </ChildContent>
          </AuthorizeView>
        }
      </ul>
    </li>
  </ChildContent>
</AuthorizeView>

@code {
  [Inject] private NavigationManager NavigationManager { get; set; } = default!;

  [Parameter, EditorRequired] public string Label { get; set; } = string.Empty;
  [Parameter, EditorRequired] public string Icon { get; set; } = HeroiconName.Home;
  [Parameter, EditorRequired] public NavMenuItemModel[] Items { get; set; } = [];
  [Parameter, EditorRequired] public string RequiredClaim { get; set; } = string.Empty;

  private bool IsOpened { get; set; }

  protected override void OnInitialized()
  {
    NavigationManager.LocationChanged += HandleLocationChanged;
    IsOpened = GetIsAnyActive();
  }

  private bool GetIsActivePath(string relativePath)
  {
    string currentUri = NavigationManager.Uri;
    string uriToCheck = GetAbsolutePath(relativePath);
    bool startsWithFullPath = currentUri.StartsWith(uriToCheck, StringComparison.OrdinalIgnoreCase);
    bool isExactMatchOrSubpath = currentUri.Length >= uriToCheck.Length &&
                                 (currentUri.Length == uriToCheck.Length || currentUri[uriToCheck.Length] == '/');
    return startsWithFullPath && isExactMatchOrSubpath;
  }

  private void HandleLocationChanged(object? sender, LocationChangedEventArgs e) => StateHasChanged();

  private string GetAbsolutePath(string relativePath) =>
    new Uri(new(NavigationManager.BaseUri), relativePath).ToString();

  private bool GetIsAnyActive() => Items.Any(item => GetIsActivePath(item.Link));

  private void SwitchVisibility() => IsOpened = !IsOpened;

  public void Dispose() => NavigationManager.LocationChanged -= HandleLocationChanged;
}
