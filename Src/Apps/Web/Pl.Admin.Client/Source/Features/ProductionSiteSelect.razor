@using Pl.Admin.Client.Source.Shared.Api.Web.Endpoints

<UseParameterlessEndpoint
  Endpoint="ReferencesEndpoints.ProxyProductionSiteEndpoint"
  Context="productionSiteQuery"
>
  @if (productionSiteQuery.HasData)
  {
    <SelectSingle
      TItem="ProxyDto"
      Items="GetFilteredProductionSiteList(productionSiteQuery.Data)"
      @bind-Value="Value"
      @bind-Value:after="OnValueChanged"
      ItemDisplayName="@(item => item.Name)"
      Placeholder="@Localizer["FormProductionSiteDefaultPlaceholder"]"
      EmptyPlaceholder="@Localizer["FormSelectEmptyDefaultPlaceholder"]"
      SearchPlaceholder="@Localizer["FormSelectSearchDefaultPlaceholder"]"
      Disabled="@(productionSiteQuery.Data.Length <= 1)"
      Filterable
    />
  }
  else
  {
    <Skeleton Class="h-10 w-full" />
  }
</UseParameterlessEndpoint>

@code {
  # region Injects

  [Inject] private ReferencesEndpoints ReferencesEndpoints { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  # endregion

  [Parameter] public bool AllowIsNew { get; set; }
  [Parameter] public ProxyDto Value { get; set; } = new(Guid.Empty, "Без площадки");
  [Parameter] public EventCallback<ProxyDto> ValueChanged { get; set; }

  private async Task OnValueChanged() => await ValueChanged.InvokeAsync(Value);

  private List<ProxyDto> GetFilteredProductionSiteList(ProxyDto[] productionSites)
  {
    List<ProxyDto> productionSitesList = productionSites.ToList();
    if (AllowIsNew) productionSitesList = productionSitesList.Append(new(Guid.Empty, "Без площадки")).ToList();
    return productionSitesList;
  }
}
