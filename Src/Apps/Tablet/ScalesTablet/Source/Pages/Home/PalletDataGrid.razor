@using Blazor.Heroicons.Outline
@using Force.DeepCloner
@using ScalesTablet.Source.Features.CreatePalletDialog

<div class="w-full flex justify-between items-center pb-3">
  <h2 class="text-lg">Список паллет</h2>
  <Button OnClick="@ShowCreateDialog">
    <PlusIcon class="size-5 mr-2" />
    <span>Добавить</span>
  </Button>
</div>
<div class="w-full max-h-full bg-background rounded-md border overflow-hidden">
  <div class="w-full max-h-full flex flex-col bg-background rounded-md border divide-y">
    <div class="w-full h-12 shrink-0 grid grid-cols-[3rem,1fr,1fr,8rem] divide-x">
      <div class="size-full text-sm font-medium flex items-center justify-center">№</div>
      <div class="size-full text-sm font-medium flex items-center px-3">Тип</div>
      <div class="size-full text-sm font-medium flex items-center px-3">Кол-во партий</div>
      <div class="size-full text-sm font-medium flex items-center px-3"></div>
    </div>
    @if (!Value.Any())
    {
      <div class="w-full flex items-center text-sm justify-center h-12">
        <span>Список пуст</span>
      </div>
    }
    <div class="w-full max-h-full overflow-y-auto divide-y">
      @foreach ((Pallet item, int index) in Value.Select((value, index) => (value, index)))
      {
      <div class="w-full h-12 shrink-0 grid grid-cols-[3rem,1fr,1fr,8rem] divide-x">
        <div class="size-full text-sm font-medium flex items-center justify-center">
          @(index + 1)
        </div>
        <div class="size-full flex items-center px-3">
          @(item.Mono ? "Монопаллета" : "Многопаллета")
        </div>
        <div class="size-full flex items-center px-3">
          @item.Batches.Count
        </div>
        <div class="size-full flex items-center justify-center gap-4">
          <Button
            OnClick="@(() => ShowDeleteDialog(item.Id))"
            Variant="ButtonVariantType.Destructive"
            Size="ButtonSizeType.Icon"
          >
            <TrashIcon class="size-5" />
          </Button>
          <Button
            OnClick="@(() => ShowEditDialog(item))"
            Variant="ButtonVariantType.Secondary"
            Size="ButtonSizeType.Icon"
          >
            <PencilIcon class="size-5" />
          </Button>
        </div>
      </div>
      }
    </div>
  </div>
</div>

@code {
  [Inject] private IToastService ToastService { get; set; } = default!;
  [Inject] private IDialogService DialogService { get; set; } = default!;

  [Parameter] public List<Pallet> Value { get; set; } = [];
  [Parameter] public EventCallback<List<Pallet>> ValueChanged { get; set; }

  private async Task SetValue(List<Pallet> newValue)
  {
    Value = newValue;
    await ValueChanged.InvokeAsync(Value);
  }

  private async Task DeleteItem(Guid itemId)
  {
    int index = Value.FindIndex(x => x.Id.Equals(itemId));
    if (index == -1) return;
    Value.RemoveAt(index);
    await SetValue(Value);
  }

  private async Task ReplaceItem(Pallet pallet)
  {
    int index = Value.FindIndex(x => x.Id.Equals(pallet.Id));
    if (index == -1) return;
    Value[index] = pallet;
    await SetValue(Value);
  }

  private Task ShowDeleteDialog(Guid itemId) => DialogService.ShowDialogAsync<DeletePalletDialog>(
    EventCallback.Factory.Create(this, () => DeleteItem(itemId)), new());

  private async Task ShowEditDialog(Pallet pallet)
  {
    IDialogReference dialog = await DialogService.ShowDialogAsync<CreatePalletDialog>(
      pallet.DeepClone(), new() { PreventDismissOnOverlayClick = true });
    DialogResult result = await dialog.Result;
    if (result is { Cancelled: false, Data: Pallet newItem })
      await ReplaceItem(newItem);
  }

  private async Task ShowCreateDialog()
  {
    IDialogReference dialog = await DialogService.ShowDialogAsync<CreatePalletDialog>(
      new Pallet(), new() { PreventDismissOnOverlayClick = true });
    DialogResult result = await dialog.Result;
    if (result is { Cancelled: false, Data: Pallet newItem })
      await SetValue(Value.Append(newItem).ToList());
  }
}
