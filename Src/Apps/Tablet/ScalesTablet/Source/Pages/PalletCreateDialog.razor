@using ScalesTablet.Source.Shared
@using Blazor.Heroicons.Outline

@implements IDialogContentComponent

<Dialog Class="max-w-screen-md select-none">
  <DialogHeader>
    <Button
      Variant="ButtonVariantType.Secondary"
      Class="disabled:!opacity-100"
      Disabled
    >
      Добавление паллеты
    </Button>
  </DialogHeader>
  <div class="flex flex-col w-full bg-secondary/90">
    @if (IsFirstStep)
    {
      <div class="max-w-md w-full pb-4 pt-6 mx-auto">
        <div class="w-full space-y-5">
          <div class="w-full space-y-1">
            <span class="text-sm font-medium leading-none">
              Тип паллеты
            </span>
            <div class="w-full flex h-10 gap-2 p-1.5 bg-primary/5 rounded-md">
              <div class="w-1/2 h-full bg-background flex items-center justify-center rounded-md">
                Монопаллета
              </div>
              <div class="w-1/2 h-full flex items-center justify-center rounded-md">
                Многопаллета
              </div>
            </div>
          </div>
          <FormFieldWrapper Label="Номер ПЛУ" HtmlId="pallet-plu">
            <InputTextField @bind-Value="@Plu"/>
          </FormFieldWrapper>
        </div>
        <div class="flex justify-end gap-2 mt-10">
          <Button Variant="ButtonVariantType.Outline" OnClick="@(() => Dialog.CloseAsync())">
            Отмена
          </Button>
          <Button OnClick="@(() => IsFirstStep = false)">
            Продолжить
          </Button>
        </div>
      </div>
    }
    else
    {
    <div class="w-full py-4 max-w-xl mx-auto">
      <div class="w-full flex justify-between items-center pb-3">
        <h2 class="text-lg">Список партий</h2>
        <Button OnClick="@AddItem">Добавить</Button>
      </div>
      <div class="w-full max-h-full bg-background rounded-md border overflow-y-auto">
        <div class="w-full h-10 grid grid-cols-[1fr,1fr,1fr,5rem] divide-x border-b">
          <div class="size-full text-sm font-medium flex items-center px-2">ПЛУ</div>
          <div class="size-full text-sm font-medium flex items-center px-2">Дата</div>
          <div class="size-full text-sm font-medium flex items-center px-2">Вес</div>
          <div class="size-full text-sm font-medium flex items-center px-2"></div>
        </div>
        @foreach (PartiaItem item in Partias)
        {
          <div class="w-full h-10 grid grid-cols-[1fr,1fr,1fr,5rem] divide-x border-b">
            <input
              @bind-value="@item.Plu"
              @bind-value:after="@(() => OnItemChanged(item))"
              class="px-2 bg-background size-full"
              placeholder="Введите ПЛУ..."
              disabled="@IsMono"
            />
            <input
              @bind-value="@item.Date"
              @bind-value:after="@(() => OnItemChanged(item))"
              class="px-2 bg-background size-full"
              placeholder="Введите дату..."
              type="number"
            />
            <input
              @bind-value="@item.Weight"
              @bind-value:after="@(() => OnItemChanged(item))"
              class="px-2 bg-background size-full"
              placeholder="Введите вес..."
              type="number"
            />
            <div class="size-full flex items-center px-2">
              <Button
                OnClick="@(() => DeleteItem(item.Id))"
                Variant="ButtonVariantType.Ghost"
              >
                <TrashIcon class="size-5 text-destructive"/>
              </Button>
            </div>
          </div>
        }
      </div>
      <div class="flex justify-end gap-2 mt-10">
        <Button Variant="ButtonVariantType.Outline" OnClick="@(() => IsFirstStep = true)">
          Назад
        </Button>
        <Button OnClick="@OnSubmit">
          Подтвердить
        </Button>
      </div>
    </div>
    }
  </div>
</Dialog>

@code {
  [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;

  private List<PartiaItem> Partias { get; set; } = [];
  private bool IsMono { get; set; } = true;
  private string Plu { get; set; } = string.Empty;
  private bool IsFirstStep { get; set; } = true;

  private void AddItem()
  {
    PartiaItem newItem = new();
    if (IsMono) newItem.Plu = Plu;
    Partias.Add(newItem);
  }

  private void OnItemChanged(PartiaItem item)
  {
    int index = Partias.FindIndex(x => x.Id.Equals(item.Id));
    if (index == -1) return;
    Partias[index] = item;
  }

  private void DeleteItem(Guid itemId)
  {
    int index = Partias.FindIndex(x => x.Id.Equals(itemId));
    if (index == -1) return;
    Partias.RemoveAt(index);
  }

  private async Task OnSubmit()
  {
    PalletItem pallet = new(Partias);
    await Dialog.CloseAsync(pallet);
  }
}

