@using ScalesTablet.Source.Features
@using ScalesTablet.Source.Features.CreatePalletDialog
@using Ws.Tablet.Models.Features.Pallets.Output
@using Blazor.Heroicons.Outline
@using ScalesTablet.Source.Shared.Services
@using Button = Ws.Components.Source.UI.Button

@implements IDialogContentComponent<PalletDto>

<Dialog Class="max-w-screen-md select-none">
  <DialogHeader>
    <Button
      Variant="ButtonVariantType.Secondary"
      Class="disabled:!opacity-100"
      Disabled
    >
      Просмотр паллеты
    </Button>
  </DialogHeader>
  <div class="flex flex-col w-full max-h-full bg-secondary overflow-y-auto px-4">
    <div class="w-full py-4 max-w-sm mx-auto">
      <div class="grid w-full grid-cols-[auto_1fr] mx-auto gap-y-2 gap-x-6 p-3 bg-background rounded-md border">
        <ResultBlockItem>
          <TitleContext>
            <DocumentIcon class="size-4 mr-1 pb-px"/>
            <h3>Документ</h3>
          </TitleContext>
          <ValueContext>
            @Content.DocumentBarcode
          </ValueContext>
        </ResultBlockItem>
        <ResultBlockItem>
          <TitleContext>
            <DocumentIcon class="size-4 mr-1 pb-px"/>
            <h3>Номер</h3>
          </TitleContext>
          <ValueContext>
            @Content.Number
          </ValueContext>
        </ResultBlockItem>
        <ResultBlockItem>
          <TitleContext>
            <ArrowsPointingOutIcon class="size-4 mr-1 pb-px"/>
            <h3>Тип</h3>
          </TitleContext>
          <ValueContext>
            @(Content.Batches.Select(x => x.Number).Distinct().Count() <= 1 ? "Монопаллета" : "Многопаллета")
          </ValueContext>
        </ResultBlockItem>
        <ResultBlockItem>
          <TitleContext>
            <ArchiveBoxIcon class="size-4 mr-1 pb-px"/>
            <h3>Кол-во</h3>
          </TitleContext>
          <ValueContext>
            @Content.Batches.Count шт
          </ValueContext>
        </ResultBlockItem>
        <ResultBlockItem>
          <TitleContext>
            <BookmarkIcon class="size-4 mr-1 pb-px"/>
            <h3>ПЛУ</h3>
          </TitleContext>
          <ValueContext>
            <div class="w-full flex gap-2 items-center overflow-hidden">
              @foreach (int plu in Content.Batches.Select(x => x.Number).Distinct().ToList())
              {
                <Badge>@plu</Badge>
              }
            </div>
          </ValueContext>
        </ResultBlockItem>
        <ResultBlockItem>
          <TitleContext>
            <CalendarIcon class="size-4 mr-1 pb-px"/>
            <h3>Дата</h3>
          </TitleContext>
          <ValueContext>
            @Content.CreateDt.ToString("dd.MM.yyyy")
          </ValueContext>
        </ResultBlockItem>
        <ResultBlockItem>
          <TitleContext>
            <HomeIcon class="size-4 mr-1 pb-px"/>
            <h3>Склад</h3>
          </TitleContext>
          <ValueContext>
            @Content.WarehouseName
          </ValueContext>
        </ResultBlockItem>
        <ResultBlockItem>
          <TitleContext>
            <UserIcon class="size-4 mr-1 pb-px"/>
            <h3>Создатель</h3>
          </TitleContext>
          <ValueContext>
            @Content.User.DisplayShortName
          </ValueContext>
        </ResultBlockItem>
      </div>
      <div class="max-w-xs w-full flex flex-col gap-2 mx-auto my-4">
        <PrintComponentButton
          TComponent="PalletDocument"
          Variant="ButtonVariantType.Outline"
          Parameters="@(new() { { nameof(PalletDocument.Pallet), Content } })"
        />
        <Button Variant="ButtonVariantType.Outline" OnClick="@PrintLabels">
          Печать этикеток
        </Button>
      </div>
      <div class="flex justify-end gap-2 mt-8">
        <Button OnClick="@(() => Dialog.CloseAsync())">
          Выход
        </Button>
      </div>
    </div>
  </div>
</Dialog>

@code {
  [Inject] private IPrinterService PrinterService { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;
  [CascadingParameter] public FluentDialog Dialog { get; set; } = default!;
  [Parameter] public PalletDto Content { get; set; } = default!;

  private async Task PrintLabels()
  {
    try
    {
      ToastService.ShowInfo(Content.ZplLabel);
      await PrinterService.PrintZplAsync(Content.ZplLabel);
    }
    catch
    {
      ToastService.ShowError("Ошибка печати этикетки");
    }
  }
}