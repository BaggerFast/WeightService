@using Refit
@using ScalesTablet.Source.Shared.Stores
@using vNext.BlazorComponents.FluentValidation
@using Ws.Tablet.Models
@using Ws.Tablet.Models.Features.Users

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (UserState.Value.User == null)
{
  <div class="rounded-lg overflow-hidden max-w-sm p-6 border shadow-sm bg-background w-full">
    <div class="w-full pb-4 border-b">
      <h2 class="text-lg font-semibold leading-none tracking-tight">
        Вход в систему
      </h2>
    </div>
    <EditForm
      Model="Model"
      OnValidSubmit="@OnValidSubmit"
      class="mt-4"
    >
      <FluentValidationValidator Validator="@(new AuthModelValidator())" />
      <FormFieldWrapper Label="Пароль" HtmlId="login-password">
        <InputTextField
          id="login-password"
          Value="@Model.Password"
          @oninput="@OnPasswordInput"
          Placeholder="Введите пароль..."
          maxLength="4"
          inputmode="numeric"
        />
        <FieldValidation For="@(() => Model.Password)" />
      </FormFieldWrapper>
      <div class="w-full flex justify-end">
        <Button Type="@ButtonType.Submit" Disabled="@IsLoading" Class="!mt-4">
          Войти
        </Button>
      </div>
    </EditForm>
  </div>
}
else
{
  @ChildContent
}

@code {
  [Inject] private IState<UserState> UserState { get; set; } = default!;
  [Inject] private ITabletApi TabletApi { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;

  [Parameter] public RenderFragment? ChildContent { get; set; }

  private void OnPasswordInput(ChangeEventArgs e)
  {
    string inputValue = e.Value?.ToString()?.Trim() ?? string.Empty;
    if (inputValue == Model.Password) return;
    inputValue = new(e.Value?.ToString()?.Where(char.IsDigit).ToArray());
    Model.Password = inputValue;
  }

  private AuthFormModel Model { get; set; } = new();
  private bool IsLoading { get; set; }

  private async Task OnValidSubmit()
  {
    ushort.TryParse(Model.Password, out ushort parsedPassword);
    string toastId = Guid.NewGuid().ToString();
    ToastService.ClearAll();
    IsLoading = true;
    StateHasChanged();

    try
    {
      ToastService.ShowProgressToast(new()
      {
        Id = toastId,
        Intent = ToastIntent.Progress,
        Title = "Процесс авторизации",
        Timeout = null,
        Content = new() { Details = "Подождите пока мы не проверим пользователя по данному коду" }
      });

      UserDto dto = await TabletApi.GetUserByCode(parsedPassword);

      Dispatcher.Dispatch(new ChangeUserAction(dto));
    }
    catch (ApiException ex)
    {
      ToastService.ShowError(ex.GetMessage("Неизвестная ошибка"));
    }
    catch (Exception ex)
    {
      ToastService.ShowError(ex.Message);
    }

    IsLoading = false;
    ToastService.CloseToast(toastId);
    StateHasChanged();
  }
}