@using Blazor.Heroicons.Outline
@using ScalesTablet.Source.Shared.Api.Tablet.Endpoints
@using ScalesTablet.Source.Shared.Stores

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<div class="flex justify-between items-center w-full overflow-hidden">
  <UseParameterlessEndpoint Endpoint="@ArmEndpoints.ArmEndpoint" Context="query">
    @if (!query.HasData)
    {
      <Skeleton Class="size-[3.25rem] !rounded-full shrink-0"/>
    }
    else
    {
      <div class="size-[3.25rem] p-3 border shrink-0 rounded-full flex items-center justify-center bg-secondary">
        <DeviceTabletIcon class="size-full rotate-[270deg]"/>
      </div>
    }
    <div class="flex w-full flex-col px-3 justify-start overflow-hidden">
      @if (!query.HasData)
      {
        <Skeleton Class="w-32 h-6"/>
        <Skeleton Class="w-32 h-6 mt-1"/>
      }
      else
      {
        <span class="font-medium truncate">@query.Data.Name @(UserState.Value.User == null ? string.Empty : $"({UserState.Value.User.Fio.DisplayShortName})")</span>
        <span class="truncate text-muted-foreground text-sm">@query.Data.WarehouseName</span>
      }
    </div>
    <Button
      Class="shrink-0 border"
      OnClick="@(() => query.RefetchAsync())"
      Variant="ButtonVariantType.Secondary"
      Size="ButtonSizeType.Small"
      Disabled="@query.IsFetching"
    >
      <ArrowPathIcon class="size-4 mr-2"/>
      <span>Обновить</span>
    </Button>
  </UseParameterlessEndpoint>

</div>

@code {
  [Inject] private IState<UserState> UserState { get; set; } = default!;
  [Inject] private ArmEndpoints ArmEndpoints { get; set; } = default!;
}