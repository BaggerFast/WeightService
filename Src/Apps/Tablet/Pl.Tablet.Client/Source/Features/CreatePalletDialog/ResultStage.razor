@using Blazor.Heroicons.Outline
@using Refit
@using Pl.Tablet.Client.Source.Shared.Stores
@using Pl.Tablet.Models
@using Pl.Tablet.Models.Features.Pallets.Input
@using Pl.Tablet.Models.Features.Pallets.Output

<div class="w-full py-4 max-w-sm mx-auto">
  <div class="grid w-full grid-cols-[auto_1fr] mx-auto gap-y-2 gap-x-6 p-3 bg-background rounded-md border">
    <ResultBlockItem>
      <TitleContext>
        <DocumentIcon class="size-4 mr-1 pb-px"/>
        <h3>Документ</h3>
      </TitleContext>
      <ValueContext>
        @Model.DocumentNumber
      </ValueContext>
    </ResultBlockItem>
    <ResultBlockItem>
      <TitleContext>
        <ArrowsPointingOutIcon class="size-4 mr-1 pb-px"/>
        <h3>Тип</h3>
      </TitleContext>
      <ValueContext>
        @(Model.Mono ? "Монопаллета" : "Многопаллета")
      </ValueContext>
    </ResultBlockItem>
    <ResultBlockItem>
      <TitleContext>
        <ArchiveBoxIcon class="size-4 mr-1 pb-px"/>
        <h3>Кол-во</h3>
      </TitleContext>
      <ValueContext>
        @Model.Batches.Count шт
      </ValueContext>
    </ResultBlockItem>
    <ResultBlockItem>
      <TitleContext>
        <BookmarkIcon class="size-4 mr-1 pb-px"/>
        <h3>ПЛУ</h3>
      </TitleContext>
      <ValueContext>
        <div class="w-full flex gap-2 items-center overflow-hidden">
          @foreach (PluModel plu in Model.Batches.Select(batch => batch.Plu).Distinct().ToList())
          {
            <Badge>@plu.Number</Badge>
          }
        </div>
      </ValueContext>
    </ResultBlockItem>
  </div>
  @if (FinalDto != null)
  {
    <div class="max-w-xs w-full flex flex-col gap-2 mx-auto my-4">
      <PrintComponentButton
        TComponent="PalletDocument"
        Variant="ButtonVariantType.Outline"
        Parameters="@(new() { { nameof(PalletDocument.Pallet), FinalDto } })"
      />
      <Button Variant="ButtonVariantType.Outline" OnClick="@(() => PrintLabels(FinalDto.ZplLabel))">
        Печать этикеток
      </Button>
    </div>
  }
  <div class="flex justify-end gap-2 mt-8">
    @if (FinalDto == null)
    {
      <Button Variant="ButtonVariantType.Outline" Disabled="@IsLoading" OnClick="@OnCancelAction">
        Назад
      </Button>
      <Button OnClick="@OnSubmit" Disabled="@IsLoading">
        Подтвердить
      </Button>
    }
    else
    {
      <Button OnClick="@(() => OnSubmitAction.InvokeAsync(FinalDto))">
        Выход
      </Button>
    }
  </div>
</div>

@code {
  [Inject] private IToastService ToastService { get; set; } = default!;
  [Inject] private ITabletApi TabletApi { get; set; } = default!;
  [Inject] private IState<UserState> UserState { get; set; } = default!;
  [Inject] private IPrinterService PrinterService { get; set; } = default!;

  [EditorRequired, Parameter] public PalletCreateModel Model { get; set; } = default!;
  [Parameter] public EventCallback<PalletDto> OnSubmitAction { get; set; }
  [Parameter] public EventCallback OnCancelAction { get; set; }
  [Parameter] public EventCallback<PalletDto> OnPalletCreated { get; set; }

  private PalletDto? FinalDto { get; set; }
  private bool IsLoading { get; set; }

  private async Task OnSubmit()
  {
    PalletCreateDto createDto = new()
    {
      UserId = UserState.Value.User?.Id ?? Guid.Empty,
      DocumentBarcode = Model.DocumentNumber,
      Batches = Model.Batches.ConvertAll(BatchMapper.ModelToCreateDto)
    };
    string toastId = Guid.NewGuid().ToString();
    ToastService.ClearAll();
    IsLoading = true;
    StateHasChanged();

    try
    {
      ToastService.ShowProgressToast(new()
      {
        Id = toastId,
        Intent = ToastIntent.Progress,
        Title = "Создание паллеты",
        Timeout = null,
        Content = new() { Details = "Идет процесс создания паллеты" }
      });

      FinalDto = await TabletApi.CreatePallet(createDto);
      await OnPalletCreated.InvokeAsync(FinalDto);
      ToastService.ShowSuccess("Паллета успешно создана");
    }
    catch (ApiException ex)
    {
      ToastService.ShowError(ex.GetMessage("Неизвестная ошибка"));
    }
    catch
    {
      ToastService.ShowError("Неизвестная ошибка");
    }

    ToastService.CloseToast(toastId);
    IsLoading = false;
    StateHasChanged();
  }

  private async Task PrintLabels(string label)
  {
    try
    {
      await PrinterService.PrintZplAsync(label);
    }
    catch
    {
      ToastService.ShowError("Ошибка печати этикетки");
    }
  }
}
