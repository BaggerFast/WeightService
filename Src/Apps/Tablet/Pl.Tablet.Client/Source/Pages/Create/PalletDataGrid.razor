@using Blazor.Heroicons.Outline
@using Pl.Tablet.Client.Source.Features.CreatePalletDialog
@using Pl.Tablet.Models.Features.Pallets.Output

<div class="w-full flex justify-between items-center pb-5 mb-5 border-b">
  <h2 class="font-medium text-xl">Список паллет</h2>
  <Button
    OnClick="@ShowCreateDialog"
    Disabled="@string.IsNullOrWhiteSpace(DocumentNumber)"
  >
    <PlusIcon class="size-5 mr-2" />
    <span>Добавить</span>
  </Button>
</div>

<div class="w-full max-h-full flex flex-col">
  <div class="w-full h-9 shrink-0 grid grid-cols-[3rem,1fr,1fr,4rem] rounded-md bg-primary/5">
    <div class="size-full flex text-sm items-center justify-center">№</div>
    <div class="size-full flex text-sm items-center px-3 uppercase">Штрихкод</div>
    <div class="size-full flex text-sm items-center px-3 uppercase">Количество</div>
    <div class="size-full flex text-sm items-center px-3 uppercase"></div>
  </div>
  @if (!Value.Any())
  {
  <div class="w-full flex items-center text-sm justify-center h-12">
    <span>Список пуст</span>
  </div>
  }
  <div class="w-full max-h-full overflow-y-auto divide-y">
    @foreach ((PalletDto item, int index) in Value.Select((value, index) => (value, index)))
    {
    <div class="w-full h-12 shrink-0 grid grid-cols-[3rem,1fr,1fr,4rem]">
      <div class="size-full flex items-center justify-center">
        @(index + 1)
      </div>
      <div class="size-full flex items-center px-3">
        @item.PalletBarcode
      </div>
      <div class="size-full flex items-center px-3">
        @item.Batches.Count
      </div>
      <div class="size-full flex items-center justify-center">
        <Button
          Variant="ButtonVariantType.Ghost"
          Size="ButtonSizeType.Icon"
          OnClick="@(() => ShowViewDialog(item))"
        >
          <EyeIcon class="size-5" />
        </Button>
      </div>
    </div>
    }
  </div>
</div>

@code {
  [Inject] private IToastService ToastService { get; set; } = default!;
  [Inject] private IDialogService DialogService { get; set; } = default!;

  [Parameter] public List<PalletDto> Value { get; set; } = [];
  [Parameter] public EventCallback<List<PalletDto>> ValueChanged { get; set; }
  [Parameter] public string DocumentNumber { get; set; } = string.Empty;

  private async Task SetValue(List<PalletDto> newValue)
  {
    Value = newValue;
    await ValueChanged.InvokeAsync(Value);
  }

  private Task ShowViewDialog(PalletDto pallet) => DialogService.ShowDialogAsync<ViewPalletDialog>(pallet, new());

  private Task ShowCreateDialog() =>
    DialogService.ShowDialogAsync<CreatePalletDialog>(
      new CreateDialogProps
      {
        DocumentNumber = DocumentNumber,
        OnPalletCreated = EventCallback.Factory.Create<PalletDto>(this, value => SetValue(Value.Append(value).ToList()))
      },
      new() { PreventDismissOnOverlayClick = true });
}
