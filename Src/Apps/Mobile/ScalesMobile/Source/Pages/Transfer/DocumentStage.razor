@using Blazor.Heroicons.Outline

@implements IAsyncDisposable

<div class="size-full flex flex-col items-center justify-center">
  @if (string.IsNullOrEmpty(DocumentNumber))
  {
  <div class="flex max-w-sm flex-col px-2 gap-1 items-center">
    <DocumentTextIcon class="size-14 stroke-1" />
    <div class="flex flex-col text-center gap-1">
      <h2 class="text-lg font-semibold">Отсканируйте штрихкод документа</h2>
      <p class="text-xs">
        Для создания паллеты необходимо отсканировать документа переноса
      </p>
      <Button OnClick="@StartScanning">
        <CameraIcon class="size-4 mr-2"/>
        <span>Камера</span>
      </Button>
    </div>
  </div>
  }
  else
  {
    <div class="size-full flex flex-col px-2">
      <div class="size-full items-center justify-center flex flex-col grow">
        <span class="text-sm">Щтрихкод документа:</span>
        <span>@DocumentNumber</span>
      </div>
      <div class="w-full gap-2 flex flex-col shrink-0 py-3 px-2">
        <Button
          OnClick="@ResetBarcode"
          Variant="ButtonVariantType.Outline"
        >
          Изменить
        </Button>
        <Button
          OnClick="@OnSuccessAction"
          Disabled="@string.IsNullOrWhiteSpace(DocumentNumber)">
          Продолжить
        </Button>
      </div>
    </div>
  }
</div>

@code {
  [Inject] private IJSRuntime JsRuntime { get; set; } = default!;

  [Parameter] public EventCallback OnSuccessAction { get; set; }
  [Parameter] public string DocumentNumber { get; set; } = string.Empty;
  [Parameter] public EventCallback<string> DocumentNumberChanged { get; set; }

  private IEnumerable<Label> LabelEntities { get; set; } = [];

  protected override void OnInitialized()
  {
    base.OnInitialized();
    MessagingCenter.Subscribe<ScanPage, string>(this, "ScanCompleted", (sender, result) =>
    {
      if (string.IsNullOrWhiteSpace(result)) return;
      DocumentNumber = result;
      DocumentNumberChanged.InvokeAsync(DocumentNumber);
      StateHasChanged();
    });
  }

  private async Task StartScanning()
  {
    if (Application.Current?.MainPage == null) return;
    await Application.Current.MainPage.Navigation.PushModalAsync(new ScanPage());
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;
    await JsRuntime.InvokeVoidAsync("subscribeBarcodeEnterEvent", DotNetObjectReference.Create(this), nameof(HandleInputEvent));
  }

  [JSInvokable]
  public async Task HandleInputEvent(string inputValue)
  {
    DocumentNumber = inputValue;
    await DocumentNumberChanged.InvokeAsync(DocumentNumber);
    StateHasChanged();
  }

  private async Task ResetBarcode()
  {
    DocumentNumber = string.Empty;
    await DocumentNumberChanged.InvokeAsync(DocumentNumber);
  }

  public async ValueTask DisposeAsync()
  {
    try
    {
      await JsRuntime.InvokeVoidAsync("unsubscribeBarcodeEnterEvent");
    }
    catch
    {
      // pass
    }
  }
}