@using Refit
@using ScalesMobile.Source.Shared.Stores
@using vNext.BlazorComponents.FluentValidation
@using Ws.Mobile.Models
@using Ws.Mobile.Models.Features.Users
@using Ws.Shared.Extensions
@using ButtonType = Ws.Components.Source.UI.ButtonType

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (UserState.Value.User == null)
{
  <div class="rounded-lg overflow-hidden max-w-sm p-6 border shadow-sm bg-background w-full">
    <div class="w-full pb-4 border-b">
      <h2 class="text-lg font-semibold leading-none tracking-tight">
        Вход в систему
      </h2>
    </div>
    <EditForm
      Model="Model"
      OnValidSubmit="@OnValidSubmit"
      class="mt-4"
    >
      <FluentValidationValidator Validator="@(new AuthModelValidator())" />
      <FormFieldWrapper Label="Пароль" HtmlId="login-password">
        <NumericInputNoVirtual
          @bind-Value="@Model.Password"
          Placeholder="Введите пароль..."
          MaxLength="4"
          HtmlId="login-password"
        />
        <FieldValidation For="@(() => Model.Password)" />
      </FormFieldWrapper>
      <div class="w-full flex justify-end">
        <Button Type="@ButtonType.Submit" Class="!mt-4">
          Войти
        </Button>
      </div>
    </EditForm>
  </div>
}
else
{
  @ChildContent
}

@code {
  [Inject] private IState<UserState> UserState { get; set; } = default!;
  [Inject] private IMobileApi MobileApi { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;

  [Parameter] public RenderFragment? ChildContent { get; set; }

  private ElementReference CustomInput { get; set; } = default!;

  private void HandleKeyDown(KeyboardEventArgs e)
  {
    switch (e.Key)
    {
      case "0" or "1" or "2" or "3" or "4" or "5" or "6" or "7" or "8" or "9" when Model.Password.Length < 4:
        Model.Password += e.Key;
        break;
      case "Backspace" when Model.Password.Length > 0:
        Model.Password = Model.Password[..^1];
        break;
    }
  }

  private AuthFormModel Model { get; set; } = new();

  private async Task OnValidSubmit()
  {
    ushort.TryParse(Model.Password, out ushort parsedPassword);
    string toastId = Guid.NewGuid().ToString();

    try
    {
      ToastService.ShowProgressToast(new()
      {
        Id = toastId,
        Intent = ToastIntent.Progress,
        Title = "Процесс авторизации",
        Timeout = null,
        Content = new() { Details = "Подождите пока мы не проверим пользователя по данному коду" }
      });

      UserDto dto = await MobileApi.GetUserByCode(parsedPassword);

      ToastService.CloseToast(toastId);
      ToastService.ShowSuccess("Вы успешно авторизовались");
      Dispatcher.Dispatch(new ChangeUserAction(dto));
    }
    catch (ApiException ex)
    {
      ToastService.CloseToast(toastId);
      ToastService.ShowError(ex.GetMessage("Неизвестная ошибка"));
    }
    catch
    {
      ToastService.CloseToast(toastId);
      ToastService.ShowError("Неизвестная ошибка");
    }
  }
}
