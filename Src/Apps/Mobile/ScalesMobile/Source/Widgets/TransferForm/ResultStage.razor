@using Blazor.Heroicons.Outline
@using Refit
@using ScalesMobile.Source.Shared.Stores
@using Ws.Mobile.Models
@using Ws.Mobile.Models.Features.Pallets
@using Ws.Shared.Extensions

<div class="flex flex-col size-full justify-between py-3 px-2">
  <div class="size-full overflow-hidden flex flex-col pb-4 pt-3">
    @if (!IsCompleted)
    {
      <div class="size-full overflow-y-auto flex flex-col gap-2">
        <FormFieldWrapper Label="Документ" Class="!space-y-1">
          <InputTextField Value="@Model.DocumentNumber" Class="!h-8" ReadOnly/>
        </FormFieldWrapper>
        <FormFieldWrapper Label="Склад" Class="!space-y-1">
          <InputTextField Value="@Model.Warehouse.WarehouseName" Class="!h-8" ReadOnly/>
        </FormFieldWrapper>
        <FormFieldWrapper Label="Паллеты" Class="!space-y-1">
          <InputTextField Value="@($"{Model.Pallets.Count} шт")" Class="!h-8" ReadOnly/>
        </FormFieldWrapper>
      </div>
    }
    else
    {
    <div class="flex flex-col items-center gap-1 text-center m-auto">
      <CheckIcon class="size-10 stroke-[0.95]" />
      <h3 class="text-lg font-medium">Перенос был выполнен успешно</h3>
    </div>
    }
  </div>
  <div class="shrink-0 w-full flex flex-col gap-2">
    @if (!IsCompleted)
    {
      <Button Disabled="@IsLoading" OnClick="@OnCancelAction" Variant="ButtonVariantType.Outline">
        Назад
      </Button>
      <Button Disabled="@IsLoading" OnClick="@SubmitTransfer">
        Подтвердить
      </Button>
    }
    else
    {
      <a href="@Routes.Home" class="w-full">
        <Button OnClick="@SubmitTransfer" Variant="ButtonVariantType.Outline" Class="!w-full">
          Выход
        </Button>
      </a>
      <Button OnClick="@ResetAction">
        Повторить
      </Button>
    }
  </div>
</div>

@code {
  [Inject] private IMobileApi MobileApi { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;
  [Inject] private IState<UserState> UserState { get; set; } = default!;

  [Parameter, EditorRequired] public TransferFormModel Model { get; set; } = default!;
  [Parameter] public EventCallback OnCancelAction { get; set; }
  [Parameter] public EventCallback ResetAction { get; set; }

  private bool IsCompleted { get; set; } = false;
  private bool IsLoading { get; set; }

  private async Task SubmitTransfer()
  {
    PalletsMoveDto moveDto = TransferMapper.MapToPalletsMoveDto(Model, UserState.Value.User?.Id ?? Guid.Empty);
    string toastId = Guid.NewGuid().ToString();
    IsLoading = true;
    StateHasChanged();

    try
    {
      ToastService.ShowProgressToast(new()
      {
        Id = toastId,
        Intent = ToastIntent.Progress,
        Title = "Перенос паллет",
        Timeout = null,
        Content = new() { Details = "Идет процесс переноса паллет" }
      });

      await MobileApi.MovePallets(moveDto);

      ToastService.CloseToast(toastId);
      ToastService.ShowSuccess("Паллета успешно создана");
      IsCompleted = true;
    }
    catch (ApiException ex)
    {
      ToastService.CloseToast(toastId);
      ToastService.ShowError(ex.GetMessage("Неизвестная ошибка"));
    }
    catch
    {
      ToastService.CloseToast(toastId);
      ToastService.ShowError("Неизвестная ошибка");
    }

    IsLoading = false;
    StateHasChanged();
  }
}