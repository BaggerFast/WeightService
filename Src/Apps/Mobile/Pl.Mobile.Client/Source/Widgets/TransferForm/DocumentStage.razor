@using Blazor.Heroicons.Outline
@using Pl.Mobile.Client.Source.Features.Debug

<InternalBarcodeScanner ValueChanged="@SetDocumentNumber" />

<div class="flex flex-col size-full justify-between py-3 px-2">
  <div class="size-full overflow-hidden flex items-center justify-center">
    @if (string.IsNullOrWhiteSpace(DocumentNumber))
    {
      <div class="flex flex-col items-center gap-1 text-center">
        <DocumentTextIcon class="size-10 stroke-[0.95]" />
        <h3 class="text-lg font-medium">Отсканируйте штрихкод документа</h3>
      </div>
    }
    else
    {
      <FormFieldWrapper Label="Штрихкод документа" Class="!space-y-1">
        <InputTextField Value="@DocumentNumber" Class="!h-8" ReadOnly />
      </FormFieldWrapper>
    }
  </div>
  <div class="shrink-0 w-full flex flex-col gap-2">

    @{
    #if DEBUG
    }
    @* ReSharper disable once Razor.UnresolvedComponent *@
    <CameraBarcodeScanner Variant="ButtonVariantType.Outline" ValueChanged="@SetDocumentNumber"/>
    @{
    #endif
    }

    <Button OnClick="@OnSuccessAction" Disabled="@string.IsNullOrWhiteSpace(DocumentNumber)">
      Продолжить
    </Button>
  </div>
</div>

@code {
  [Parameter] public EventCallback OnSuccessAction { get; set; }
  [Parameter] public string DocumentNumber { get; set; } = string.Empty;
  [Parameter] public EventCallback<string> DocumentNumberChanged { get; set; }

  private async Task SetDocumentNumber(string value)
  {
    if (value == DocumentNumber) return;
    DocumentNumber = value;
    await DocumentNumberChanged.InvokeAsync(DocumentNumber);
  }

  private async Task ResetBarcode()
  {
    DocumentNumber = string.Empty;
    await DocumentNumberChanged.InvokeAsync(DocumentNumber);
  }
}
