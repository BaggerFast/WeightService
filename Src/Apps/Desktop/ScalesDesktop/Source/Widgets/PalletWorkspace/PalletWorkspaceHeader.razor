@using ScalesDesktop.Source.Shared.Services.Stores

<div class="h-14 shrink-0 bg-background w-full grid grid-cols-4 border-b px-4">
  <div class="flex h-full items-center">
    <Button
      Size="ButtonSize.Icon"
      Variant="ButtonVariant.Ghost"
      OnClick="@CloseCurrentPallet"
    >
      <ArrowLeftIcon class="size-5 text-muted-foreground"/>
    </Button>
  </div>
  <div class="h-full flex items-center justify-center w-full col-span-2 grow overflow-hidden">
    <ul class="size-full flex items-center gap-2 justify-center">
      @foreach (KeyValuePair<string, string> item in TabsList)
      {
        <li>
          <Button
            Variant="@(CurrentTabId == item.Key ? ButtonVariant.Secondary : ButtonVariant.Outline)"
            OnClick="@(async() => await ChangeCurrentTab(item.Key))"
            Disabled="@(CurrentTabId == item.Key)"
            Class="disabled:!opacity-100"
          >
            @item.Value
          </Button>
        </li>
      }
    </ul>
  </div>
</div>

@code {
  # region Injects

  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;

  # endregion

  [Parameter] public string CurrentTabId { get; set; } = default!;
  [Parameter] public EventCallback<string> CurrentTabIdChanged { get; set; }
  [Parameter] public List<KeyValuePair<string, string>> TabsList { get; set; } = [];

  private async Task ChangeCurrentTab(string newTab)
  {
    CurrentTabId = newTab;
    await CurrentTabIdChanged.InvokeAsync(CurrentTabId);
    StateHasChanged();
  }

  private void CloseCurrentPallet() => Dispatcher.Dispatch(new ResetPalletAction());
}