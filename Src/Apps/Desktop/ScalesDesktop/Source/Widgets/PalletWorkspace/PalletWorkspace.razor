@using Blazor.Heroicons.Outline
@using ScalesDesktop.Source.Shared.Services.Stores
@using Ws.Desktop.Models.Features.Pallets.Output
@using ScalesDesktop.Source.Features.PalletOverview

<div class="size-full flex flex-col overflow-hidden">
  <Tabs
    ActiveTabId="@PalletState.Value.PalletViewTab.ToString()"
    ActiveTabIdChanged="@(value => ChangeActiveId(value))"
    @ref="TabsComponent"
  >
    <div class="h-14 shrink-0 bg-background w-full grid grid-cols-4 border-b px-4">
      <div class="flex h-full items-center">
        <Button
          Size="ButtonSize.Icon"
          Variant="ButtonVariant.Ghost"
          OnClick="@CloseCurrentPallet"
        >
          <ArrowLeftIcon class="size-5 text-muted-foreground"/>
        </Button>
      </div>
      <div class="h-full flex items-center justify-center w-full col-span-2 grow overflow-hidden">
        <ul class="size-full flex items-center gap-2 justify-center">
          @foreach (Tab tab in TabsComponent.TabsList)
          {
            <li>
              <Button
                Variant="@(PalletState.Value.PalletViewTab.ToString() == tab.Id ? ButtonVariant.Secondary : ButtonVariant.Outline)"
                OnClick="@(() => ChangeActiveId(tab.Id))"
                Disabled="@(TabsComponent.ActiveTabId == tab.Id)"
                Class="disabled:!opacity-100"
              >
                @tab.Title
              </Button>
            </li>
          }
        </ul>
      </div>
    </div>
    <div class="size-full bg-secondary/[.3] flex flex-col grow overflow-hidden">
      <Tab Id="@PalletViewTab.Info.ToString()" Title="@WsDataLocalizer["ColPallet"]">
        <PalletOverview Pallet="Pallet" />
      </Tab>
      <Tab Id="@PalletViewTab.Labels.ToString()" Title="@Localizer["ColPrint"]">
        <LabelsGrid Pallet="Pallet" />
      </Tab>
    </div>
  </Tabs>
</div>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;
  [Inject] private IState<PalletState> PalletState { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public PalletInfo Pallet { get; set; } = default!;

  private Tabs TabsComponent { get; set; } = default!;

  protected override void OnAfterRender(bool firstRender)
  {
    if (!firstRender) return;
    StateHasChanged();
  }

  private void ChangeActiveId(string newActiveId)
  {
    bool isParsed = Enum.TryParse(newActiveId, out PalletViewTab newViewTab);
    if (isParsed) Dispatcher.Dispatch(new ChangePalletViewTabAction(newViewTab));
  }

  private void CloseCurrentPallet() => Dispatcher.Dispatch(new ResetPalletAction());
}
