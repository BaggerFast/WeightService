@using System.Timers
@using Ws.Shared.Utils
@using Blazor.Heroicons.Outline

<div class="h-14 flex gap-2 w-full px-4 items-center shrink-0">
  <div class="border px-2 gap-1 flex items-center rounded-md overflow-hidden w-full h-9">
    <MagnifyingGlassIcon class="size-5 pb-[2px] text-gray-500"/>
    <input
      type="text"
      @bind="SearchingString"
      @bind:event="oninput"
      @bind:after="OnInputChanged"
      class="size-full border-none text-sm pl-1 focus:outline-none focus:ring-0"
      placeholder="@Localizer["SearchByNumberPlaceholder"]"/>
  </div>
  <div class="w-9">
    <SelectSingle
      TItem="PalletSortEnum"
      Items="@(Enum.GetValues(typeof(PalletSortEnum)).Cast<PalletSortEnum>())"
      @bind-SelectedItem="Sorting"
      @bind-SelectedItem:after="OnSortingChanged"
      ItemDisplayName="@(value => Localizer[EnumHelper.GetEnumDescription(value)])"
    >
      <TriggerContent Context="select">
        <Button
          Id="@select.DropdownAnchor"
          Variant="ButtonVariant.Outline"
          Size="ButtonSize.Icon"
          Class="shrink-0"
          OnClick="@(() => select.SetIsOpen.InvokeAsync(!select.IsOpen))"
        >
          <FunnelIcon class="size-5" />
        </Button>
      </TriggerContent>
    </SelectSingle>
  </div>
</div>

@code {
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;

  [Parameter] public PalletSortEnum Sorting { get; set; } = PalletSortEnum.Date;
  [Parameter] public EventCallback<PalletSortEnum> SortingChanged { get; set; }
  [Parameter] public string SearchingString { get; set; } = string.Empty;
  [Parameter] public EventCallback<string> SearchingStringChanged { get; set; }

  private Timer DebounceTimer { get; set; } = default!;
  private const int DebounceDelay = 800;

  private void OnInputChanged()
  {
    DebounceTimer.Stop();
    DebounceTimer.Start();
  }

  protected override void OnInitialized()
  {
    DebounceTimer = new(DebounceDelay);
    DebounceTimer.Elapsed += async (_, _) =>
    {
      DebounceTimer.Stop();
      await InvokeAsync(OnSearchingStringChanged);
    };
    DebounceTimer.AutoReset = false;
  }

  private async Task OnSortingChanged() => await SortingChanged.InvokeAsync(Sorting);

  private async Task OnSearchingStringChanged() => await SearchingStringChanged.InvokeAsync(SearchingString);
}