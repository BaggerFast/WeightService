@using ScalesDesktop.Source.Features.PalletCreate
@using Ws.Desktop.Models.Features.Arms.Output
@using Ws.Desktop.Models.Features.Pallets.Output
@using Blazor.Heroicons.Outline

<div class="size-full bg-background overflow-hidden flex flex-col">
  <div class="size-full grow flex flex-col overflow-hidden">
    <UseParameterlessEndpoint Endpoint="@ArmApi.ArmEndpoint" Context="armQuery">
      @if (armQuery.HasData)
      {
      <div class="h-14 flex items-center px-4 shrink-0 border-b justify-between">
        <h2 class="font-semibold text-lg tracking-tight pb-px">@WsDataLocalizer["ColPallets"]</h2>
        <div class="flex items-center justify-center pt-px gap-1">
          <CompactDatePicker
            @bind-Value="@StartDate"
            DisabledDateFunc="@(date => date < EndDate?.AddDays(-4) || date >= EndDate?.AddDays(-1))"
            IsDisabled="@(!string.IsNullOrEmpty(InputSearchCounter))"
          />
          <span>-</span>
          <CompactDatePicker
            @bind-Value="@EndDate"
            @bind-Value:after="@(() => StartDate = EndDate?.AddDays(-1))"
            DisabledDateFunc="@(date => date < DateTime.Today.AddDays(-2) || date > DateTime.Today.AddDays(1))"
            IsDisabled="@(!string.IsNullOrEmpty(InputSearchCounter))"
          />
        </div>
        <div class="flex items-center gap-2">
          <UseEndpoint Endpoint="@PalletApi.PiecePalletsEndpoint" Arg="@new(armQuery.Data.Id, StartDate, EndDate)" Context="palletQuery">
            <Button
              Variant="ButtonVariant.Outline"
              Size="ButtonSize.Icon"
              OnClick="@(() => { if (string.IsNullOrEmpty(InputSearchCounter)) palletQuery.Refetch(); ResetSortsAndFilters(); PluApi.PiecePlusEndpoint.InvalidateAll(); })"
              Disabled="@palletQuery.IsFetching"
            >
              <ArrowPathIcon class="size-5 mx-2"/>
            </Button>
          </UseEndpoint>
          <Button Size="ButtonSize.Icon" OnClick="@(() => ShowCreateFormDialog(armQuery.Data))">
            <PlusIcon class="size-5 mx-2"/>
          </Button>
        </div>
      </div>
        <PalletSelectSearching
          @bind-Sorting="PalletSort"
          @bind-SearchingString="InputSearchCounter"
        />
        @if (string.IsNullOrEmpty(InputSearchCounter))
        {
          <UseEndpoint Endpoint="@PalletApi.PiecePalletsEndpoint" Arg="@new(armQuery.Data.Id, StartDate, EndDate)" Context="palletQuery">
            @if (palletQuery.IsLoading)
            {
              <PalletSelectStub />
            }
            else if (!palletQuery.HasData || palletQuery.Data.Length == 0)
            {
              <PalletSelectNotFound />
            }
            else
            {
              <ul class="w-full space-y-3 grow px-4 pb-3 pr-px overflow-y-scroll">
                @foreach (PalletInfo item in GetFilteredPalletList(palletQuery.Data))
                {
                  <li>
                    <PalletSelectItem Pallet="@item"/>
                  </li>
                }
              </ul>
            }
          </UseEndpoint>
        }
        else
        {
          <UseEndpoint Endpoint="@PalletApi.PiecePalletsNumberEndpoint" Arg="@new(armQuery.Data.Id, TryGetPalletNumber())" Context="palletQuery">
            @if (palletQuery.IsLoading)
            {
              <PalletSelectStub />
            }
            else if (!palletQuery.HasData || palletQuery.Data.Length == 0)
            {
              <PalletSelectNotFound />
            }
            else
            {
              <ul class="w-full space-y-3 grow px-4 pb-3 pr-px overflow-y-scroll">
                @foreach (PalletInfo item in GetFilteredPalletList(palletQuery.Data))
                {
                  <li>
                    <PalletSelectItem Pallet="@item"/>
                  </li>
                }
              </ul>
            }
          </UseEndpoint>
        }
      }
      <div class="w-full border-t px-4 py-2">
        <PalletManControl />
      </div>
    </UseParameterlessEndpoint>
  </div>
</div>

@code {

  # region Injects

  [Inject] private PalletApi PalletApi { get; set; } = default!;
  [Inject] private PluApi PluApi { get; set; } = default!;
  [Inject] private ArmApi ArmApi { get; set; } = default!;
  [Inject] private IDialogService DialogService { get; set; } = default!;
  [Inject] private PalletContext PalletContext { get; set; } = default!;
  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;

  # endregion

  private PalletSortEnum PalletSort { get; set; } = PalletSortEnum.Date;
  private DateTime? StartDate { get; set; } = GetStartOfWorkingShift();
  private DateTime? EndDate { get; set; } = GetEndOfWorkingShift();
  private string InputSearchCounter { get; set; } = string.Empty;
  private const ushort PalletsToDisplay = 100;

  private IEnumerable<PalletInfo> GetFilteredPalletList(PalletInfo[] pallets)
  {
    IEnumerable<PalletInfo> filteredPallets = pallets.AsEnumerable();

    if (!string.IsNullOrEmpty(InputSearchCounter))
      filteredPallets = pallets.Where(x => x.Number.ToString().Contains(InputSearchCounter));

    filteredPallets = PalletSort switch
    {
      PalletSortEnum.Date => filteredPallets.OrderByDescending(x => x.CreateDt),
      PalletSortEnum.Number => filteredPallets.OrderByDescending(x => x.Number),
      PalletSortEnum.Plu => filteredPallets.OrderByDescending(x => x.Plus.Min(p => p.Number)),
      PalletSortEnum.LabelsCount => filteredPallets.OrderByDescending(x => x.BoxCount),
      _ => filteredPallets
    };

    return filteredPallets.Take(PalletsToDisplay);
  }

  private uint TryGetPalletNumber()
  {
    try
    {
      return uint.Parse(InputSearchCounter);
    }
    catch
    {
      return 0;
    }
  }

  private void ResetSortsAndFilters()
  {
    StartDate = GetStartOfWorkingShift();
    EndDate = GetEndOfWorkingShift();
    PalletSort = PalletSortEnum.Date;
    InputSearchCounter = string.Empty;
  }

  private static DateTime GetStartOfWorkingShift()
  {
    DateTime dateNow = DateTime.Now;
    if (dateNow.Hour < 8) dateNow = dateNow.AddDays(-1);
    return new(dateNow.Year, dateNow.Month, dateNow.Day, 8, 0, 0);
  }

  private static DateTime GetEndOfWorkingShift()
  {
    DateTime dateNow = DateTime.Now;
    if (dateNow.Hour >= 8) dateNow = dateNow.AddDays(1);
    return new(dateNow.Year, dateNow.Month, dateNow.Day, 8, 0, 0);
  }

  private async Task ShowCreateFormDialog(ArmValue arm)
  {
    IDialogReference dialog = await DialogService.ShowDialogAsync<PalletCreateDialog>(new() { PreventDismissOnOverlayClick = true });
    DialogResult result = await dialog.Result;
    if (result is { Cancelled: false, Data: PalletInfo newPallet })
    {
      PalletApi.InsertPiecePallet(new(arm.Id, GetStartOfWorkingShift(), GetEndOfWorkingShift()), newPallet);
      PalletContext.ChangePallet(newPallet);
      ResetSortsAndFilters();
    }
  }
}