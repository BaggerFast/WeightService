@using Blazor.Heroicons.Outline
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using Phetch.Core
@using ScalesDesktop.Source.Features.PalletCreate
@using ScalesDesktop.Source.Shared.Services
@using Ws.Desktop.Models.Features.Arms.Output
@using Ws.Desktop.Models.Features.Pallets.Output
@using ScalesDesktop.Source.Features
@using Ws.Shared.Utils


<div class="size-full bg-background overflow-hidden flex flex-col">
  <div class="size-full grow flex flex-col overflow-hidden">
    <UseParameterlessEndpoint Endpoint="@ArmApi.ArmEndpoint" Context="armQuery">
      @if (armQuery.HasData)
      {
        <UseEndpoint Endpoint="@PalletApi.PiecePalletsEndpoint" Arg="@new(armQuery.Data.Id, StartDate, EndDate)" Context="palletQuery">
          <div class="h-14 flex items-center px-4 shrink-0 border-b justify-between">
            <h2 class="font-semibold text-lg tracking-tight pb-px">Паллеты</h2>
            <div class="flex items-center justify-center pt-px gap-1">
              <CompactDatePicker
                @bind-Value="@StartDate"
                DisabledDateFunc="@(date => date < EndDate?.AddDays(-3) || date >= EndDate)"/>
              <span>-</span>
              <CompactDatePicker
                @bind-Value="@EndDate"
                @bind-Value:after="@(() => StartDate = EndDate?.AddDays(-1))"
                DisabledDateFunc="@(date => date < DateTime.Today.AddDays(-2) || date > DateTime.Today.AddDays(1))"/>
            </div>
            <div class="flex items-center gap-2">
              <Button
                Variant="ButtonVariant.Outline"
                Size="ButtonSize.Icon"
                OnClick="@(() => { palletQuery.Refetch(); ResetSortsAndFilters(); })"
              >
                <ArrowPathIcon class="size-5 mx-2" />
              </Button>
              <Button Size="ButtonSize.Icon" OnClick="@(() => ShowCreateFormDialog(armQuery.Data))">
                <PlusIcon class="size-5 mx-2"/>
              </Button>
            </div>
          </div>
          <div class="h-14 flex gap-2 w-full px-4 items-center shrink-0">
            <div class="border px-2 gap-1 flex items-center rounded-md overflow-hidden w-full h-9">
              <MagnifyingGlassIcon class="size-5 pb-[2px] text-gray-500"/>
              <input
                type="text"
                @bind="InputSearchCounter"
                @bind:event="oninput"
                class="size-full border-none text-sm pl-1 focus:outline-none focus:ring-0"
                placeholder="@Localizer["SearchByNumberPlaceholder"]"/>
            </div>
            <div class="w-9">
              <SelectSingle
                TItem="PalletSortEnum"
                Items="@(Enum.GetValues(typeof(PalletSortEnum)).Cast<PalletSortEnum>())"
                @bind-SelectedItem="PalletSort"
                ItemDisplayName="@(value => Localizer[EnumHelper.GetEnumDescription(value)])"
              >
                <TriggerContent Context="select">
                  <Button
                    Id="@select.DropdownAnchor"
                    Variant="ButtonVariant.Outline"
                    Size="ButtonSize.Icon"
                    Class="shrink-0"
                    OnClick="@(() => select.SetIsOpen.InvokeAsync(!select.IsOpen))"
                  >
                    <FunnelIcon class="size-5" />
                  </Button>
                </TriggerContent>
              </SelectSingle>
            </div>
          </div>
          @if (palletQuery.HasData)
          {
            @if (palletQuery.Data.Length == 0)
            {
              <div class="size-full flex items-center justify-center">
                @Localizer["PalletSelectEmpty"]
              </div>
            }
            else
            {
              <ul class="w-full space-y-3 grow px-4 pb-3 pr-px overflow-y-scroll">
                @foreach (PalletInfo item in GetFilteredPalletList(palletQuery.Data))
                {
                  <li>
                    <PalletSelectItem Pallet="@item"/>
                  </li>
                }
              </ul>
            }
          }
          else
          {
            <ul class="w-full space-y-3 grow px-4 pb-3">
              <li>
                <Skeleton Class="w-full h-18"/>
              </li>
              <li>
                <Skeleton Class="w-full h-18"/>
              </li>
              <li>
                <Skeleton Class="w-full h-18"/>
              </li>
            </ul>
          }
        </UseEndpoint>
      }
      <div class="w-full border-t px-4 py-2">
        <PalletManControl />
      </div>
    </UseParameterlessEndpoint>
  </div>
</div>

@code {

  # region Injects

  [Inject] private PalletApi PalletApi { get; set; } = default!;
  [Inject] private ArmApi ArmApi { get; set; } = default!;
  [Inject] private IDialogService DialogService { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private PalletContext PalletContext { get; set; } = default!;

  # endregion

  private PalletSortEnum PalletSort { get; set; } = PalletSortEnum.Date;
  private DateTime? StartDate { get; set; } = GetStartOfWorkingShift();
  private DateTime? EndDate { get; set; } = GetEndOfWorkingShift();
  private string InputSearchCounter { get; set; } = string.Empty;
  private const ushort PalletsToDisplay = 100;

  private IEnumerable<PalletInfo> GetFilteredPalletList(PalletInfo[] pallets)
  {
    IEnumerable<PalletInfo> filteredPallets = pallets.AsEnumerable();

    if (!string.IsNullOrEmpty(InputSearchCounter))
      filteredPallets = pallets.Where(x => x.Number.ToString().Contains(InputSearchCounter));

    filteredPallets = PalletSort switch
    {
      PalletSortEnum.Date => filteredPallets.OrderByDescending(x => x.CreateDt),
      PalletSortEnum.Number => filteredPallets.OrderByDescending(x => x.Number),
      PalletSortEnum.Plu => filteredPallets.OrderByDescending(x => x.PluNumber),
      PalletSortEnum.LabelsCount => filteredPallets.OrderByDescending(x => x.BoxCount),
      _ => filteredPallets
    };

    return filteredPallets.Take(PalletsToDisplay);
  }

  private void ResetSortsAndFilters()
  {
    StartDate = GetStartOfWorkingShift();
    EndDate = GetEndOfWorkingShift();
    PalletSort = PalletSortEnum.Date;
    InputSearchCounter = string.Empty;
  }

  private static DateTime GetStartOfWorkingShift()
  {
    DateTime dateNow = DateTime.Now;
    if (dateNow.Hour < 8) dateNow = dateNow.AddDays(-1);
    return new(dateNow.Year, dateNow.Month, dateNow.Day, 8, 0, 0);
  }

  private static DateTime GetEndOfWorkingShift()
  {
    DateTime dateNow = DateTime.Now;
    if (dateNow.Hour >= 8) dateNow = dateNow.AddDays(1);
    return new(dateNow.Year, dateNow.Month, dateNow.Day, 8, 0, 0);
  }

  private async Task ShowCreateFormDialog(ArmValue arm)
  {
    IDialogReference dialog = await DialogService.ShowDialogAsync<PalletCreateDialog>(new());
    DialogResult result = await dialog.Result;
    if (result is { Cancelled: false, Data: PalletInfo newPallet })
    {
      PalletApi.InsertPiecePallet(new(arm.Id, GetStartOfWorkingShift(), GetEndOfWorkingShift()), newPallet);
      PalletContext.ChangePallet(newPallet);
    }
  }
}