@using Blazor.Heroicons.Outline
@using ScalesDesktop.Source.Shared.Services.Stores
@using Ws.Desktop.Models.Features.Pallets.Output
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<button
  type="button"
  disabled="@IsSelected"
  @onclick="@(() => Dispatcher.Dispatch(new ChangePalletAction(Pallet)))"
  class="@Css.Class("w-full h-18 shrink-0 px-4 pb-2.5 pt-2 items-center flex shadow-sm transition-colors rounded-md border hover:bg-secondary/[.6]",
           IsSelected ? "bg-secondary hover:bg-secondary" : string.Empty)"
>
  <div class="size-full overflow-hidden grow flex gap-0.5 flex-col">
    <div class="flex w-full items-center gap-2 justify-between">
      <span class="truncate font-medium">
        @WsDataLocalizer["ColPallet"] â„–@Pallet.Number
      </span>
      <span class="text-sm text-muted-foreground shrink-0">
        @Pallet.CreateDt.ToString("dd.MM.yyyy HH:mm:ss")
      </span>
    </div>
    <div class="flex w-full items-center justify-between gap-2 overflow-hidden">
      <div class="flex items-center gap-2">
        <span class="truncate text-sm">
          @Pallet.PalletMan.DisplayShortName
        </span>
        @foreach (PluPalletInfo plu in Pallet.Plus)
        {
          <Badge Class="shrink-0 py-px px-1.5">
            @plu.Number
          </Badge>
        }
      </div>
      <div class="flex items-center gap-1">
        @if (Pallet.IsDelete)
        {
        <Badge Type="BadgeType.Destructive" Class="!px-1">
          <TrashIcon class="size-4" />
        </Badge>
        }
        <Badge Type="BadgeType.Secondary" Class="@Css.Class(IsSelected ? "!border-primary/[.1]" : "")">
          <CalculatorIcon class="size-3 mr-1"/>
          <span class="text-xs pt-px">@Pallet.BoxCount</span>
        </Badge>
      </div>

    </div>
  </div>
</button>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;
  [Inject] private IState<PalletState> PalletState { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public PalletInfo Pallet { get; set; } = default!;

  private bool IsSelected => PalletState.Value.Pallet != null && PalletState.Value.Pallet.Id == Pallet.Id;
}
