@using ScalesDesktop.Source.Features.DeviceStatusIcons
@using ScalesDesktop.Source.Widgets.FunctionalityDescription
@using ScalesDesktop.Source.Widgets.MainHeader
@using ScalesDesktop.Source.Widgets.PalletSelect
@using ScalesDesktop.Source.Widgets.PalletWorkspace

@attribute [Route(RouteUtils.Pallet)]
@implements IDisposable

<div class="flex flex-col grow size-full">
  <MainHeader>
    <div class="size-full items-center justify-end flex pr-10">
      <PrinterStatusIcon />
    </div>
  </MainHeader>
  <div class="size-full flex flex-col grow overflow-hidden items-center justify-center px-8 pt-2 pb-4 xl:p-10">
    @if (PalletContext.PalletMan == null)
    {
      <PalletManForm />
    }
    else
    {
      <div class="size-full grid grid-rows-1 grid-cols-[24rem,2fr] rounded-lg shadow-sm bg-background border divide-x max-w-screen-2xl overflow-hidden">
        <PalletSelect />
        <div class="size-full overflow-hidden">
          @if (PalletContext.Pallet == null)
          {
          <div class="size-full flex items-center justify-center p-6 bg-secondary/[.6] overflow-hidden">
            <FunctionalityDescription />
          </div>
          }
          else
          {
            <PalletWorkspace Pallet="@PalletContext.Pallet" />
          }
        </div>
      </div>
    }
  </div>
</div>

@code {

  [Inject] private PalletContext PalletContext { get; set; } = default!;
  [Inject] private PrinterService PrinterService { get; set; } = default!;

  protected override async Task OnInitializedAsync()
  {
    PalletContext.Reset();
    PalletContext.StateChanged += StateHasChanged;
    await PrinterService.ConnectAsync();
  }

  public void Dispose()
  {
    PrinterService.Disconnect();
    PalletContext.StateChanged -= StateHasChanged;
  }
}