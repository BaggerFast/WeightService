@attribute [Route(Routes.Pallet)]
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using ScalesDesktop.Source.Features.DeviceStatusIcons
@using ScalesDesktop.Source.Shared.Services.Devices
@using ScalesDesktop.Source.Widgets.FunctionalityDescription
@using ScalesDesktop.Source.Widgets.MainHeader
@using ScalesDesktop.Source.Widgets.PalletSelect
@using ScalesDesktop.Source.Widgets.PalletWorkspace
@using ScalesDesktop.Source.Features.ErrorBoundaries

@implements IDisposable

<ArmErrorBoundary>
  <div class="flex flex-col grow size-full">
    <MainHeader>
      <div class="size-full items-center justify-end flex pr-10">
        <PrinterStatusIcon />
      </div>
    </MainHeader>
    <div class="size-full flex flex-col grow overflow-hidden items-center justify-center px-8 pt-2 pb-4 xl:p-10">
      @if (PalletManState.Value.PalletMan == null)
      {
      <PalletManForm />
      }
      else
      {
      <div class="size-full grid grid-rows-1 grid-cols-[24rem,2fr] rounded-lg shadow-sm bg-background border divide-x max-w-screen-2xl overflow-hidden">
        <PalletSelect />
        <div class="size-full overflow-hidden">
          @if (PalletState.Value.Pallet == null)
          {
          <div class="size-full flex items-center justify-center p-6 overflow-hidden">
            <FunctionalityDescription />
          </div>
          }
          else
          {
          <PalletWorkspace Pallet="@PalletState.Value.Pallet" />
          }
        </div>
      </div>
      }
    </div>
  </div>
</ArmErrorBoundary>

@code {
  # region Injects

  [Inject] private IState<PalletManState> PalletManState { get; set; } = default!;
  [Inject] private IState<PalletState> PalletState { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;
  [Inject] private IPrinterService PrinterService { get; set; } = default!;

  # endregion

  protected override void OnInitialized()
  {
    base.OnInitialized();
    Dispatcher.Dispatch(new ResetPalletManAction());
    Dispatcher.Dispatch(new ResetPalletAction());
    Dispatcher.Dispatch(new ChangePalletViewTabAction(PalletViewTabType.Info));
  }

  protected override async Task OnInitializedAsync() => await PrinterService.ConnectAsync();

  public void Dispose() => PrinterService.Disconnect();
}