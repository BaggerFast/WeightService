@using System.Globalization
@using Blazor.Heroicons.Outline
@using ScalesDesktop.Source.Shared.Services.Endpoints
@using ScalesDesktop.Source.Shared.Services.Stores
@using Ws.Desktop.Models
@using Ws.Desktop.Models.Features.Pallets.Output

<div class="size-full flex flex-col overflow-x-hidden overflow-y-auto pt-6 pb-8 px-6">
  <div class="w-full flex justify-between items-center">
    <div class="flex gap-3 items-center">
      <h2 class="font-medium text-xl">@WsDataLocalizer["ColPallet"] №@Pallet.Number от @Pallet.ProdDt.ToString("dd.MM.yyyy")</h2>
      @if (Pallet.IsShipped)
      {
        <Badge Class="pb-1">@Localizer["PalletFlagShipped"]</Badge>
      }
      else
      {
        <Badge Variant="BadgeVariant.Secondary" Class="pb-1">@Localizer["PalletFlagNotShipped"]</Badge>
      }
      @if (Pallet.DeletedAt != null)
      {
        <Badge Variant="BadgeVariant.Destructive" Class="pb-1" id="badge-deleted-pallet">Удалено</Badge>
        <Tooltip Anchor="badge-deleted-pallet">
          @Pallet.DeletedAt
        </Tooltip>
      }
    </div>
    @if (!Pallet.IsShipped)
    {
      <UseParameterlessEndpoint Endpoint="@ArmEndpoints.ArmEndpoint" Context="armQuery">
        @if (armQuery.HasData)
        {
          <Button
            Variant="@(Pallet.DeletedAt == null ? ButtonVariant.Destructive : ButtonVariant.Default)"
            OnClick="@(() => DeletePallet(armQuery.Data.Id, Pallet.Id))"
          >
            @if (Pallet.DeletedAt == null)
            {
              <TrashIcon class="size-4 mr-2" />
              @Localizer["BtnDelete"]
            }
            else
            {
              <ArrowUturnRightIcon class="size-4 mr-2" />
              @Localizer["BtnRestore"]
            }

          </Button>
        }
      </UseParameterlessEndpoint>
    }
  </div>
  <div class="w-full grid grid-cols-1 gap-x-10 gap-y-3 lg:grid-cols-2 items-start">
    <FormDivider Class="!pb-0">@Localizer["PalletOverviewDividerCommon"]</FormDivider>
    <div class="space-y-2">
      <FieldLabel for="number">@WsDataLocalizer["ColNumber"]</FieldLabel>
      <InputTextField
        id="number"
        Value="@Pallet.Number"
        ReadOnly/>
    </div>
    <div class="space-y-2">
      <FieldLabel for="number">@Localizer["СolPalletProductDt"]</FieldLabel>
      <InputTextField
        id="date"
        Value="@Pallet.ProdDt.ToString("dd.MM.yyyy")"
        ReadOnly/>
    </div>
    <div class="space-y-2">
      <FieldLabel for="barcode">@WsDataLocalizer["ColBarcode"]</FieldLabel>
      <InputTextField
        id="barcode"
        Value="@Pallet.Barcode"
        ReadOnly/>
    </div>
    <div class="space-y-2">
      <FieldLabel for="pallet-man">@WsDataLocalizer["ColPalletMan"]</FieldLabel>
      <InputTextField
        id="pallet-man"
        Value="@Pallet.PalletMan.DisplayShortName"
        ReadOnly/>
    </div>
    <div class="space-y-2">
      <FieldLabel for="box-count">@WsDataLocalizer["ColBoxCount"] (@WsDataLocalizer["MeasurePc"])</FieldLabel>
      <InputTextField
        id="box-count"
        Value="@Pallet.BoxCount.ToString()"
        ReadOnly/>
    </div>
    <div class="space-y-2">
      <FieldLabel for="bundle-count">@WsDataLocalizer["ColProductUnitsCount"] (@WsDataLocalizer["MeasurePc"])</FieldLabel>
      <InputTextField
        id="bundle-count"
        Value="@Pallet.BundleCount.ToString()"
        ReadOnly/>
    </div>
    <FormDivider Class="!pb-0">@WsDataLocalizer["ColPlu"]</FormDivider>
    @foreach (PluPalletInfo item in Pallet.Plus)
    {
      <div class="space-y-2">
        <FieldLabel for="@($"plu-{item.Number}")">@WsDataLocalizer["ColNumber"]</FieldLabel>
        <InputTextField
          id="@($"plu-{item.Number}")"
          Value="@item.Number.ToString()"
          ReadOnly
        />
      </div>
      <div class="space-y-2">
        <FieldLabel for="@($"plu-{item.Number}-name")">@WsDataLocalizer["ColName"]</FieldLabel>
        <InputTextField
          id="@($"plu-{item.Number}-name")"
          Value="@item.Name"
          ReadOnly
        />
      </div>
      <div class="space-y-2">
        <FieldLabel for="@($"plu-{item.Number}-nesting")">@Localizer["ColNestingPerBox"] (@WsDataLocalizer["MeasurePc"])</FieldLabel>
        <InputTextField
          id="@($"plu-{item.Number}-nesting")"
          Value="@((item.BundleCount/item.BoxCount).ToString())"
          ReadOnly
        />
      </div>
    }
    <FormDivider Class="!pb-0">@WsDataLocalizer["ColWeight"]</FormDivider>
    <div class="space-y-2">
      <FieldLabel for="netto">@WsDataLocalizer["ColNetWeight"] (@WsDataLocalizer["MeasureKg"])</FieldLabel>
      <InputTextField
        id="netto"
        Value="@Pallet.WeightNet.ToString(CultureInfo.InvariantCulture)"
        ReadOnly/>
    </div>
    <div class="space-y-2">
      <FieldLabel for="brutto">@WsDataLocalizer["ColGrossWeight"] (@WsDataLocalizer["MeasureKg"])</FieldLabel>
      <InputTextField
        id="brutto"
        Value="@Pallet.WeightBrutto.ToString(CultureInfo.InvariantCulture)"
        ReadOnly
      />
    </div>
    <div class="space-y-2">
      <FieldLabel for="tray-weight">@WsDataLocalizer["ColTrayWeight"] (@WsDataLocalizer["MeasureKg"])</FieldLabel>
      <InputTextField
        id="tray-weight"
        Value="@Pallet.WeightTray.ToString(CultureInfo.InvariantCulture)"
        ReadOnly
      />
    </div>
     <div class="space-y-2">
       <FieldLabel for="weight-total">@WsDataLocalizer["ColWeightTotal"] (@WsDataLocalizer["MeasureKg"])</FieldLabel>
       <InputTextField
         id="weight-total"
         Value="@((Pallet.WeightTray + Pallet.WeightBrutto).ToString(CultureInfo.InvariantCulture))"
         ReadOnly
       />
     </div>
  </div>
</div>

@code {
  # region Injects

  [Inject] private IStringLocalizer<WsDataResources> WsDataLocalizer { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;
  [Inject] private IDesktopApi DesktopApi { get; set; } = default!;
  [Inject] private ArmEndpoints ArmEndpoints { get; set; } = default!;
  [Inject] private PalletEndpoints PalletEndpoints { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;

  # endregion

  [Parameter, EditorRequired] public PalletInfo Pallet { get; set; } = default!;

  private async void DeletePallet(Guid armUid, Guid palletUid)
  {
    try
    {
      await DesktopApi.DeletePallet(armUid, palletUid);
      PalletEndpoints.PiecePalletsEndpoint.InvalidateAll();
      DateTime? newDeletedAt = Pallet.DeletedAt == null ? DateTime.Now : null;
      Dispatcher.Dispatch(new ChangePalletAction(Pallet with { DeletedAt = newDeletedAt }));
      ToastService.ShowSuccess(newDeletedAt != null ? Localizer["ToastPalletMarkedDeleted"] : Localizer["ToastPalletMarkedNotDeleted"]);
    }
    catch
    {
      ToastService.ShowError(Localizer["UnknownError"]);
    }
  }
}