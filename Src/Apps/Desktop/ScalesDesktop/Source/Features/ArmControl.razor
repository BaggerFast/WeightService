@using Blazor.Heroicons.Outline
@using ScalesDesktop.Source.Shared.Services.Devices
@using Ws.Desktop.Models.Features.Arms.Output

<div class="flex justify-between items-center w-full">
  <UseParameterlessEndpoint Endpoint="@ArmEndpoints.ArmEndpoint" Context="query">
    @if (!query.HasData)
    {
      <Skeleton Class="@Css.Class("!rounded-full shrink-0",IsSmall ? "size-[3.25rem]" : "size-16")"/>
    }
    else
    {
      <div class="@Css.Class("shrink-0 rounded-full bg-secondary", IsSmall ? "size-[3.25rem] p-3" : "size-16 p-4")">
        @switch (query.Data.Type)
        {
          case ArmType.Pc:
            <ComputerDesktopIcon class="size-full"/>
            break;
          case ArmType.Tablet:
            <DeviceTabletIcon class="size-full rotate-[270deg]"/>
            break;
          case ArmType.Universal:
            <ServerIcon class="size-full"/>
            break;
          default:
            <ExclamationTriangleIcon class="size-full text-destructive" />
            break;
        }
      </div>
    }
    <div class="flex w-full flex-col px-3 justify-start">
      @if (!query.HasData)
      {
        <Skeleton Class="w-32 h-6"/>
        <Skeleton Class="w-32 h-6 mt-1"/>
      }
      else
      {
        <span class="font-medium truncate">@query.Data.Name</span>
        <span class="truncate text-sm text-muted-foreground">@query.Data.Warehouse.Name</span>
      }
    </div>
    <Button
      Class="shrink-0 border"
      OnClick="@(async () => await RefetchArm(query))"
      Variant="ButtonVariantType.Secondary"
      Size="@(IsSmall ? ButtonSizeType.Small : ButtonSizeType.Default)"
      Disabled="@query.IsFetching"
    >
      <ArrowPathIcon class="size-4 mr-2"/>
      @Localizer["BtnUpdate"]
    </Button>
  </UseParameterlessEndpoint>

</div>

@code {
  [Inject] private IPrinterService PrinterService { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private ArmEndpoints ArmEndpoints { get; set; } = default!;

  [Parameter] public EventCallback OnArmRefetch { get; set; }
  [Parameter] public bool IsSmall { get; set; }

  private async Task RefetchArm(Query<ArmValue> query)
  {
    query.Refetch();
    if (!OnArmRefetch.HasDelegate) return;
    await Task.Delay(10);
    await OnArmRefetch.InvokeAsync();
  }
}