@using Blazor.Heroicons.Outline
@using ScalesDesktop.Source.Shared.Api.Desktop.Endpoints
@using ScalesDesktop.Source.Shared.Services.Stores
@using Ws.Desktop.Models
@using Ws.Desktop.Models.Features.Arms.Output
@using Ws.Desktop.Models.Features.Pallets.Output
@using Ws.Shared.Extensions
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@if (PalletState.Value.Pallet != null)
{
  <UseParameterlessEndpoint Endpoint="@ArmEndpoints.ArmEndpoint" Context="query">
    @if (query.HasData && GetCanDelete(query.Data))
    {
    <Button
      Variant="@(PalletState.Value.Pallet.IsDelete == false ? ButtonVariantType.Destructive : ButtonVariantType.Default)"
      OnClick="@(() => DeletePallet(PalletState.Value.Pallet))"
    >
      @if (PalletState.Value.Pallet.IsDelete == false)
      {
      <TrashIcon class="size-4 mr-2" />
        @Localizer["BtnDelete"]
      }
      else
      {
      <ArrowUturnRightIcon class="size-4 mr-2" />
        @Localizer["BtnRestore"]
      }
    </Button>
    }
  </UseParameterlessEndpoint>
}
else
{
  <Skeleton Class="h-10 w-32" />
}

@code {
  # region Injects

  [Inject] private IDesktopApi DesktopApi { get; set; } = default!;
  [Inject] private ArmEndpoints ArmEndpoints { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private IToastService ToastService { get; set; } = default!;
  [Inject] private PalletEndpoints PalletEndpoints { get; set; } = default!;
  [Inject] private IDispatcher Dispatcher { get; set; } = default!;
  [Inject] private IState<PalletState> PalletState { get; set; } = default!;

  # endregion
  private bool GetCanDelete(ArmValue armValue) =>
    armValue.Warehouse.Id == PalletState.Value.Pallet!.Warehouse.Id && PalletState.Value.Pallet.IsShipped == false;

  private async void DeletePallet(PalletInfo pallet)
  {
    try
    {
      await DesktopApi.DeletePallet(pallet.Id);
      PalletEndpoints.PiecePalletsEndpoint.InvalidateAll();
      if (PalletState.Value.Pallet?.IsDelete == false)
      {
        Dispatcher.Dispatch(new ResetPalletAction());
        ToastService.ShowSuccess(Localizer["ToastPalletMarkedDeleted"]);
      }
      else
      {
        Dispatcher.Dispatch(new SwitchPalletDeleteFlagAction());
        ToastService.ShowSuccess(Localizer["ToastPalletMarkedNotDeleted"]);
      }
    }
    catch (ApiException ex)
    {
      ToastService.ShowError(ex.GetMessage(Localizer["UnknownError"]));
    }
    catch
    {
      ToastService.ShowError(Localizer["UnknownError"]);
    }
  }
}
