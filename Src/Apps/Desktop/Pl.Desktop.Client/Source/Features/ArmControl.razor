@using Blazor.Heroicons.Outline
@using Pl.Desktop.Client.Source.Shared.Services.Devices
@using Pl.Desktop.Models.Features.Arms.Output

<div class="flex justify-between shrink-0 items-center w-full overflow-hidden">
  <UseParameterlessEndpoint Endpoint="@ArmEndpoints.ArmEndpoint" Context="query">
    @if (query.IsLoading)
    {
      <Skeleton Class="@Css.Class("!rounded-full shrink-0",IsSmall ? "size-[3.25rem]" : "size-16")"/>
    }
    else
    {
      <div class="@Css.Class("shrink-0 border rounded-full", IsSmall ? "size-[3.25rem] p-3 bg-background" : "size-16 bg-secondary p-4")">
        @if (query.HasData)
        {
          @switch (query.Data.Type)
          {
            case ArmType.Pc:
              <ComputerDesktopIcon class="size-full"/>
              break;
            case ArmType.Tablet:
              <DeviceTabletIcon class="size-full rotate-[270deg]"/>
              break;
            case ArmType.Universal:
              <ServerIcon class="size-full"/>
              break;
            default:
              <ExclamationTriangleIcon class="size-full text-destructive"/>
              break;
          }
        }
        else
        {
          <ExclamationTriangleIcon class="size-full text-destructive"/>
        }
      </div>
    }
    <div class="flex w-full overflow-hidden flex-col px-3 justify-start">
      @if (query.IsLoading)
      {
        <Skeleton Class="w-32 h-4 !bg-primary/10"/>
        <Skeleton Class="w-32 h-4 !bg-primary/10 mt-1"/>
      }
      else if (!query.HasData)
      {
        <span class="@Css.Class("font-medium truncate text-destructive", IsSmall ? "" : "text-lg")">Нет данных</span>
        <span class="@Css.Class("truncate text-destructive", IsSmall ? "text-sm" : "")">Нет данных</span>
      }
      else
      {
        <span class="@Css.Class("font-medium truncate", IsSmall ? "" : "text-lg")">@query.Data.Name</span>
        <span class="@Css.Class("truncate text-muted-foreground", IsSmall ? "text-sm" : "")">@query.Data.Warehouse.Name</span>
      }
    </div>
    <Button
      Class="shrink-0 border"
      OnClick="@(async () => await RefetchArm(query))"
      Variant="@(IsSmall ? ButtonVariantType.Outline : ButtonVariantType.Secondary)"
      Size="@(IsSmall ? ButtonSizeType.Small : ButtonSizeType.Default)"
      Disabled="@query.IsFetching"
    >
      <ArrowPathIcon class="size-4 mr-2"/>
      @Localizer["BtnUpdate"]
    </Button>
  </UseParameterlessEndpoint>

</div>

@code {
  [Inject] private IPrinterService PrinterService { get; set; } = default!;
  [Inject] private IStringLocalizer<ApplicationResources> Localizer { get; set; } = default!;
  [Inject] private ArmEndpoints ArmEndpoints { get; set; } = default!;

  [Parameter] public EventCallback OnArmRefetch { get; set; }
  [Parameter] public bool IsSmall { get; set; }

  private async Task RefetchArm(Query<ArmDto> query)
  {
    query.Refetch();
    if (!OnArmRefetch.HasDelegate) return;
    await Task.Delay(10);
    await OnArmRefetch.InvokeAsync();
  }
}