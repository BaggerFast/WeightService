// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pl.Database;

#nullable disable

namespace Pl.Database.Migrations
{
    [DbContext(typeof(WsDbContext))]
    [Migration("20240611134250_Add_PalletTable")]
    partial class Add_PalletTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ARMS_PLUS_FK", b =>
                {
                    b.Property<Guid>("PLU_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ARM_UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PLU_UID", "ARM_UID");

                    b.HasIndex("ARM_UID");

                    b.ToTable("ARMS_PLUS_FK");
                });

            modelBuilder.Entity("USERS_CLAIMS_FK", b =>
                {
                    b.Property<Guid>("CLAIM_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("USER_UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CLAIM_UID", "USER_UID");

                    b.HasIndex("USER_UID");

                    b.ToTable("USERS_CLAIMS_FK", "REF");
                });

            modelBuilder.Entity("Pl.Database.Entities.Print.LabelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<Guid>("ARM_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BarcodeBottom")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("BARCODE_BOTTOM");

                    b.Property<string>("BarcodeRight")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("BARCODE_RIGHT");

                    b.Property<string>("BarcodeTop")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("BARCODE_TOP");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ExpirationDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("EXPIRATION_DT");

                    b.Property<short>("Kneading")
                        .HasColumnType("smallint")
                        .HasColumnName("KNEADING");

                    b.Property<Guid?>("PLU_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PalletEntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PALLET_UID");

                    b.Property<DateTime>("ProductDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PRODUCT_DT");

                    b.Property<decimal>("WeightNet")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("WEIGHT_NET");

                    b.Property<decimal>("WeightTare")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("WEIGHT_TARE");

                    b.Property<string>("Zpl")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ZPL");

                    b.HasKey("Id");

                    b.HasIndex("ARM_UID");

                    b.HasIndex("PLU_UID");

                    b.HasIndex(new[] { "BarcodeTop" }, "UQ_PLUS_BARCODE_TOP")
                        .IsUnique();

                    b.ToTable("LABELS", "PRINT");
                });

            modelBuilder.Entity("Pl.Database.Entities.Print.PalletEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<Guid>("ARM_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("BARCODE");

                    b.Property<long>("Counter")
                        .HasColumnType("bigint")
                        .HasColumnName("COUNTER");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<long>("Number")
                        .HasColumnType("bigint")
                        .HasColumnName("NUMBER");

                    b.Property<Guid>("PALLET_MAN_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PLU_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ProductDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("PRODUCT_DT");

                    b.Property<decimal>("TrayWeight")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("TRAY_WEIGHT");

                    b.HasKey("Id");

                    b.HasIndex("ARM_UID");

                    b.HasIndex("PALLET_MAN_UID");

                    b.HasIndex("PLU_UID");

                    b.HasIndex(new[] { "Barcode" }, "UQ_PALLETS_BARCODE")
                        .IsUnique();

                    b.HasIndex(new[] { "Counter" }, "UQ_PALLETS_COUNTER")
                        .IsUnique();

                    b.ToTable("PALLETS", "PRINT");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Claims.ClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_CLAIMS_NAME")
                        .IsUnique();

                    b.ToTable("CLAIMS", "REF");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Lines.LineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("Counter")
                        .HasColumnType("int")
                        .HasColumnName("COUNTER");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("NAME");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER");

                    b.Property<Guid>("PRINTER_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PcName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("PC_NAME");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(9)")
                        .HasColumnName("TYPE");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("VERSION");

                    b.Property<Guid>("WAREHOUSE_UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PRINTER_UID");

                    b.HasIndex("WAREHOUSE_UID");

                    b.HasIndex(new[] { "Name" }, "UQ_ARMS_NAME")
                        .IsUnique();

                    b.HasIndex(new[] { "Number" }, "UQ_ARMS_NUMBER")
                        .IsUnique();

                    b.HasIndex(new[] { "PcName" }, "UQ_ARMS_PC_NAME")
                        .IsUnique();

                    b.ToTable("ARMS", "REF");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.PalletMen.PalletManEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("NAME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("PATRONYMIC");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("SURNAME");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "Surname", "Patronymic" }, "UQ_PALLET_MEN_FIO")
                        .IsUnique();

                    b.ToTable("PALLET_MEN", "REF");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Printers.PrinterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("IP_V4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("PRODUCTION_SITE_UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("TYPE");

                    b.HasKey("Id");

                    b.HasIndex("PRODUCTION_SITE_UID");

                    b.HasIndex(new[] { "Ip" }, "UQ_PRINTERS_IP_V4")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UQ_PRINTERS_NAME")
                        .IsUnique();

                    b.ToTable("PRINTERS", "REF");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.ProductionSites.ProductionSiteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ADDRESS");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Address" }, "UQ_PRODUCTION_SITES_ADDRESS")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UQ_PRODUCTION_SITES_NAME")
                        .IsUnique();

                    b.ToTable("PRODUCTION_SITES", "REF");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Users.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("LoginDt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LOGIN_DT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("PRODUCTION_SITE_UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PRODUCTION_SITE_UID");

                    b.HasIndex(new[] { "Name" }, "UQ_USERS_NAME")
                        .IsUnique();

                    b.ToTable("USERS", "REF");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Warehouses.WarehouseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("PRODUCTION_SITE_UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PRODUCTION_SITE_UID");

                    b.HasIndex(new[] { "Name" }, "UQ_WAREHOUSES_NAME")
                        .IsUnique();

                    b.ToTable("WAREHOUSES", "REF");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Boxes.BoxEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NAME");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(4,3)")
                        .HasColumnName("WEIGHT");

                    b.HasKey("Id");

                    b.ToTable("BOXES", "REF_1C");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Brands.BrandEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_BRANDS_NAME")
                        .IsUnique();

                    b.ToTable("BRANDS", "REF_1C");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Bundles.BundleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NAME");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(4,3)")
                        .HasColumnName("WEIGHT");

                    b.HasKey("Id");

                    b.ToTable("BUNDLES", "REF_1C");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Characteristics.CharacteristicEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BOX_UID");

                    b.Property<short>("BundleCount")
                        .HasColumnType("smallint")
                        .HasColumnName("BUNDLE_COUNT");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NAME");

                    b.Property<Guid>("PluId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PLU_UID");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.HasIndex(new[] { "PluId", "BoxId", "BundleCount" }, "UQ_CHARACTERISTICS_UNIQ")
                        .IsUnique();

                    b.ToTable("CHARACTERISTICS", "REF_1C");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Clips.ClipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NAME");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(4,3)")
                        .HasColumnName("WEIGHT");

                    b.HasKey("Id");

                    b.ToTable("CLIPS", "REF_1C");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Nestings.NestingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BOX_UID");

                    b.Property<short>("BundleCount")
                        .HasColumnType("smallint")
                        .HasColumnName("BUNDLE_COUNT");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.ToTable("NESTINGS", "REF_1C");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Plus.PluEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<Guid>("BrandEntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BRAND_UID");

                    b.Property<Guid>("BundleEntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BUNDLE_UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("ClipEntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CLIP_UID");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Ean13")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("EAN_13");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("FULL_NAME");

                    b.Property<bool>("IsWeight")
                        .HasColumnType("bit")
                        .HasColumnName("IS_WEIGHT");

                    b.Property<string>("Itf14")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("ITF_14");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME");

                    b.Property<short>("Number")
                        .HasColumnType("smallint")
                        .HasColumnName("NUMBER");

                    b.Property<short>("ShelfLifeDays")
                        .HasColumnType("smallint")
                        .HasColumnName("SHELF_LIFE_DAYS");

                    b.Property<string>("StorageMethod")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("STORAGE_METHOD");

                    b.Property<Guid?>("TemplateEntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TEMPLATE_UID");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(4,3)")
                        .HasColumnName("WEIGHT");

                    b.HasKey("Id");

                    b.HasIndex("BrandEntityId");

                    b.HasIndex("BundleEntityId");

                    b.HasIndex("ClipEntityId");

                    b.HasIndex(new[] { "Number" }, "UQ_PLUS_NUMBER")
                        .IsUnique();

                    b.ToTable("PLUS", "REF_1C");
                });

            modelBuilder.Entity("Pl.Database.Entities.Zpl.StorageMethods.StorageMethodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("NAME");

                    b.Property<string>("Zpl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("ZPL");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_STORAGE_METHODS_NAME")
                        .IsUnique();

                    b.HasIndex(new[] { "Zpl" }, "UQ_STORAGE_METHODS_ZPL")
                        .IsUnique();

                    b.ToTable("STORAGE_METHODS", "ZPL");
                });

            modelBuilder.Entity("Pl.Database.Entities.Zpl.Templates.TemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<string>("BarcodeBottomBody")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("BARCODE_BOTTOM_BODY");

                    b.Property<string>("BarcodeRightBody")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("BARCODE_RIGHT_BODY");

                    b.Property<string>("BarcodeTopBody")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("BARCODE_TOP_BODY");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("BODY");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<short>("Height")
                        .HasColumnType("smallint")
                        .HasColumnName("HEIGHT");

                    b.Property<bool>("IsWeight")
                        .HasColumnType("bit")
                        .HasColumnName("IS_WEIGHT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NAME");

                    b.Property<short>("Width")
                        .HasColumnType("smallint")
                        .HasColumnName("WIDTH");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "IsWeight" }, "UQ_TEMPLATES_NAME_IS_WEIGHT")
                        .IsUnique();

                    b.ToTable("TEMPLATES", "ZPL");
                });

            modelBuilder.Entity("Pl.Database.Entities.Zpl.ZplResources.ZplResourceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UID");

                    b.Property<DateTime>("ChangeDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CHANGE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CreateDt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DT")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NAME");

                    b.Property<string>("Zpl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("ZPL");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_RESOURCES_NAME")
                        .IsUnique();

                    b.ToTable("RESOURCES", "ZPL");
                });

            modelBuilder.Entity("ARMS_PLUS_FK", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref.Lines.LineEntity", null)
                        .WithMany()
                        .HasForeignKey("ARM_UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref1C.Plus.PluEntity", null)
                        .WithMany()
                        .HasForeignKey("PLU_UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("USERS_CLAIMS_FK", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref.Claims.ClaimEntity", null)
                        .WithMany()
                        .HasForeignKey("CLAIM_UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref.Users.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("USER_UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pl.Database.Entities.Print.LabelEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref.Lines.LineEntity", "Line")
                        .WithMany()
                        .HasForeignKey("ARM_UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref1C.Plus.PluEntity", "Plu")
                        .WithMany()
                        .HasForeignKey("PLU_UID");

                    b.Navigation("Line");

                    b.Navigation("Plu");
                });

            modelBuilder.Entity("Pl.Database.Entities.Print.PalletEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref.Lines.LineEntity", "Arm")
                        .WithMany()
                        .HasForeignKey("ARM_UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref.PalletMen.PalletManEntity", "PalletMan")
                        .WithMany()
                        .HasForeignKey("PALLET_MAN_UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref1C.Plus.PluEntity", "Plu")
                        .WithMany()
                        .HasForeignKey("PLU_UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arm");

                    b.Navigation("PalletMan");

                    b.Navigation("Plu");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Lines.LineEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref.Printers.PrinterEntity", "Printer")
                        .WithMany()
                        .HasForeignKey("PRINTER_UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref.Warehouses.WarehouseEntity", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WAREHOUSE_UID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Printer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Printers.PrinterEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref.ProductionSites.ProductionSiteEntity", "ProductionSite")
                        .WithMany()
                        .HasForeignKey("PRODUCTION_SITE_UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionSite");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Users.UserEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref.ProductionSites.ProductionSiteEntity", "ProductionSite")
                        .WithMany()
                        .HasForeignKey("PRODUCTION_SITE_UID");

                    b.Navigation("ProductionSite");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref.Warehouses.WarehouseEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref.ProductionSites.ProductionSiteEntity", "ProductionSite")
                        .WithMany()
                        .HasForeignKey("PRODUCTION_SITE_UID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionSite");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Characteristics.CharacteristicEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref1C.Boxes.BoxEntity", "Box")
                        .WithMany()
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref1C.Plus.PluEntity", null)
                        .WithMany()
                        .HasForeignKey("PluId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHARACTERISTICS_PLUS_PLU_UID");

                    b.Navigation("Box");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Nestings.NestingEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref1C.Boxes.BoxEntity", "Box")
                        .WithMany()
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref1C.Plus.PluEntity", null)
                        .WithOne()
                        .HasForeignKey("Pl.Database.Entities.Ref1C.Nestings.NestingEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");
                });

            modelBuilder.Entity("Pl.Database.Entities.Ref1C.Plus.PluEntity", b =>
                {
                    b.HasOne("Pl.Database.Entities.Ref1C.Brands.BrandEntity", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref1C.Bundles.BundleEntity", "Bundle")
                        .WithMany()
                        .HasForeignKey("BundleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pl.Database.Entities.Ref1C.Clips.ClipEntity", "Clip")
                        .WithMany()
                        .HasForeignKey("ClipEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Bundle");

                    b.Navigation("Clip");
                });
#pragma warning restore 612, 618
        }
    }
}
