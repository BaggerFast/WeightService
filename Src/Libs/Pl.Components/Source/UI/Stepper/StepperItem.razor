@using Blazor.Heroicons.Outline

@implements IDisposable

<li class="relative">
  <div class="@Css.Class("relative", ParentStepper.ItemsCount == Index ? "" : "pr-8 sm:pr-20")">
    @if (ParentStepper.ItemsCount > Index)
      {
        <div class="absolute inset-0 flex items-center" aria-hidden="true">
          <div class="@Css.Class("h-px w-full transition-colors", ParentStepper.CurrentIndex > Index ? "bg-primary/70" : "bg-border")"></div>
        </div>
      }
    <button
      @onclick="@(() => ParentStepper.SetCurrentIndex(Index))"
      type="button"
      class="@Css.Class("relative border transition-colors flex size-8 items-center justify-center rounded-full", ParentStepper.CurrentIndex == Index ? "border-primary/70 border-2 bg-background" : ParentStepper.CurrentIndex > Index ? "border-primary border-2 bg-primary" : "bg-background")"
      disabled="@Disabled"
    >
      @if (ParentStepper.CurrentIndex == Index)
      {
        <div class="size-2.5 rounded-full overflow-hidden bg-primary"></div>
      }
      else if (ParentStepper.CurrentIndex > Index)
      {
        <CheckIcon class="h-5 text-secondary"/>
      }
      else
      {
        <span>@Index</span>
      }
      <span class="sr-only">Step @Index</span>
    </button>
  </div>
  @if (!string.IsNullOrWhiteSpace(Label))
  {
    <div class="absolute text-sm bottom-0 left-0 translate-x-[calc(-50%+1rem)] translate-y-full">
      @Label
    </div>
  }
</li>

@code {
  [CascadingParameter] private Stepper ParentStepper { get; set; } = default!;

  /// <summary>
  /// The text label for additional information
  /// </summary>
  [Parameter] public string Label { get; set; } = string.Empty;

  /// <summary>
  /// Indicates whether the trigger is disabled, preventing user interaction.
  /// </summary>
  [Parameter] public bool Disabled { get; set; }

  /// <summary>
  /// Indicates current index of component after registration
  /// </summary>
  public int Index { get; private set; }

  protected override void OnInitialized()
  {
    Index = ParentStepper.GetItemIndex();
    ParentStepper.OnIndexChanged += StateHasChanged;
  }

  public void Dispose() => ParentStepper.OnIndexChanged -= StateHasChanged;
}
