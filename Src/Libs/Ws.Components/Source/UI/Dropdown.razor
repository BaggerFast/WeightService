<FluentMenu
  Anchor="@Anchor"
  @bind-Open="IsOpen"
  @bind-Open:after="OnIsOpenChanged"
  Class="@Css.Class("!bg-inherit !min-w-[unset] [&>fluent-menu]:!p-0 [&>fluent-menu]:!max-w-[unset] [&>fluent-menu]:rounded-md [&>fluent-menu]:overflow-hidden [&>fluent-menu]:shadow-md [&>fluent-menu]:border [&>fluent-menu]:bg-background", Class)"
  VerticalThreshold="@VerticalThreshold"
>
  @ChildContent
</FluentMenu>

@code {
  [Parameter] public RenderFragment? ChildContent { get; set; }
  [Parameter] public string Class { get; set; } = string.Empty;
  [Parameter] public bool IsOpen { get; set; }
  [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
  [Parameter] public string Anchor { get; set; } = string.Empty;
  [Parameter] public int VerticalThreshold { get; set; }

  private async Task OnIsOpenChanged() => await IsOpenChanged.InvokeAsync(IsOpen);
}