@using Ws.Components.Source.UI.Select

<SelectSingleWrapper
  TSelectItem="string"
  TSelectType="string"
  @bind-Value="Value"
  @bind-Value:after="OnValueChanged"
  ItemDisplayName="ItemDisplayName"
  HtmlId="@HtmlId"
  IgnoreWidth="@IgnoreWidth"
>
  <ComboboxTrigger Class="@Class" />
  <SelectContent Class="@DropdownClass">
    <SelectEmptyPlaceholder>
      @EmptyPlaceholder
    </SelectEmptyPlaceholder>
    <SelectGroup>
      @foreach (string item in Items)
      {
        <SelectItem Item="@item" />
      }
    </SelectGroup>
  </SelectContent>
</SelectSingleWrapper>

@code {
  /// <summary>
  /// The collection of items to be displayed in the dropdown.
  /// </summary>
  [Parameter] public IEnumerable<string> Items { get; set; } = [];

  /// <summary>
  /// The currently selected value(s) from the dropdown.
  /// </summary>
  [Parameter] public string? Value { get; set; }

  /// <summary>
  /// Event called whenever the selection changed.
  /// </summary>
  [Parameter] public EventCallback<string?> ValueChanged { get; set; }

  /// <summary>
  /// A function to determine the display text for each item in the dropdown.
  /// </summary>
  [Parameter] public Func<string, string> ItemDisplayName { get; set; } = item => item;

  /// <summary>
  /// The placeholder text displayed when no item is selected.
  /// </summary>
  [Parameter] public string Placeholder { get; set; } = string.Empty;

  /// <summary>
  /// The placeholder text displayed in the search input when filtering is enabled.
  /// </summary>
  [Parameter] public string SearchPlaceholder { get; set; } = string.Empty;

  /// <summary>
  /// The placeholder text displayed when no items match the filter criteria.
  /// </summary>
  [Parameter] public string EmptyPlaceholder { get; set; } = string.Empty;

  /// <summary>
  /// Determines whether the dropdown allows filtering of items based on user input.
  /// </summary>
  [Parameter] public bool IgnoreWidth { get; set; }

  /// <summary>
  /// Determines whether the dropdown allows filtering of items based on user input.
  /// </summary>
  [Parameter] public bool Disabled { get; set; }

  /// <summary>
  /// The html id for forms
  /// </summary>
  [Parameter] public string HtmlId { get; set; } = $"id-{Guid.NewGuid()}";

  [Parameter] public string Class { get; set; } = string.Empty;

  [Parameter] public string DropdownClass { get; set; } = string.Empty;

  private Task OnValueChanged() => ValueChanged.InvokeAsync(Value);
}