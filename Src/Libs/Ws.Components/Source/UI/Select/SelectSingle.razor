@typeparam TItem

<div @ref="DropdownWrapper" class="w-full">
  @if (TriggerContent == null)
  {
    <SelectTrigger
      id="@Id"
      OnClick="@OpenDropdown"
      IsDisabled="@(IsDisabled || !Items.Any())"
      IsActive="@IsOpen"
      Class="@Css.Class("width-sub-element", Class)"
    >
      <span class="pointer-events-none line-clamp-1">@GetToggleText</span>
    </SelectTrigger>
  }
  else
  {
    @TriggerContent(new(Id, IsOpen, EventCallback.Factory.Create<bool>(this, value => IsOpen = value)))
  }
  <Dropdown
    Anchor="@Id"
    @bind-IsOpen="IsOpen"
    Class="width-ref-element"
    VerticalThreshold="@(Math.Max(Items.Count(), 8) * 40)"
  >
    @if (IsFilterable)
    {
      <SelectSearch
        @bind-Value="SearchString"
        Placeholder="@SearchPlaceholder"
      />
    }
    <div class="size-full overflow-x-hidden max-h-72 overflow-y-auto p-1">
      <ul class="flex flex-col w-full">
        @if (!GetFilteredList.Any())
        {
          <div class="h-10 w-full flex items-center justify-center text-sm">
            <span>@EmptyPlaceholder</span>
          </div>
        }
        @foreach (TItem item in GetFilteredList)
        {
          <li>
            <SelectItem OnClick="@(() => SetSelectedItem(item))" IsActive="@IsSelectedItem(item)">
              @ItemDisplayName(item)
            </SelectItem>
          </li>
        }
      </ul>
    </div>
  </Dropdown>
</div>
