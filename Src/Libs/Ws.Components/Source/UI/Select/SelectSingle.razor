@typeparam TItem

<SelectSingleWrapper
  TSelectItem="TItem"
  TSelectType="TItem"
  @bind-Value="Value"
  @bind-Value:after="OnValueChanged"
  ItemDisplayName="ItemDisplayName"
  HtmlId="@HtmlId"
  IgnoreWidth="@IgnoreWidth"
>
  @if (TriggerContent == null)
  {
    <SelectTrigger Disabled="@Disabled">
      <span class="truncate">@(Value == null ? Placeholder : ItemDisplayName(Value))</span>
    </SelectTrigger>
  }
  else
  {
    <SelectTriggerContext>
      @TriggerContent(context)
    </SelectTriggerContext>
  }
  <SelectContent>
    <ChildContent>
      @if (Filterable)
      {
        <SelectSearch Placeholder="@SearchPlaceholder"/>
      }
    </ChildContent>
    <SelectEmptyPlaceholder>
      @EmptyPlaceholder
    </SelectEmptyPlaceholder>
    <SelectGroup>
      @foreach (TItem item in Items)
      {
        <SelectItem Item="@item" />
      }
    </SelectGroup>
  </SelectContent>
</SelectSingleWrapper>

@code {
  /// <summary>
  /// The collection of items to be displayed in the dropdown.
  /// </summary>
  [Parameter] public IEnumerable<TItem> Items { get; set; } = [];

  /// <summary>
  /// The currently selected value(s) from the dropdown.
  /// </summary>
  [Parameter] public TItem? Value { get; set; }

  /// <summary>
  /// Event called whenever the selection changed.
  /// </summary>
  [Parameter] public EventCallback<TItem?> ValueChanged { get; set; }

  /// <summary>
  /// A function to determine the display text for each item in the dropdown.
  /// </summary>
  [Parameter] public Func<TItem, string> ItemDisplayName { get; set; } = item => item?.ToString() ?? string.Empty;

  /// <summary>
  /// The placeholder text displayed when no item is selected.
  /// </summary>
  [Parameter] public string Placeholder { get; set; } = string.Empty;

  /// <summary>
  /// The placeholder text displayed in the search input when filtering is enabled.
  /// </summary>
  [Parameter] public string SearchPlaceholder { get; set; } = string.Empty;

  /// <summary>
  /// The placeholder text displayed when no items match the filter criteria.
  /// </summary>
  [Parameter] public string EmptyPlaceholder { get; set; } = string.Empty;

  /// <summary>
  /// Determines whether the dropdown allows filtering of items based on user input.
  /// </summary>
  [Parameter] public bool Filterable { get; set; }

  /// <summary>
  /// Determines whether the dropdown allows filtering of items based on user input.
  /// </summary>
  [Parameter] public bool IgnoreWidth { get; set; }

  /// <summary>
  /// Determines whether the dropdown allows filtering of items based on user input.
  /// </summary>
  [Parameter] public bool Disabled { get; set; }

  /// <summary>
  /// The html id for forms
  /// </summary>
  [Parameter] public string HtmlId { get; set; } = $"id-{Guid.NewGuid()}";

  [Parameter] public RenderFragment<SelectBase<TItem, TItem>>? TriggerContent { get; set; }

  private Task OnValueChanged() => ValueChanged.InvokeAsync(Value);
}