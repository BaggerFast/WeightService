@typeparam TSelectItem
@typeparam TSelectType

<Dropdown
  Anchor="@Parent.HtmlId"
  @bind-IsOpen="@Parent.IsDropdownOpened"
  @bind-IsOpen:after="@(() => { if (!Parent.IsDropdownOpened) Parent.Reset(); })"
  VerticalThreshold="@DropdownHeight"
  Style="@(!Parent.IgnoreWidth ? $"width: {Parent.TriggerWidth}px" : null)"
>
  @ChildContent
  @if (SelectEmptyPlaceholder != null && IsEmpty)
  {
    <div class="h-10 w-full flex items-center justify-center text-sm">
      @SelectEmptyPlaceholder
    </div>
  }
  <div class="@Css.Class("size-full overflow-x-hidden max-h-72 overflow-y-auto p-1", IsEmpty ? "hidden" : "")">
    <ul class="flex flex-col w-full">
      @SelectGroup
    </ul>
  </div>
</Dropdown>

@code {
  [Parameter] public RenderFragment? SelectEmptyPlaceholder { get; set; }
  [Parameter] public RenderFragment? SelectGroup { get; set; }
  [Parameter] public RenderFragment? ChildContent { get; set; }

  [CascadingParameter] public SelectBase<TSelectItem, TSelectType> Parent { get; set; } = default!;

  private const ushort MaxItemPerView = 8;
  private const ushort AverageSelectItemHeight = 32;

  private bool IsEmpty => !string.IsNullOrEmpty(Parent.SearchString) &&
                          Parent.SelectItems.Select(x => Parent.ItemDisplayName(x.Value.Item).Contains(Parent.SearchString)).All(x => !x);

  private int DropdownHeight => Math.Max(Parent.SelectItems.Count, MaxItemPerView) * AverageSelectItemHeight;
}
